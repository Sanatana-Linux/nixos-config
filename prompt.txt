Project Path: /etc/nixos

Source Tree:

```
nixos
├── overlays
│   └── default.nix
├── default.nix
├── README.md
├── hosts
│   ├── macbook-air
│   │   ├── default.nix
│   │   ├── hardware-configuration.nix
│   │   └── pkgs.nix
│   ├── bagalamukhi
│   │   ├── default.nix
│   │   ├── README.md
│   │   ├── hardware-configuration.nix
│   │   ├── pkgs.nix
│   │   └── disk.nix
│   ├── shared
│   │   ├── performance
│   │   │   ├── default.nix
│   │   │   ├── undervolt.nix
│   │   │   ├── oomd.nix
│   │   │   └── zram.nix
│   │   ├── default.nix
│   │   ├── hardware
│   │   │   ├── networking.nix
│   │   │   ├── android.nix
│   │   │   ├── intel.nix
│   │   │   ├── nvidia.nix
│   │   │   ├── common.nix
│   │   │   └── bluetooth.nix
│   │   ├── environment
│   │   │   ├── default.nix
│   │   │   └── variables.nix
│   │   ├── power
│   │   │   └── laptop.nix
│   │   ├── ai
│   │   │   ├── default.nix
│   │   │   └── ollama.nix
│   │   ├── desktop
│   │   │   ├── default.nix
│   │   │   ├── xfce.nix
│   │   │   └── awesomewm.nix
│   │   ├── wallpaper
│   │   │   ├── README.md
│   │   │   ├── wallpaper.png-autosave.kra
│   │   │   ├── wallpaper.png
│   │   │   └── monokaiprospectrum.png
│   │   ├── programs
│   │   │   ├── default.nix
│   │   │   ├── nix-ld.nix
│   │   │   └── thunar.nix
│   │   ├── users
│   │   │   ├── tlh.nix
│   │   │   └── smg.nix
│   │   ├── services
│   │   │   ├── default.nix
│   │   │   ├── udev.nix
│   │   │   └── pipewire.nix
│   │   ├── security
│   │   │   └── default.nix
│   │   ├── virtualization
│   │   │   ├── default.nix
│   │   │   ├── waydroid.nix
│   │   │   └── virt-manager.nix
│   │   ├── pkgs
│   │   │   ├── system.nix
│   │   │   ├── pentesting.nix
│   │   │   ├── fonts.nix
│   │   │   ├── gui.nix
│   │   │   ├── network.nix
│   │   │   ├── core.nix
│   │   │   ├── guilibs.nix
│   │   │   ├── shellutils.nix
│   │   │   ├── image.nix
│   │   │   ├── video.nix
│   │   │   ├── devtools.nix
│   │   │   ├── archives.nix
│   │   │   └── python.nix
│   │   ├── base
│   │   │   ├── default.nix
│   │   │   └── nix.nix
│   │   └── bios
│   │       ├── Loader.efi
│   │       ├── SREP_Config.cfg
│   │       ├── DisplayEngine.efi
│   │       ├── SetupBrowser.efi
│   │       ├── SuppressIFPatcher.efi
│   │       ├── Bootx64.efi
│   │       └── UiApp.efi
│   └── matangi
│       ├── default.nix
│       ├── README.md
│       ├── hardware-configuration.nix
│       └── pkgs.nix
├── flake.lock
├── nixpkgs.nix
├── modules
│   ├── home-manager
│   │   └── default.nix
│   └── nixos
│       └── default.nix
├── flake.nix
├── home
│   ├── tlh
│   │   ├── default.nix
│   │   └── theme.nix
│   ├── smg
│   │   ├── desktop.nix
│   │   └── default.nix
│   └── shared
│       ├── X
│       │   └── default.nix
│       ├── shell
│       │   ├── xdg.nix
│       │   ├── default.nix
│       │   ├── cli.nix
│       │   ├── bin
│       │   │   ├── updoot.nix
│       │   │   ├── notes.nix
│       │   │   ├── panes.nix
│       │   │   ├── shrooms.nix
│       │   │   ├── gita.nix
│       │   │   ├── default.nix
│       │   │   ├── nixfetch.nix
│       │   │   ├── screenlocked.nix
│       │   │   ├── om.nix
│       │   │   ├── extract.nix
│       │   │   └── mountbox.nix
│       │   ├── zsh.nix
│       │   ├── starship.nix
│       │   └── nix.nix
│       ├── desktop
│       │   └── desktop.nix
│       ├── programs
│       │   ├── ranger
│       │   │   ├── commands_full.py
│       │   │   ├── default.nix
│       │   │   ├── plugins
│       │   │   │   └── ranger_devicons
│       │   │   │       ├── devicons.py
│       │   │   │       └── __init__.py
│       │   │   ├── commands.py
│       │   │   ├── rifle.conf
│       │   │   ├── rc.conf
│       │   │   └── scope.sh
│       │   ├── firefox.nix
│       │   ├── nemo
│       │   │   └── default.nix
│       │   ├── aichat.nix
│       │   ├── zathura
│       │   │   └── default.nix
│       │   ├── kitty
│       │   │   ├── default.nix
│       │   │   └── colors.nix
│       │   ├── ghostty.nix
│       │   ├── aichat
│       │   │   └── commit.md
│       │   ├── neovim
│       │   │   └── default.nix
│       │   ├── yazi
│       │   │   ├── theme.toml
│       │   │   ├── default.nix
│       │   │   ├── yazi.toml
│       │   │   └── keymap.toml
│       │   ├── editorconfig
│       │   │   └── default.nix
│       │   ├── joshuto.nix
│       │   └── gpg
│       │       └── default.nix
│       ├── services
│       │   ├── default.nix
│       │   └── picom.nix
│       └── pkgs
│           └── default.nix
├── shell.nix
├── templates
│   ├── empty
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── cue
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── hashi
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── ocaml
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── ruby
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── go
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── elixir
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── rust
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── elm
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── opa
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── default.nix
│   ├── c-cpp
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── protobuf
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── platformio
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── vlang
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── rust-toolchain
│   │   ├── flake.lock
│   │   ├── flake.nix
│   │   └── rust-toolchain.toml
│   ├── bun
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── haskell
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── php
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── clojure
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── lean4
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── shell
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── gleam
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── nim
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── csharp
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── swi-prolog
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── r
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── nix
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── nickel
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── latex
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── pulumi
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── java
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── node
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── jupyter
│   │   ├── pyproject.toml
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── scala
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── swift
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── kotlin
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── zig
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── dhall
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── purescript
│   │   ├── flake.lock
│   │   └── flake.nix
│   ├── python
│   │   ├── flake.lock
│   │   └── flake.nix
│   └── haxe
│       ├── flake.lock
│       └── flake.nix
└── pkgs
    ├── default.nix
    ├── sea-greeter.nix
    └── material-symbols
        └── default.nix

```

`/etc/nixos/overlays/default.nix`:

```````nix
# This file defines overlays
{inputs, ...}: {
  # This one brings our custom packages from the 'pkgs' directory
  additions = final: _prev: import ../pkgs final.pkgs;

  # This one contains whatever you want to overlay
  # You can change versions, add patches, set compilation flags, anything really.
  # https://nixos.wiki/wiki/Overlays
  modifications = final: prev: {
    awesome-git-luajit = inputs.nixpkgs-f2k.packages.${prev.system}.awesome-luajit-git;
    nps = inputs.nps.defaultPackage.${prev.system};
  };

  # When applied, the unstable nixpkgs set (declared in the flake inputs) will
  # be accessible through 'pkgs.unstable'

  unstable-packages = final: _prev: {
    unstable = import inputs.nixpkgs-unstable {
      system = final.system;
      config.allowUnfree = true;
    };
  };
  f2k-packages = final: _prev: {
    f2k = import inputs.nixpkgs-f2k {
      system = final.system;
      config.allowUnfree = true;
    };
  };
  chaotic-packages = final: _prev: {
    chaotic = import inputs.chaotic {
      system = final.system;
      config.allowUnfree = true;
    };
  };
}

```````

`/etc/nixos/default.nix`:

```````nix
(import
  (
    fetchTarball {
      url = "https://github.com/edolstra/flake-compat/archive/12c64ca55c1014cdc1b16ed5a804aa8576601ff2.tar.gz";
      sha256 = "0jm6nzb83wa6ai17ly9fzpqc40wg1viib8klq8lby54agpl213w5";
    }
  )
  {
    src = ./.;
  })
.defaultNix

```````

`/etc/nixos/README.md`:

```````md
.github/README.md
```````

`/etc/nixos/hosts/macbook-air/default.nix`:

```````nix
{
  inputs,
  outputs,
  lib,
  config,
  pkgs,
  bhairava-grub-theme,
  ...
}: {
  imports = [
    # Shared configuration across all machines
    ../shared

    # Select the user configuration
    ../shared/users/tlh.nix

    ../shared/desktop/awesomewm.nix

    # Packages to install
    ./pkgs.nix
    # Specific configuration
    ./hardware-configuration.nix
  ];

  boot = {
    initrd = {
      systemd.enable = true;
      verbose = false;
    };
    blacklistedKernelModules = ["b43" "bcma"];

    kernelPackages = pkgs.linuxPackages_xanmod_latest;
    extraModulePackages = with config.boot.kernelPackages; [acpi_call broadcom_sta];

    kernelParams = [
      "acpi_call"
      # https://en.wikipedia.org/wiki/Kernel_page-table_isolation
      "pti=on"
      # make stack-based attacks on the kernel harder
      "randomize_kstack_offset=on"
      # https://tails.boum.org/contribute/design/kernel_hardening/
      "slab_nomerge"
      # needs to be on for powertop
      "debugfs=on"
      # only allow signed modules
      "module.sig_enforce=1"
      # enable buddy allocator free poisoning
      "page_poison=1"
      # performance improvement for direct-mapped memory-side-cache utilization, reduces the predictability of page allocations
      "page_alloc.shuffle=1"
      # for debugging kernel-level slab issues
      "slub_debug=FZP"
      #  always-enable sysrq keys. Useful for debugging
      "sysrq_always_enabled=1"
      # save power on idle by limiting c-states
      # https://gist.github.com/wmealing/2dd2b543c4d3cff6cab7
      "processor.max_cstate=5"
      # disable the intel_idle driver and use acpi_idle instead
      "idle=nomwait"
      # ignore access time (atime) updates on files, except when they coincide with updates to the ctime or mtime
      "rootflags=noatime"
      # enable IOMMU for devices used in passthrough and provide better host performance
      "iommu=pt"
      # disable usb autosuspend
      "usbcore.autosuspend=-1"
      # linux security modules
      "lsm=landlock,lockdown,yama,apparmor,bpf"
      # KERN_DEBUG for debugging
      "loglevel=7"
      # disables resume and restores original swap space
      "noresume"
      # prevent the kernel from blanking plymouth out of the fb
      "fbcon=nodefer"
      # disable boot logo if any
      # "logo.nologo"
      # tell the kernel to not be verbose
      "quiet"
      # disable systemd status messages
      # rd prefix means systemd-udev will be used instead of initrd
      "rd.systemd.show_status=auto"
      # lower the udev log level to show only errors or worse
      "rd.udev.log_level=3"
    ];

    loader = {
      systemd-boot.enable = false;
      efi = {
        canTouchEfiVariables = true;
        efiSysMountPoint = "/boot/";
      };

      grub = {
        enable = true;
        device = "nodev";
        efiSupport = true;
        useOSProber = true;
        bhairava-grub-theme.enable = true;
      };
    };
  };

  environment = {
    variables = {
      GDK_SCALE = "1";
      GDK_DPI_SCALE = "1";
      QT_AUTO_SCREEN_SCALE_FACTOR = "1";
    };

    systemPackages = with pkgs; [
      acpi
      acpid
      acpilight
      acpitool
      broadcom-bt-firmware
      intel-compute-runtime
      intel-gmmlib
      intel-gpu-tools
      intel-graphics-compiler
      intel-media-driver
      intel-media-sdk
      intel-ocl
      intel-vaapi-driver
      inteltool
      libva
      wirelesstools
      networkmanagerapplet
      libdbusmenu
      libdbusmenu-gtk3
      dbus-broker
      dbus-glib
      dbus
      lua53Packages.ldbus
      lua54Packages.ldbus
      luajitPackages.ldbus
      polkit_gnome
      libva-utils
      xssproxy
      xss-lock
    ];
  };

  powerManagement.enable = true;
  hardware = {
    enableAllFirmware = true;
    enableRedistributableFirmware = true;
    bluetooth = {
      enable = true;
      package = pkgs.bluez;
    };

    graphics = {
      enable = true;
      extraPackages = with pkgs; [
        mesa
        mesa-demos
        glfw
        xorg.xf86videointel
      ];
    };
  };

  networking = {
    hostName = "macbook-air";
    networkmanager.enable = true;
  };

  services = {
    logind = {
      extraConfig = ''
        # don’t shutdown when power button is short-pressed
        IdleAction=lock
        IdleActionSec=1m
      '';
      lidSwitch = "suspend";
      powerKeyLongPress = "suspend";
      powerKey = "ignore";
    };
    thermald.enable = true;

    auto-cpufreq = {
      enable = true;
      settings = {
        battery = {
          governor = "balanced";
          turbo = "never";
        };
        charger = {
          governor = "performance";
          turbo = "auto";
        };
      };
    };
    # Power Management
    upower = {
      enable = true;
      # Adjusts the action taken at the point of the battery being critical and adjusts when that is
      criticalPowerAction = "Hibernate";
      percentageLow = 15;
      percentageCritical = 8;
      percentageAction = 5;
      usePercentageForPolicy = true;
    };
    # handle ACPI events
    acpid.enable = true;

    libinput = {
      enable = true;
      touchpad = {
        naturalScrolling = false;
        disableWhileTyping = true;
      };
    };
  };

  # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
  system.stateVersion = "24.11";
}

```````

`/etc/nixos/hosts/macbook-air/hardware-configuration.nix`:

```````nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = ["xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod"];
  boot.kernelModules = ["kvm-intel" "wl"];
  boot.extraModulePackages = [config.boot.kernelPackages.broadcom_sta];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/e30c6fc5-b8c5-47da-adc4-df425d9eb244";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/B7EE-930B";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/67c208b3-eedf-42c0-b663-cb5a4014d7ec";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

```````

`/etc/nixos/hosts/macbook-air/pkgs.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: let
  archives = import ../shared/pkgs/archives.nix {inherit pkgs;};
  cliutils = import ../shared/cliutils.nix {inherit pkgs;};
  common = import ../shared/common.nix {inherit pkgs;};
  core = import ../shared/core.nix {inherit pkgs;};
  guiutils = import ../shared/guiutils.nix {inherit pkgs;};
  media = import ../shared/media.nix {inherit pkgs;};
  pythonpackages = import ../shared/python.nix {inherit pkgs;};
  sound = import ../shared/sound.nix {inherit pkgs;};
in {
  imports = [../shared/pkgs/fonts.nix];
  environment.systemPackages = with pkgs;
    [
      figlet
      toilet
      pfetch
    ]
    ++ archives
    ++ cliutils
    ++ common
    ++ core
    ++ guiutils
    ++ media
    ++ pythonpackages
    ++ sound;
}

```````

`/etc/nixos/hosts/bagalamukhi/default.nix`:

```````nix
{
  inputs,
  lib,
  config,
  pkgs,
  bhairava-grub-theme,
  ...
}: {
  imports = [
    inputs.home-manager.nixosModules.home-manager
    # Shared configuration across all machines
    ../shared/default.nix

    # Select the user configuration
    ../shared/users/tlh.nix

    # Ollama's configuration
    ../shared/ai/ollama.nix
    ../shared/ai/default.nix

    # Virtualization configuration
    ../shared/virtualization/default.nix

    #  laptop power management
    ../shared/power/laptop.nix

    # performance tweaks
    ../shared/performance/default.nix

    # Android
    ../shared/hardware/android.nix
    ../shared/virtualization/waydroid.nix

    # bluetooth support
    ../shared/hardware/bluetooth.nix

    # nvidia support
    ../shared/hardware/nvidia.nix

    # common hardware support
    ../shared/hardware/common.nix

    # Intel CPU support
    ../shared/hardware/intel.nix

    # Specific configuration
    ./hardware-configuration.nix

    # AwesomeWM
    ../shared/desktop/default.nix
    ../shared/desktop/awesomewm.nix

    # Packages
    ./pkgs.nix
  ];

  services.xserver.videoDrivers = ["nvidia"];
  services.xserver.enable = true;
  boot.plymouth.enable = true;
  # boot.plymouth.theme = "loader";
  # boot.plymouth.themePackages = [pkgs.adi1090x-plymouth-themes];

  environment.systemPackages = with pkgs; [
    cpufrequtils
    config.boot.kernelPackages.acpi_call # acpi_call kernel module
    nvme-cli
    dbus
    grub2_full
    mesa
    plymouth
    kdePackages.plymouth-kcm
    dbus-broker
    dbus-glib
    lenovo-legion
    i2c-tools
    peakperf
    intel-media-driver
    libdbusmenu
    libdbusmenu-gtk3
    linuxHeaders
    luajitPackages.ldbus
    polkit_gnome
    wirelesstools
    xss-lock
    xssproxy
  ];
  boot = {
    # early boot settings
    initrd = {
      systemd.enable = true; # enable systemd in initrd
      verbose = false; # disable verbose mode in initrd
      compressor = "zstd"; # use zstd as initrd compressor
      # pass arguments to zstd compressor
      compressorArgs = ["-19"];
      # specify the kernel modules to be included in early in boot process
      kernelModules = [
        "nvidia" # nvidia driver
        "nvidiafb" # nvidia framebuffer
        "nvidia-drm" # nvidia drm
        "nvidia-uvm" # nvidia uvm
        "nvidia-modeset" # modesetting nvidia driver
      ];
    };

    blacklistedKernelModules = ["nouveau"]; # blacklisted kernel modules

    kernelModules = ["lenovo_legion" "phc-intel" "kvm-intel" "ideapad" "apci_call"]; # specify the regular kernel modules to be loaded at boot

    tmp.cleanOnBoot = true; # clean the /tmp directory on boot

    kernelPackages = pkgs.linuxPackages_xanmod_latest; # use the latest xanmod kernel

    # specify the extra kernel modules to be included
    extraModulePackages = [
      config.boot.kernelPackages.acpi_call # acpi_call kernel module
      config.boot.kernelPackages.lenovo-legion-module # lenovo legion kernel module
      config.boot.kernelPackages.nvidiaPackages.production # nvidia x11 kernel module
    ];

    kernelParams = [
      # `I too like living dangerously`
      # check if vulnerable with: grep . /sys/devices/system/cpu/vulnerabilities/*
      "mitigations=off"
      # Rudest Kernel Interrupt for Priority Processes
      "preempt=full"
      # Hardware I/O Interface
      "acpi_call"
      # prevent the kernel from blanking plymouth out of the fb
      "fbcon=nodefer"
      # Plymouth, because apparently you can't turn it off
      "splash"
      # So we can see the kernel errors more clearly
      "quiet"
      # disable usb autosuspend
      "usbcore.autosuspend=-1"
      # Nvidia dGPU settings
      "nvidia_drm.fbdev=1" # enable Framebuffer driver
      "nvidia-drm.modeset=1" # enable Modesetting Kernel Module
      # Potentially useful for hanging or shutdown
      "reboot=acpi"
      # No hanging on reboot due to something I don't need on my laptop
      "watchdog=0"
      # Lenovo Legion Module force enable
      "lenovo-legion.force=1"
    ];

    loader = {
      timeout = null;
      systemd-boot.enable = false;
      efi = {
        canTouchEfiVariables = true;
        efiSysMountPoint = "/boot/";
      };

      grub = {
        enable = true;
        device = "nodev";
        efiSupport = true;
        timeoutStyle = "hidden";
        configurationLimit = 5;
        useOSProber = true; # Scan for Windows/Other Installs
        bhairava-grub-theme.enable = true;
        # Files needed to enter Advanced BIOS
        extraFiles = {
          "DisplayEngine.efi" = ../shared/bios/DisplayEngine.efi;
          "EFI/Boot/Bootx64.efi" = ../shared/bios/Bootx64.efi;
          "Loader.efi" = ../shared/bios/Loader.efi;
          "SREP_Config.cfg" = ../shared/bios/SREP_Config.cfg;
          "SetupBrowser.efi" = ../shared/bios/SetupBrowser.efi;
          "SuppressIFPatcher.efi" = ../shared/bios/SuppressIFPatcher.efi;
          "UiApp.efi" = ../shared/bios/UiApp.efi;
        };
        # Add in advanced BIOS entry (works for lenovo legion 16irx9, YMMV)
        extraEntries = ''
          menuentry 'Advanced UEFI Firmware Settings' {
            insmod fat
            insmod chain
            chainloader @bootRoot@/EFI/Boot/Bootx64.efi
          }
        '';
      };
    };
  };
  hardware = {
    enableAllFirmware = true;
    enableRedistributableFirmware = true;
  };

  networking = {
    hostName = "bagalamukhi";
    networkmanager.enable = true;
  };
  services = {
    logind = {
      lidSwitch = "suspend";
      powerKeyLongPress = "suspend";
    };
    # -------------------------------------------------------------------------- #
    # For desktop environment selection (since the display manager is generalized)
    displayManager = {
      defaultSession = "none+awesome";
    };
  };

  services.xserver.dpi = 189;
  # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
  system.stateVersion = "24.11";
}

```````

`/etc/nixos/hosts/bagalamukhi/README.md`:

```````md
# Host: Bagalamukhi

<img src="../../.github/assets/Bagalamukhi3.jpg" alt="Maa Bagalamukhi in amodern depiction that emphasizes the facial expressions to excellent effect in my opinion." align="center" width="100%" >

<br>

## Hardware Specs

<table>
<tr><td>Manufacturer:</td> <td>Lenovo</td> </tr>

<tr><td>Model:</td> <td>Legion Pro 5 16irx9h</td></tr>

<tr><td>CPU:</td> <td>Intel i9 14900Hx</td></tr>

<tr><td>RAM:</td> <td>32GB DDR5 (for now)</td></tr>

<tr><td>GPU:</td> <td>Nvidia 470</td> </tr>
<table>
<hr>
<br>
<br>
<br clear="both">

### About the Goddess Bagalamukhi

Maa Bagalamukhi, also known as Pitambara Peethambara Peeta or Pitaambara Peeetha, is the eighth Mahavidya, a group of ten wisdom goddesses in Hindu tantric tradition. She is depicted as a beautiful woman, with four arms, holding a club, a bow and arrow, and a rosary, and seated on a lion or a lotus. Her complexion is golden, and she wears yellow clothes, hence her name, which translates to "the one with the yellow dress." Maa Bagalamukhi is associated with the Bijakshara (seed syllable) "Hrim," which is believed to hold immense power and is used in tantric practices.

Maa Bagalamukhi is considered the presiding deity of power, victory, and control. She is believed to bestow victory over enemies, both external and internal, and is often invoked for success in battles, competitions, and arguments. According to Hindu mythology, Maa Bagalamukhi is the consort of Lord Vishnu, and is often depicted as a manifestation of Goddess Durga. She is also associated with the concept of "Bagalamukhi Yoga," a tantric practice that involves the control of the mind and senses to achieve spiritual liberation. Maa Bagalamukhi is believed to have the power to control and bind the mind and speech of her devotees, as well as their enemies, and is often worshipped for her ability to grant success and victory in all endeavors.

```````

`/etc/nixos/hosts/bagalamukhi/hardware-configuration.nix`:

```````nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "nvme" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel"];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/630bb19e-f999-42df-b3d2-2d0bf12d3084";
    fsType = "ext4";
  };
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/378C-C628";
    fsType = "vfat";
    options = ["fmask=0077" "dmask=0077"];
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/47c6e943-e3fe-4729-807a-9d5c8b70af24";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp12s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

```````

`/etc/nixos/hosts/bagalamukhi/pkgs.nix`:

```````nix
{
  inputs,
  pkgs,
  config,
  ...
}: let
  archives = import ../shared/pkgs/archives.nix {inherit pkgs;};
  core = import ../shared/pkgs/core.nix {inherit pkgs inputs;};
  devtools = import ../shared/pkgs/devtools.nix {inherit pkgs;};
  gui = import ../shared/pkgs/gui.nix {inherit pkgs;};
  guilibs = import ../shared/pkgs/guilibs.nix {inherit pkgs;};
  image = import ../shared/pkgs/image.nix {inherit pkgs;};
  network = import ../shared/pkgs/network.nix {inherit pkgs;};
  pythonpackages = import ../shared/pkgs/python.nix {inherit pkgs;};
  shellutils = import ../shared/pkgs/shellutils.nix {inherit pkgs;};
  system = import ../shared/pkgs/system.nix {inherit pkgs;};
  video = import ../shared/pkgs/video.nix {inherit pkgs;};
in {
  imports = [../shared/pkgs/fonts.nix];
  environment.systemPackages = with pkgs;
    archives
    ++ core
    ++ devtools
    ++ gui
    ++ guilibs
    ++ image
    ++ network
    ++ pythonpackages
    ++ shellutils
    ++ system
    ++ video;
}

```````

`/etc/nixos/hosts/bagalamukhi/disk.nix`:

```````nix
# TODO implement this on the disk
{
  disko.devices = {
    disk = {
      main = {
        type = "disk";
        device = "/dev/vdb";
        content = {
          type = "gpt";
          partitions = {
            ESP = {
              size = "500M";
              type = "EF00";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
                mountOptions = ["umask=0077"];
              };
            };
            luks = {
              size = "100%";
              content = {
                type = "luks";
                name = "crypted";
                extraOpenArgs = [];
                settings = {
                  # if you want to use the key for interactive login be sure there is no trailing newline
                  # for example use `echo -n "password" > /tmp/secret.key`
                  keyFile = "/tmp/secret.key";
                  allowDiscards = true;
                };
                additionalKeyFiles = ["/tmp/additionalSecret.key"];
                content = {
                  type = "lvm_pv";
                  vg = "pool";
                };
              };
            };
          };
        };
      };
    };
    lvm_vg = {
      pool = {
        type = "lvm_vg";
        lvs = {
          root = {
            size = "100%";
            content = {
              type = "filesystem";
              format = "ext4";
              mountpoint = "/";
              mountOptions = [
                "defaults"
              ];
            };
          };
          home = {
            size = "10M";
            content = {
              type = "filesystem";
              format = "ext4";
              mountpoint = "/home";
            };
          };
          raw = {
            size = "10M";
          };
        };
      };
    };
  };
}

```````

`/etc/nixos/hosts/shared/performance/default.nix`:

```````nix
{...}: {
  imports = [
    ./oomd.nix
    ./undervolt.nix
    ./zram.nix
  ];

  boot.kernel.sysctl = {
    # https://wiki.archlinux.org/title/Zram#Optimizing_swap_on_zram
    # https://github.com/pop-os/default-settings/blob/master_noble/etc/sysctl.d/10-pop-default-settings.conf
    # https://github.com/CachyOS/CachyOS-Settings/blob/master/usr/lib/sysctl.d/99-cachyos-settings.conf

    # The sysctl swappiness parameter determines the kernel's preference for pushing anonymous pages or page cache to disk in memory-starved situations.
    # A low value causes the kernel to prefer freeing up open files (page cache), a high value causes the kernel to try to use swap space,
    # and a value of 100 means IO cost is assumed to be equal.
    "vm.swappiness" = 150;

    # This parameter determines how aggressively the kernel will reclaim memory used by the VFS
    # cache. Values >100 mean the kernel will reclaim VFS cache more aggressively
    "vm.vfs_cache_pressure" = 120;

    # page-cluster controls the number of pages up to which consecutive pages are read in from swap in a single attempt.
    # This is the swap counterpart to page cache readahead. The mentioned consecutivity is not in terms of virtual/physical addresses,
    # but consecutive on swap space - that means they were swapped out together. (Default is 3)
    # increase this value to 1 or 2 if you are using physical swap (1 if ssd, 2 if hdd)
    "vm.page-cluster" = 1;

    # This action will speed up your boot and shutdown, because one less module is loaded. Additionally disabling watchdog timers increases performance and lowers power consumption
    # Disable NMI watchdog
    "kernel.nmi_watchdog" = 0;

    # Enable the sysctl setting kernel.unprivileged_userns_clone to allow normal users to run unprivileged containers.
    "kernel.unprivileged_userns_clone" = 1;

    # controls whether the Out-of-Memory (OOM) killer should kill the task that is allocating memory when the system
    # runs out of memory. This can be particularly useful in scenarios where a single process is causing a memory
    # leak or is consuming a large amount of memory, leading to an OOM condition.
    "vm.oom_kill_allocating_task" = true;

    # controls the behavior of the "Magic SysRq" key, which allows the user to send commands directly to the kernel.
    # This can be very useful for debugging and recovery in situations where the system is unresponsive or un unresponsive.
    "kernel.sysrq" = 1;

    # For lenovo-legion kernel module
    "lenovo-legion.force" = 1; # laptop
  };
  services.bpftune.enable = true;
}

```````

`/etc/nixos/hosts/shared/performance/undervolt.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  # enable fix for Intel CPU throttling
  services.throttled.enable = true;
  # Also done with the "advanced" BIOS setting to limit a
  # amount of current that the CPU can request (default was no limit!)
  # rest of undevolting done via  OS configuration as it is more responsive to experimentation
  services.undervolt = {
    enable = true;
    tempBat = 85; # Maximum battery temperature
    uncoreOffset = -50; # in mV
    coreOffset = -50; # in mV
    package = pkgs.undervolt;
    verbose = true; # More logging
    turbo = 0; # Keep Intel Turbo feature enabled (1 for disabled)
    p1 = {
      # P-State 1 limit and time window (both must be set)
      limit = 150; # in Watts
      window = 300; # in Seconds
    };
    p2 = {
      # P-State 2 limit and time window (both must be set)
      limit = 150; # in Watts
      window = 224; # in Seconds
    };
  };
}

```````

`/etc/nixos/hosts/shared/performance/oomd.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  # Systemd OOMd
  # Fedora enables these options by default. See the 10-oomd-* files here:
  # https://src.fedoraproject.org/rpms/systemd/tree/acb90c49c42276b06375a66c73673ac3510255
  systemd.oomd = {
    enable = true;
    enableRootSlice = true; # Root
    enableUserSlices = true; # User
    enableSystemSlice = true; # System
    extraConfig = {
      "DefaultMemoryPressureDurationSec" = "10s"; # time after memory pressure to take action
    };
  };
  services.irqbalance.enable = true; # distributes hardware interrupts to processor
  services.earlyoom.enable = true; # oomd before it gets bad please
}

```````

`/etc/nixos/hosts/shared/performance/zram.nix`:

```````nix
{
  # Tune the configuration to take advantage of the ZRAM swap device.

  # NOTE for the `sysctl` commands that are associated with zram, see this directory's default.nix

  zramSwap = {
    algorithm = "zstd";
    enable = true;
    memoryPercent = 100;
    priority = 10;
  };
}

```````

`/etc/nixos/hosts/shared/default.nix`:

```````nix
{
  lib,
  pkgs,
  inputs,
  outputs,
  ...
}: {
  imports = [
    inputs.home-manager.nixosModules.home-manager
    ./base/default.nix
    ./environment/default.nix
    ./programs/default.nix
    ./hardware/networking.nix
    ./security/default.nix
    ./services/default.nix
  ];

  # Set up everything home-manager related for my user
  home-manager = {
    useUserPackages = true;
    extraSpecialArgs = {inherit inputs outputs;};
    backupFileExtension = "bak";
  };

  # Overlays and Nixpkgs Settings
  nixpkgs = {
    overlays = [
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.unstable-packages
      outputs.overlays.f2k-packages
      outputs.overlays.chaotic-packages
      inputs.stable-diffusion-webui-nix.overlays.default
      inputs.nixpkgs-f2k.overlays.default
      inputs.nur.overlays.default
    ];

    config = {
      allowUnfree = true;
      allowUnsupportedSystem = true;
      allowUnfreePredicate = _: true;
      allowBroken = true;
      permittedInsecurePackages = [
        "openssl-1.1.1w"
        "dcraw-9.28.0"
        "imagemagick-6.9.13-10"
        "nix-2.16.2"
        "freeimage-unstable-2021-11-01"
        "openssl-1.1.1v"
        "python3.12-youtube-dl-2021.12.17"
        "electron-24.8.6"
        "electron-25.9.0"
        "electron-27.3.11"
        "xpdf-4.05"
      ];
    };
  };
}

```````

`/etc/nixos/hosts/shared/hardware/networking.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  boot.kernel.sysctl = {
    # Bufferbloat mitigations + slight improvements in throughput and latency.
    "net.ipv4.tcp_congestion_control" = "bbr";
    "net.core.default_qdisc" = "cake";
    # Fast Open is a TCP extension that reduces network latency by packing
    # data in the sender’s initial TCP SYN.
    # NOTE: Setting 3 = enable for both incoming and outgoing connections.
    "net.ipv4.tcp_fastopen" = 3;
  };
  networking = {
    nameservers = ["1.1.1.1" "9.9.9.9"];
    # make DHCP received nameservers don't override above
    dhcpcd.extraConfig = "nohook resolv.conf";
    networkmanager = {
      enable = true;
      dns = "none";
      unmanaged = ["docker0" "rndis0"];
      wifi = {
        # not while using hotel wifi at least
        # macAddress = "random";
        powersave = true;
      };
    };

    firewall = {
      enable = true;
      allowedTCPPorts = [22 53 69 80 443 1087 3456 11434];
      allowedUDPPortRanges = [
        {
          from = 4000;
          to = 4007;
        }
        {
          from = 8000;
          to = 8010;
        }
      ];
      allowPing = false;
      logReversePathDrops = true;
    };
  };

  systemd.services.NetworkManager-wait-online.enable = false;
}

```````

`/etc/nixos/hosts/shared/hardware/android.nix`:

```````nix
{
  config,
  lib,
  pkgs,
  ...
}: {
  environment.systemPackages = with pkgs; [
    abootimg

    # rootless access to adb fs
    adbfs-rootless
    # backup extraction
    android-backup-extractor
    # mount android with fuse
    go-mtpfs
    # download apks from terminal
    apkeep
    # identify .apk files
    apkid
    #  Copy/extract/patch android apk signatures & compare APKs
    apksigcopier
    # sign and verify apk files
    apksigner
    # reverse engineering apks
    apktool
    # manipulate app bundles
    bundletool
    # tools for .dex files
    dex2jar
    # patch android images
    imgpatchtools
    # Android SDK platform tools (adb, fastboot, etc...)
    android-tools
    payload-dumper-go # Tool for extracting all .img files from an Android OTA payload.bin file
    # Non-decompiling Android vulnerability scanner
    trueseeing
  ];

  # https://nixos.wiki/wiki/Android
  programs.adb.enable = true;

  services.udev.packages = with pkgs; [
    # To run apps on an Android device, the computer needs to have installed
    # the udev rules that cover that Android device
    android-udev-rules
  ];
}

```````

`/etc/nixos/hosts/shared/hardware/intel.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  # For undervolting see ../performance/undervolt
  hardware.cpu.intel.updateMicrocode = true;
  environment.systemPackages = with pkgs; [
    cpufrequtils
    powertop
    intel-compute-runtime
    intel-gmmlib
    intel-ocl
    intel-undervolt
    undervolt
    intelmetool
    inteltool
    intelmetool
    inteltool
    inxi
  ];
}

```````

`/etc/nixos/hosts/shared/hardware/nvidia.nix`:

```````nix
{
  pkgs,
  config,
  lib,
  ...
}: let
  nvidiaDriverChannel = config.boot.kernelPackages.nvidiaPackages.production; # stable, production, beta, latest
in {
  environment = {
    variables = {
      # Display scaling, I like things nice and compact what can I say?
      GDK_SCALE = "1";
      GDK_DPI_SCALE = "1";
      _JAVA_OPTIONS = "-Dsun.java2d.uiScale=1";
      # Necessary to correctly enable va-api (video codec hardware
      # acceleration). If this isn't set, the libvdpau backend will be
      # picked, and it doesn't work with things like Firefox.
      LIBVA_DRIVER_NAME = "nvidia";
      # Required to run the correct GBM backend for nvidia GPUs on wayland
      GBM_BACKEND = "nvidia-drm";
      # Apparently, without this nouveau may attempt to be used instead
      # (despite it being blacklisted)
      __GLX_VENDOR_LIBRARY_NAME = "nvidia";
      # CUDA Cores Package Location
      CUDA_PATH = "${pkgs.cudatoolkit}";
      EXTRA_LDFLAGS = "-L/lib -L${pkgs.linuxPackages.nvidiaPackages.production}/lib";
      EXTRA_CCFLAGS = "-I/usr/include";
      # Hardware cursors are currently broken on nvidia
      WLR_NO_HARDWARE_CURSORS = "1";
      # Required to use va-api in Firefox. See
      # https://github.com/elFarto/nvidia-vaapi-driver/issues/96
      MOZ_DISABLE_RDD_SANDBOX = "1";
      # It appears that the normal rendering mode is broken on recent
      # nvidia drivers:
      # https://github.com/elFarto/nvidia-vaapi-driver/issues/213#issuecomment-1585584038
      NVD_BACKEND = "direct";
    };
    systemPackages = with pkgs;
      [
        cudaPackages.cuda_cccl
        cudaPackages.cuda_cudart
        cudaPackages.cuda_gdb
        cudaPackages.saxpy
        cudaPackages.nvidia_fs
        cudaPackages.cuda_nvml_dev
        cudaPackages.cuda_opencl
        cudaPackages.cudatoolkit
        cudaPackages.cudnn
        cudaPackages.cutensor
        cudaPackages.libcublas
        cudaPackages.libcusparse
        cudaPackages.libnvidia_nscq
        cudatoolkit
        freeglut
        ftgl
        glew
        glfw
        intel-media-driver
        intel-vaapi-driver
        libGL
        libGLX
        libnvidia-container
        libvdpau-va-gl
        mesa
        mlx42
        nv-codec-headers
        nvidia-container-toolkit
        nvidia-texture-tools
        nvidia-vaapi-driver
        nvidia_cg_toolkit
        nvtopPackages.nvidia
        peakperf
        vaapiVdpau
        xorg_sys_opengl
      ]
      ++ [
        (python312.withPackages (p:
          with p; [
            torchWithCuda
            tensorflowWithCuda
            triton-cuda
            pycuda
            cupy
          ]))
      ];
  };

  nixpkgs.config = {
    allowUnfree = true;
    cudaSupport = true;
    nvidia.acceptLicense = true;
    allowUnfreePredicate = pkg:
      builtins.elem (lib.getName pkg) [
        "cudatoolkit"
        "nvidia-powerd"
        "nvidia-persistenced"
        "nvidia-settings"
        "nvidiaPackags.production"
      ];
  };
  hardware = {
    nvidia-container-toolkit.enable = true;
    graphics = {
      enable = true;
      enable32Bit = true;
      extraPackages = with pkgs; [
        glfw
        forge
        intel-vaapi-driver
        libva-utils
        libvdpau-va-gl
        mesa
        mlx42
        nvidia-vaapi-driver
        nvidiaDriverChannel
        vaapiVdpau
        xorg_sys_opengl
      ];
    };
    nvidia = {
      modesetting.enable = true;
      nvidiaSettings = true;
      nvidiaPersistenced = true;
      #  forceFullCompositionPipeline = true;
      dynamicBoost.enable = true;
      powerManagement = {
        # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
        enable = false;
        # Fine-grained power management. Turns off GPU when not in use.
        # Experimental and only works on modern Nvidia GPUs (Turing or newer).
        finegrained = false;
      };
      # Use the NVidia open source kernel module (not to be confused with the
      # independent third-party "nouveau" open source driver).
      # Support is limited to the Turing and later architectures. Full list of
      # supported GPUs is at:
      # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus
      # Only available from driver 515.43.04+
      # Currently alpha-quality/buggy, so false is currently the recommended setting.
      open = false;
      package = nvidiaDriverChannel;
      prime = {
        reverseSync = {
          enable = lib.mkForce true;
          setupCommands.enable = lib.mkForce true; # requires a dm with xsetupcommands ie sddm lightdm or gdm
        };
        #   sync.enable = true;
        offload.enable = lib.mkForce false;
        # Multiple uses are available, check the NVIDIA NixOS wiki
        # Use "lspci | grep -E 'VGA|3D'" to get PCI-bus IDs
        intelBusId = "PCI:00:02:0";
        nvidiaBusId = "PCI:01:00:0";
      };
    };
  };
}

```````

`/etc/nixos/hosts/shared/hardware/common.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  hardware = {
    enableAllFirmware = true;
    enableRedistributableFirmware = true;

    acpilight.enable = true;
    firmware = with pkgs; [
      linux-firmware
      firmwareLinuxNonfree
    ];
  }; # end hardware

  environment.systemPackages = with pkgs; [
    tpm-tools
    tpm2-tools
    tpmmanager
    tpm2-tss
    udevil
    udisks
    udiskie
    usbutils
    wirelesstools
    solaar
    pciutils
    dmidecode
  ];
}

```````

`/etc/nixos/hosts/shared/hardware/bluetooth.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  hardware.bluetooth = {
    enable = true;
    package = pkgs.bluez5-experimental;
  };
  services.blueman.enable = true;
}

```````

`/etc/nixos/hosts/shared/environment/default.nix`:

```````nix
{
  lib,
  pkgs,
  ...
}: {
  imports = [./variables.nix];

  # execute shebangs that assume hardcoded shell paths

  programs.zsh.enable = true;
  environment = with pkgs; {
    shells = [bash zsh];
    pathsToLink = ["/share/bash" "/share/zsh"];
  };
  users.defaultUserShell = pkgs.zsh;
}

```````

`/etc/nixos/hosts/shared/environment/variables.nix`:

```````nix
{
  environment.variables = {
    #    AI_PROVIDER = "ollama";
    BROWSER = "firefox";
    LIBGL_DRI3_DISABLE = "1";
    _JAVA_AWT_WM_NONREPARENTING = "1";
    JDK_JAVA_OPTIONS = "-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Djdk.gtk.version=2.2 -Dsun.java2d.opengl=true";
    ZSH_AUTOSUGGEST_USE_ASYNC = "true";
    G2TP_OVMF_IMAGE = "/run/libvirt/nix-ovmf/OVMF_CODE.fd";
    G2TP_GRUB_LIB = "/nix/store/77r7pkdhylp119m32lhh349yqc5dyig6-grub-2.12/lib/grub";
    OLLAMA_API_BASE = "http://127.0.0.1:11434";
    OPENAI_API_BASE = "http://localhost:11434";
  };
}

```````

`/etc/nixos/hosts/shared/power/laptop.nix`:

```````nix
{
  config,
  pkgs,
  ...
}: {
  powerManagement = {
    enable = true;
    powertop.enable = true;
  };
  services = {
    # thermal sensors and controls
    thermald.enable = true;
    # handle ACPI events
    acpid.enable = true;
    # Disable Power Profiles
    power-profiles-daemon.enable = false;
    tlp = {
      enable = true;
      settings = {
        CPU_BOOST_ON_AC = 1;
        CPU_BOOST_ON_BAT = 0;
        CPU_SCALING_GOVERNOR_ON_AC = "performance";
        CPU_SCALING_GOVERNOR_ON_BAT = "ondemand";
        TLP_DEFAULT_MODE = "BAT";
        TLP_PERSISTENT_DEFAULT = 1;
        #Optional helps save long term battery health
        START_CHARGE_THRESH_BAT0 = 10; # 40 and bellow it starts to charge
        STOP_CHARGE_THRESH_BAT0 = 80; # 80 and above it stops charging
        DEVICES_TO_DISABLE_ON_LAN_CONNECT = "wifi bluetooth";
        DEVICES_TO_ENABLE_ON_LAN_DISCONNECT = "wifi bluetooth";
      };
    };
    upower = {
      enable = true;
      # Adjusts the action taken at the point of the battery being critical and adjusts when that is
      criticalPowerAction = "HybridSleep";
      percentageLow = 15;
      percentageCritical = 6;
      percentageAction = 5;
      usePercentageForPolicy = true;
    };
  };
}

```````

`/etc/nixos/hosts/shared/ai/default.nix`:

```````nix
{pkgs, ...}: {
  environment.systemPackages = with pkgs; [
    aichat
    alpaca
    code2prompt
    gollama
    lunacy
    plandex
    # local-ai
    open-interpreter
    ollama-cuda
    python312Packages.ollama
    tgpt
  ];
}

```````

`/etc/nixos/hosts/shared/ai/ollama.nix`:

```````nix
{pkgs, ...}: {
  services.ollama = {
    enable = true;
    package = pkgs.ollama-cuda;

    user = "ollama";
    group = "ollama";

    acceleration = "cuda"; # since I am having issues and it is ollama-cuda already let's see
  };
}

```````

`/etc/nixos/hosts/shared/desktop/default.nix`:

```````nix
{pkgs, ...}: {
  gtk.iconCache.enable = true;
  services = {
    libinput = {
      enable = true;
      touchpad = {
        naturalScrolling = false;
        disableWhileTyping = true;
      };
    }; #ends libinput

    xserver = {
      enable = true;
      autorun = true;
      exportConfiguration = true;
      updateDbusEnvironment = true;

      displayManager = {
        lightdm = {
          enable = true;
          background = ../wallpaper/monokaiprospectrum.png;
          greeters.gtk = {
            enable = true;
            theme = {
              package = pkgs.materia-theme-transparent;
              name = "Materia-dark-compact";
            };
            cursorTheme = {
              package = pkgs.phinger-cursors;
              name = "Phinger Cursors (light)";
              size = 48;
            };
            iconTheme = {
              package = pkgs.papirus-icon-theme;
              name = "Papirus-Dark";
            };
            indicators = ["~session" "--spacer" "~power"];
          };
        };
      }; # ends displayManager not xserver
    }; # ends xserver
  }; # ends services
}

```````

`/etc/nixos/hosts/shared/desktop/xfce.nix`:

```````nix
{pkgs, ...}: {
  xdg.portal = {
    enable = true;
    # wlr.enable = true;
    # gtk portal needed to make gtk apps happy
    extraPortals = [pkgs.xdg-desktop-portal-gtk];
  };

  environment = {
    systemPackages = with pkgs; [
      blueman
      chromium
      deja-dup
      drawing
      elementary-xfce-icon-theme
      firefox
      evince
      foliate
      font-manager
      file-roller
      libqalculate
      orca
      pavucontrol
      qalculate-gtk
      wmctrl
      xclip
      xcolor
      xdo
      xdotool
      xfce.catfish
      xfce.gigolo
      xfce.orage
      xfce.xfburn
      xfce.xfce4-appfinder
      xfce.xfce4-clipman-plugin
      xfce.xfce4-cpugraph-plugin
      xfce.xfce4-dict
      xfce.xfce4-fsguard-plugin
      xfce.xfce4-genmon-plugin
      xfce.xfce4-netload-plugin
      xfce.xfce4-panel
      xfce.xfce4-pulseaudio-plugin
      xfce.xfce4-systemload-plugin
      xfce.xfce4-weather-plugin
      xfce.xfce4-whiskermenu-plugin
      xfce.xfce4-xkb-plugin
      xfce.xfdashboard
      xorg.xev
      xsel
      xtitle
      xwinmosaic
      orchis-theme
      papirus-icon-theme
      phinger-cursors
    ];
  };

  programs = {
    dconf.enable = true;
    gnupg.agent = {
      enable = true;
      enableSSHSupport = true;
    };
    thunar = {
      enable = true;
      plugins = with pkgs.xfce; [
        thunar-archive-plugin
        thunar-media-tags-plugin
        thunar-volman
      ];
    };
  };

  security.pam.services.gdm.enableGnomeKeyring = true;

  services = {
    blueman.enable = true;
    gnome.gnome-keyring.enable = true;
    pipewire = {
      enable = true;
      alsa = {
        enable = true;
        support32Bit = true;
      };
      pulse.enable = true;
    };
    xserver = {
      enable = true;
      excludePackages = with pkgs; [
        xterm
      ];
      displayManager = {
        lightdm = {
          enable = true;
          background = ../wallpaper/monokaiprospectrum.png;
          greeters.gtk = {
            enable = true;
            theme = {
              name = "Orchis-Grey-Dark-Compact";
              package = pkgs.orchis-theme;
            };
            cursorTheme = {
              name = "Phinger Cursors (light)";
              package = pkgs.phinger-cursors;
              size = 48;
            };
            iconTheme = {
              name = "Papirus-Dark";
              package = pkgs.papirus-icon-theme;
            };
            indicators = ["~session" "~spacer"];
          };
        };
      };
      desktopManager.xfce.enable = true;
    };
  };
}

```````

`/etc/nixos/hosts/shared/desktop/awesomewm.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  services = {
    xserver = {
      windowManager.awesome = {
        enable = true;
        package = pkgs.awesome-git-luajit;
        luaModules = with pkgs.luajitPackages; [
          luaposix
          cqueues
          cjson
          ldbus
          ldoc
          lgi
          lpeg
          lpeg_patterns
          lpeglabel
          lua
          lua-messagepack
          luarocks
          luasocket
          luasql-sqlite3
          mpack
          std-_debug
          std-normalize
          stdlib
          vicious
          wrapLua
        ];
      };
    }; # ends xserver
  }; # ends services
  # ------------------------------------------------- #
  # TODO describe ppackages in comments
  environment.systemPackages = with pkgs; [
    dbus
    dbus-broker
    dbus-glib
    gobject-introspection-unwrapped
    scrot
    menu-cache
    pango
    pangomm
    polkit_gnome
    xfce.garcon
    xfce.libxfce4ui
    xfce.libxfce4util
    xfce.tumbler
    cairo
    cairomm
    awesome-git-luajit
    pango
    pangomm
    xclip
    xdotool
    xsel
    xsettingsd
    dconf-editor
    xfce.libxfce4ui
    xfce.libxfce4util
    xorg.xwininfo
  ];
  xdg.portal.extraPortals = with pkgs; [xdg-desktop-portal-gtk];
}

```````

`/etc/nixos/hosts/shared/wallpaper/README.md`:

```````md
# Wallpaper

This directory contains the wallpaper called on by the components of this configuration (awesome's wallpaper is bundled in that configuration for those inclined to use it in other contexts to avoid the error and jarring default wallpaper that awesome includes).

| File Name     | Artist // AI // Source             | Notes                                                          |
|---------------|------------------------------------|----------------------------------------------------------------|
| wallpaper.png | [Pattern Monster](pattern.monster) | Generated from the Squiggly Line Pattern using my color scheme |
```````

`/etc/nixos/hosts/shared/programs/default.nix`:

```````nix
{
  lib,
  pkgs,
  inputs,
  config,
  ...
}: {
  imports = [./nix-ld.nix ./thunar.nix];
  ## Terminfo for all!
  environment.enableAllTerminfo = true;
  # Logitech for My Trackball Mouse Cause Its Ergonomic
  hardware = {
    logitech.wireless = {
      enable = true;
      enableGraphical = true;
    };
  };
  programs = {
    java = {
      enable = true;
      package = pkgs.jre;
    };

    nm-applet.enable = false;

    # ------------------------------------------------- #
  };
}

```````

`/etc/nixos/hosts/shared/programs/nix-ld.nix`:

```````nix
{
  lib,
  config,
  pkgs,
  ...
}: {
  programs.nix-ld = {
    enable = true;
    libraries = with pkgs; [
      android-tools
      android-udev-rules
      bash
      binutils
      curl
      glib
      glibc
      gobject-introspection
      gmime3
      icu
      config.boot.kernelPackages.nvidiaPackages.production # nvidia x11 kernel module
      cudaPackages.cudnn
      cudaPackages.nccl
      cudaPackages.nvidia_fs
      libnvidia-container
      libcanberra-gtk3
      libdbusmenu
      libdbusmenu-gtk3
      libfm
      libfm-extra
      libgee
      libgig
      libgit2
      libgit2-glib
      libglibutil
      libgudev
      libimobiledevice
      libinput
      libisoburn
      libnotify
      #librewolf
      librsvg
      libsForQt5.qt5ct
      libsecret
      libtiff
      libtool
      libunwind
      libuuid
      libxdg_basedir
      lightlocker
      luajitPackages.cjson
      luajitPackages.cqueues
      luajitPackages.inspect
      luajitPackages.ldbus
      luajitPackages.ldoc
      luajitPackages.lgi
      luajitPackages.lpeg
      luajitPackages.lpeg_patterns
      luajitPackages.lpeglabel
      luajitPackages.lua
      luajitPackages.lua-curl
      luajitPackages.lua-messagepack
      luajitPackages.lua-protobuf
      luajitPackages.lua-subprocess
      luajitPackages.luarocks
      luajitPackages.luarocks-nix
      luajitPackages.luasocket
      luajitPackages.luasql-sqlite3
      luajitPackages.mediator_lua
      luajitPackages.mpack
      luajitPackages.std-_debug
      luajitPackages.std-normalize
      luajitPackages.stdlib
      luajitPackages.vicious
      luajitPackages.wrapLua
      openssl
      ranger
      sassc
      speechd
      stdenv.cc.cc
      util-linux
      xorg.libX11
      xsettingsd
      zlib
      zsh
    ];
  };
}

```````

`/etc/nixos/hosts/shared/programs/thunar.nix`:

```````nix
{pkgs, ...}: {
  # the thunar file manager
  # we enable thunar here and add plugins instead of in systemPackages
  programs.thunar = {
    enable = true;
    plugins = with pkgs.xfce; [
      thunar-archive-plugin
      thunar-media-tags-plugin
      thunar-volman
    ];
  };

  environment = {
    systemPackages = with pkgs; [
      # packages necessery for thunar thumbnails
      xfce.tumbler
      libgsf # odf files
      ffmpegthumbnailer
      kdePackages.ark # GUI archiver for thunar archive plugin
      file-roller # GUI archiver for thunar archive plugin
      xarchiver # GUI archiver
    ];
  };

  # Mount, trash, and other functionalities
  services.gvfs.enable = true;

  # thumbnail support on thunar
  services.tumbler.enable = true;
}

```````

`/etc/nixos/hosts/shared/users/tlh.nix`:

```````nix
{
  config,
  inputs,
  pkgs,
  ...
}: let
  ifTheyExist = groups: builtins.filter (group: builtins.hasAttr group config.users.groups) groups;
in {
  programs.zsh.enable = true;
  # Please don't mute me since I am mutable!
  users.mutableUsers = true;
  users.users.tlh = {
    name = "tlh";
    description = "Thomas Leon Highbaugh"; # That's me in case you didn't know :P
    initialPassword = "password";
    isNormalUser = true;
    uid = 1000;
    shell = pkgs.zsh;
    extraGroups =
      [
        "wheel"
        "video"
        "nix"
        "audio"
        "input"
      ]
      ++ ifTheyExist [
        "plugdev"
        "adbusers"
        "docker"
        "podman"
        "git"
        "libvirtd"
        "lp"
        "mysql"
        "network"
        "networkmanager"
        "plugdev"
        "podman"
        "power"
        "systemd-journal"
        "tss"
        "video"
        "wireshark"
      ];

    packages = [pkgs.home-manager];
  };
  home-manager.users.tlh = import ../../../home/tlh/default.nix;
}

```````

`/etc/nixos/hosts/shared/users/smg.nix`:

```````nix
{
  config,
  inputs,
  pkgs,
  ...
}: let
  ifTheyExist = groups: builtins.filter (group: builtins.hasAttr group config.users.groups) groups;
in {
  programs.zsh.enable = true;
  # Please don't mute me since I am mutable!
  users.mutableUsers = true;
  users.users.smg = {
    name = "smg";
    description = "Sara Marie Guidotti";
    initialPassword = "password";
    isNormalUser = true;
    uid = 1000;
    shell = pkgs.zsh;
    extraGroups =
      [
        "wheel"
        "video"
        "nix"
        "audio"
        "input"
      ]
      ++ ifTheyExist [
        "plugdev"
        "adbusers"
        "docker"
        "podman"
        "git"
        "libvirtd"
        "lp"
        "mysql"
        "network"
        "networkmanager"
        "plugdev"
        "podman"
        "power"
        "systemd-journal"
        "tss"
        "video"
        "wireshark"
      ];

    packages = [pkgs.home-manager];
  };
  home-manager.users.smg = import ../../../home/smg/default.nix;
}

```````

`/etc/nixos/hosts/shared/services/default.nix`:

```````nix
{
  lib,
  pkgs,
  ...
}: {
  imports = [
    ./pipewire.nix
    ./udev.nix
  ];

  xdg.portal.enable = true;
  xdg.portal.config.common.default = "*";

  services = {
    # discard blocks that are not in use by the filesystem, good for SSDs
    fstrim.enable = true;
    # firmware updater for machine hardware
    fwupd.enable = true;
    # limit systemd journal size
    journald.extraConfig = ''
      SystemMaxUse=80M
      RuntimeMaxUse=30M
    '';
    dbus = {
      enable = true;
      packages = with pkgs; [dconf gcr dbus-broker polkit_gnome];
      implementation = "dbus"; # lock dbus impl to dbus-broker
    };

    # because both gnome-keyring and gnome.gnome-keyring exist
    gnome = {
      glib-networking.enable = true;
      gnome-keyring.enable = true;
    };
    # thumbnails
    tumbler.enable = true;
    # drive mounting
    gvfs.enable = true;

    openssh = {
      enable = true;
      settings = {
        PasswordAuthentication = lib.mkForce false;
        PermitRootLogin = lib.mkForce "no";
      };
    };
  };
}

```````

`/etc/nixos/hosts/shared/services/udev.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  services = {
    udev = {
      enable = true;
      packages = [
        pkgs.gnome-settings-daemon
        pkgs.xsettingsd
        pkgs.xfce.xfce4-settings
        pkgs.logitech-udev-rules # for logitech
        pkgs.android-udev-rules
        pkgs.via
        pkgs.qmk-udev-rules # For QMK/Via
        pkgs.libsigrok # For pulseview
      ];
    };
    udisks2 = {
      enable = true;
      settings = {
        "mount_options.conf" = {
          defaults = {
            defaults = "noatime";
          };
        };
      };
    };
  };
  boot.supportedFilesystems = ["ntfs"];
  programs.udevil.enable = true;
}

```````

`/etc/nixos/hosts/shared/services/pipewire.nix`:

```````nix
{pkgs, ...}: {
  services.pipewire = {
    enable = true;
    wireplumber.enable = true;
    pulse.enable = true;
    jack.enable = true;
    alsa = {
      enable = true;
      support32Bit = true;
    };
  };

  systemd.user.services = {
    pipewire.wantedBy = ["default.target"];
    pipewire-pulse = {
      path = [pkgs.pulseaudio];
      wantedBy = ["default.target"];
    };
  };
  environment.systemPackages = with pkgs; [
    alsa-firmware
    alsa-lib
    alsa-oss
    alsa-plugins
    alsa-tools
    mpc-cli
    mpdris2
    pavucontrol
    playerctl

    alsa-utils
    #alsaequal
    #audacity
    cava
    fdk_aac
    flac
    flac2all
    flaca
    libpulseaudio
    deadbeef-with-plugins
    unstable.lmms
    mediainfo
    mpc_cli
    mpd
    mpd-discord-rpc
    mpd-mpris
    mpdevil
    pamixer
    pavucontrol
    playerctl
    pulseaudio-ctl
    pulseaudioFull
    #pulsemixer
    vlc
  ];
}

```````

`/etc/nixos/hosts/shared/security/default.nix`:

```````nix
{pkgs, ...}: {
  environment.systemPackages = with pkgs; [
    # john # hash cracker
    # p0f # passive os fingerprinting
    aircrack-ng # wifi tool
    amass # network enumeration and mapping tool
    arp-scan-rs # local network ARP-based scanner
    arping # arp tool
    bettercap # mitm tool
    bitwarden #password management
    bitwarden-desktop # password management native app
    bws # bitwarden secrets management
    certgraph # ssl certificate graph crawler
    crunch # wordlist generator
    deepsecrets # find secrets in code
    dnsenum # dns enumeration
    enchive # encrypted archive
    encpipe # encrypt pipe
    enum4linux-ng # enumerate info from windows/samba
    fcrackzip # zip password cracker
    ghorg # mass clone git repos
    hashcat # hash cracker
    hcxdumptool # capture packets from wifi
    hcxtools # wifi capture and convert to hashcat/john
    iaito # gui for radare2
    keyguard # alternative bitwarden client
    ldapnomnom # ldap user brute force
    libtpms # tpm library
    msldapdump # ldap enumeration
    nikto # web server scanner
    nmap # network scanner
    onesixtyone # snmp scanner
    openssl.dev # TSL/SSL
    python313Packages.tpm2-pytss
    radare2 # reverse engineering framework
    sqlmap # sql injection tool
    ssh-tpm-agent
    sslscan # ssl scanner
    swtpm # software tpm
    tcpdump # dump network packets
    testssl # ssl checker
    thc-hydra # network logon cracker
    tor # privacy network protocol
    tor-browser-bundle-bin # firefox with integrated tor connections by default
    tpm2-abrmd # TPM2 resource manage
    tpm2-tools # tools for working with TPM chip
    tpm2-tss #  OSS implementation of the TCG TPM2 Software Stack
    tpmmanager # manage TPM hardware
    wireshark # network traffic analyzer
    zap # web app penetration testing
  ];
  security = {
    # I am told this is a better choice, I don't notice much difference but its more ergonomic to type
    doas = {
      enable = true;
      extraRules = [
        {
          # TODO implement users variable determined in /hosts/[host]/default.nix instead
          users = ["tlh" "smg"];
          groups = ["wheel" "networkmanager"];
          noPass = true;
          keepEnv = true;
          persist = false;
        }
      ];
    };
    # Just in case ;]
    sudo = {
      enable = true;
      wheelNeedsPassword = false;
      extraConfig = ''
        # clear warning in sudo lectures after each reboot.
        Defaults lecture = never
         # password input feedback - makes typed password visible as asterisks.
        Defaults pwfeedback # WARNING: where the buffer overload vulnerability comes from
        # Keep SSH_AUTH_SOCK so that pam_ssh_agent_auth.so can do its magic.
        Defaults env_keep+=SSH_AUTH_SOCK
      '';
    };

    pam = {
      sshAgentAuth.enable = true;
      # solve open file limits
      loginLimits = [
        {
          domain = "*";
          type = "soft";
          item = "nofile";
          value = "81920";
        }
      ];
    };
    polkit.enable = true;
    rtkit.enable = true;
    tpm2 = {
      enable = true;
      pkcs11.enable = true;
      abrmd.enable = true;
    };
  };
}

```````

`/etc/nixos/hosts/shared/virtualization/default.nix`:

```````nix
{
  lib,
  pkgs,
  ...
}: {
  imports = [
    ./virt-manager.nix
  ];
  virtualisation = {
    # docker = {
    #   enable = true;
    #   enableOnBoot = true;
    #   rootless = [
    #   enable = true;
    #    daemon.settings.features.cdi = true;# see: https://nixos.wiki/wiki/Nvidia#NVIDIA_Docker_not_Working
    #  };
    #   extraOptions = "--add-runtime nvidia=/run/current-system/sw/bin/nvidia-container-runtime ";
    #   package = pkgs.docker_25;

    # };
    containers.enable = true;
    libvirtd.enable = true;
    containerd.enable = true;
    oci-containers.backend = "podman";
    # I *think* I like podman better at the end of the day, jury is still out
    podman = {
      defaultNetwork.settings = {
        dns_enabled = true;
      };
      dockerCompat = true;
      dockerSocket.enable = true;
      enable = true;
    };
  };
  hardware.nvidia-container-toolkit.enable = true;
  hardware.graphics.enable32Bit = true;
  environment.systemPackages = with pkgs; [
    appvm
    conmon
    containerd
    act
    distrobox
    fuse-overlayfs
    podman-desktop
    podman-compose
    podman-tui
    kvmtool
    virt-manager
    qemu_full
    # docker_25
    # docker-buildx
    # docker-client
    # docker-compose
    # docker-credential-helpers
    # docker-distribution
    # docker-gc
    # docker-slim

    #   x11docker
  ];
}

```````

`/etc/nixos/hosts/shared/virtualization/waydroid.nix`:

```````nix
{pkgs, ...}: {
  virtualisation = {
    waydroid = {
      enable = true;
    };
  };

  environment.systemPackages = with pkgs; [weston];
}

```````

`/etc/nixos/hosts/shared/virtualization/virt-manager.nix`:

```````nix
{
  lib,
  pkgs,
  ...
}: {
  environment.systemPackages = with pkgs; [virt-manager];
  virtualisation.libvirtd.enable = true;
}

```````

`/etc/nixos/hosts/shared/pkgs/system.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  afuse
  appstream
  appstream-glib
  as-tree
  automake
  avfs
  beep
  dbus-broker
  eggdbus
  pcre2
  procps

  gnome-keyring
  libgnome-keyring
  bintools
  brightnessctl #system tool
  cdrtools # for mkisofs
  moreutils

  comma
  csv2latex
  curtail
  dconf
  ddcui
  ddcutil
  deer
  didyoumean
  dosfstools
  edk2
  edk2-uefi-shell
  efibootmgr
  exfatprogs
  fd
  gcc_latest
  gh
  ghostscript
  glib
  glibc
  grub2_full
  htop
  inotify-tools
  jdupes
  jq
  kconfig-frontends
  keyutils
  kmsxx
  lame
  latex2html
  latexrun
  lazyjournal
  libgcc
  libgccjit
  libisoburn
  lm_sensors
  lshw
  massren
  mdds
  meson
  microcodeIntel
  moar
  mtools
  neofetch
  nmon
  ntfs3g
  ntfs3g
  ntfsprogs
  opencl-clang
  openssl
  out-of-tree
  parallel
  patchelf
  pcre
  pcre-cpp
  pcre2
  pfetch
  pinentry-tty
  pls # "prettier and powerful ls"
  pmutils
  polkit_gnome
  premake
  ps_mem
  ps_mem
  python312Packages.py-dmidecode
  rcshist
  renameutils
  ripgrep-all
  rnr
  sdbus-cpp
  shared-mime-info
  shellify
  silver-searcher
  simpleTpmPk11
  slop
  smartmontools
  snappy
  sysctl
  sysfsutils
  sysprof
  sysstat
  systemctl-tui
  systemdgenie
  systeroid
  sysvtools
  sysz
  template-glib
  testdisk
  trash-cli
  tree
  ucl
  unscd
  usbmuxd
  usbmuxd
  utillinux
  ventoy-full
  vgrep
  vimv
  wget
  whois
  wiper
  wmctrl
  wmic-bin
  wmutils-core
  wmutils-libwm
  wmutils-opt
  xclip
  xdg-dbus-proxy
  xdg-desktop-portal-gtk
  xdg-user-dirs
  xdg-utils
  xdotool
  xfce.tumbler
  xfce.xfce4-power-manager
  xfontsel
  xgeometry-select
  xorg.fontalias
  xorg.fonttosfnt
  xorg.fontutil
  xorg.libxcb
  xorg.mkfontdir
  xorg.mkfontdir
  xorg.xbacklight
  xorg.xcbutil
  xorg.xcbutil
  xorg.xcbutilerrors
  xorg.xcbutilerrors
  xorg.xcbutilimage
  xorg.xcbutilimage
  xorg.xcbutilrenderutil
  xorg.xcbutilrenderutil
  xorg.xcbutilwm
  xorg.xcbutilwm
  xorg.xconsole
  xorg.xev
  xorg.xev
  xorg.xhost
  xorg.xhost
  xorg.xinit
  xorg.xkill
  xorg.xkill
  xorg.xorgproto
  xorg.xorgproto
  xorg.xprop
  xorg.xprop
  xorg.xwininfo
  xorg.xwininfo
  xorriso
  xsecurelock
  xsettingsd
  xss-lock
  xsuspender
]

```````

`/etc/nixos/hosts/shared/pkgs/pentesting.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  aircrack-ng # wifi tool
  amass # network enumeration and mapping tool
  arping # arp tool
  arp-scan-rs # local network ARP-based scanner
  bettercap # mitm tool
  certgraph # ssl certificate graph crawler
  crunch # wordlist generator
  deepsecrets # find secrets in code
  dnsenum # dns enumeration

  socat
  enchive # encrypted archive
  encpipe # encrypt pipe
  enum4linux-ng # enumerate info from windows/samba
  fcrackzip # zip password cracker
  ghorg # mass clone git repos
  hashcat # hash cracker
  hcxdumptool # capture packets from wifi
  hcxtools # wifi capture and convert to hashcat/john
  iaito # gui for radare2
  # john # hash cracker
  ldapnomnom # ldap user brute force
  msldapdump # ldap enumeration
  nikto # web server scanner
  nmap # network scanner
  onesixtyone # snmp scanner
  #p0f # passive os fingerprinting
  radare2 # reverse engineering framework
  sqlmap # sql injection tool
  sslscan # ssl scanner
  tcpdump # dump network packets
  testssl # ssl checker
  thc-hydra # network logon cracker
  wireshark # network traffic analyzer
  zap # web app penetration testing
]

```````

`/etc/nixos/hosts/shared/pkgs/fonts.nix`:

```````nix
{pkgs, ...}: {
  fonts = {
    packages = with pkgs; [
      agave
      ankacoder
      ankacoder-condensed
      annapurna-sil
      b612
      cascadia-code # microsoft ligatures font
      corefonts
      d2coding
      font-awesome_4
      font-awesome_5
      font-awesome_6
      icomoon-feather
      inter
      jost
      kanit-font
      material-symbols
      material-design-icons
      mplus-outline-fonts.githubRelease
      nerd-fonts._3270
      nerd-fonts.agave
      nerd-fonts.mplus
      nerd-fonts.ubuntu
      norwester-font
      noto-fonts # I really hate these fonts
      noto-fonts-cjk-sans # but its better than scripts not rendering
      noto-fonts-emoji # I guess...
      noto-fonts-extra
      ocr-a
      pixel-code
      proggyfonts
      rounded-mgenplus
      siji
      sudo-font
      terminus_font
      undefined-medium
      vistafonts
      xkcd-font
    ];

    fontconfig = {
      enable = true;
      cache32Bit = true;
      antialias = true;
      hinting = {
        enable = true;
        autohint = true;
        style = "slight";
      };

      subpixel.lcdfilter = "default";

      defaultFonts = {
        emoji = ["Noto Color Emoji"];
        monospace = ["Mplus Code 60"];
        sansSerif = ["Mplus Code 60"];
        serif = ["Mplus Code 60"];
      };
    };
  };
}

```````

`/etc/nixos/hosts/shared/pkgs/gui.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  appimage-run
  appstream-glib
  calibre
  bleachbit
  ebook_tools
  rofi-rbw
  rofimoji
  fbida
  gnome-characters
  file-roller
  fntsample
  fontpreview
  fuseiso
  gcolor3
  geocode-glib_2
  gmime3
  gnome-disk-utility
  gnome-font-viewer
  gnome-themes-extra
  gob2
  gparted
  graphite2
  gthumb
  gtk2-x11
  gtk3
  gtk3-x11
  gtk4
  gtkspell3
  gtkspellmm
  gusb
  hunspell
  hunspellDicts.de_DE
  hunspellDicts.en_US-large
  hunspellDicts.es_MX
  lcdf-typetools
  leela
  libappindicator-gtk3
  libglibutil
  libnotify
  libsForQt5.qt5ct
  libsForQt5.qtcurve
  libsForQt5.qtstyleplugins
  libusb1
  libxdg_basedir
  mime-types
  mimetic
  mupdf
  nemo-with-extensions
  nerd-font-patcher
  networkmanagerapplet
  ocrmypdf
  pastel
  pavucontrol
  pdf-parser
  pdftag
  pdftk
  perl538Packages.CairoGObject
  poppler_utils
  psftools
  rofi
  t1utils
  tdesktop
  template-glib
  themechanger
  transmission_4-gtk
  ttfautohint
  updfparser
  ventoy-full
  vscode-fhs
  wirelesstools
  wmctrl
  woff2
  xarchiver
  xclip
  xdg-desktop-portal
  xdg-launch
  xdgmenumaker
  xdotool
  xorg.xfontsel
  xscreensaver
]

```````

`/etc/nixos/hosts/shared/pkgs/network.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  gh
  iw
  rclone
  wirelesstools
  yt-dlp
  libgit2
  libgit2-glib
  zlib
]

```````

`/etc/nixos/hosts/shared/pkgs/core.nix`:

```````nix
{
  inputs,
  pkgs,
  ...
}:
with pkgs; [
  OVMFFull
  alejandra
  any-nix-shell
  stdenv.cc.cc
  cached-nix-shell
  cachix
  cbfmt
  ccls
  clang-tools
  cmake
  commonsCompress
  deadnix
  dmg2img
  dnsutils
  espeak-ng
  fcft
  ffmpeg-full
  figlet
  fntsample
  font-manager
  fontforge-fonttools
  fontforge-gtk
  fontpreview
  ftgl
  manix
  minizip2
  networkmanager
  ngrok
  nil
  nix-bash-completions
  nix-binary-cache
  nix-bundle
  nix-direnv-flakes
  nix-doc
  nix-health
  nix-index
  nix-janitor
  nix-zsh-completions
  nixd
  nixel
  nixos-generators
  nixpacks
  nixt
  nmap
  node2nix
  nox
  nurl
  nux
  nvd
  papirus-folders
  poppler_gi
  pulseaudio
  python312Packages.compreffor
  python312Packages.fonttools
  sassc
  service-wrapper
  sox
  sssd
  statix
  tealdeer
  toilet
  ttfautohint
  webfontkitgenerator
  woff2
]

```````

`/etc/nixos/hosts/shared/pkgs/guilibs.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  cairo
  cairomm
  dbus-broker #gui tool
  dconf
  gdk-pixbuf
  gdk-pixbuf-xlib
  gnome.gvfs
  gnome2.gtkglext
  gobject-introspection
  gobject-introspection-unwrapped
  gsettings-desktop-schemas
  gtk_engines
  htmldoc
  libcanberra-gtk3 #system tool
  libgee
  libglibutil
  libnotify
  menu-cache #gui tool
  pango
  pangomm
  polkit_gnome
  poppler_utils #system tool
  python312Packages.cairosvg
  rubyPackages.cairo-gobject
  rubyPackages.gdk_pixbuf2
  rubyPackages.gobject-introspection
  template-glib
  terminus_font #system tool
  vte-gtk4
  xclip #gui tool
  xfce.exo
  xfce.garcon
  xfce.libxfce4ui
  xfce.libxfce4util
  xfce.xfconf
  xorg-rgb
]

```````

`/etc/nixos/hosts/shared/pkgs/shellutils.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  bash-completion
  bat
  curl
  eza
  fd
  fzf
  fzy
  killall

  walk
  trash-cli
  libdbusmenu
  espeak-ng
  libdbusmenu-gtk3
  libinput
  pure-prompt
  zplug
  zsh
  zsh-autocomplete
  zsh-edit
  zsh-navigation-tools
  zsh-you-should-use
]

```````

`/etc/nixos/hosts/shared/pkgs/image.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  # unstable.gimpPlugins.exposureBlend
  unstable.gimpPlugins.fourier
  # unstable.gimpPlugins.gimplensfun
  # unstable.gimpPlugins.lightning
  # unstable.gimpPlugins.lqrPlugin
  # unstable.gimpPlugins.resynthesizer
  unstable.gimpPlugins.texturize
  unstable.gimpPlugins.waveletSharpen
  babl
  cairosvg
  shutter
  satty
  colorstorm
  colorz
  curtail
  emacsPackages.svgo
  exiftool
  feh
  figlet
  gdk-pixbuf
  gif-for-cli
  giflib
  gifsicle
  graphicsmagick
  image-roll
  image_optim
  imagemagick
  img-cat
  imgcat
  imlib2-nox
  imlib2Full
  inkscape-with-extensions
  jpeginfo
  jpegoptim
  libexif
  libjpeg
  libpng
  librsvg
  libspng
  libwebp
  lutgen
  unstable.gegl
  meme-image-generator
  metapixel
  mozjpeg
  nodePackages_latest.svgo
  optipng
  oxipng
  pixel2svg
  pixeluvo
  pngcrush
  pngtoico
  pngtools
  potrace
  python312Packages.colorthief
  python313Packages.pyfiglet
  python313Packages.pystache
  python313Packages.svgwrite
  pywal
  resvg
  resvg
  scour
  stable-diffusion-webui.forge.cuda
  svgcleaner
  t1utils
  termcolor
  toilet
  unstable.gimp-with-plugins
  unstable.gimpPlugins.bimp
  unstable.gimpPlugins.farbfeld
  unstable.gimpPlugins.gmic
  unstable.gmic
  unstable.upscayl
  geticons
  gfie
  unstable.upscayl-ncnn
  xcolor
  xcolor
  xorg-rgb
]

```````

`/etc/nixos/hosts/shared/pkgs/video.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  aaxtomp3
  audiofile
  beautysh
  cheese
  ebook_tools
  ffcast
  ffmpeg
  flowblade
  frei0r
  fswebcam
  gallery-dl
  gi-docgen
  gibo
  gnome-video-effects
  gnome.nixos-gsettings-overrides
  gsettings-desktop-schemas
  gst_all_1.gst-libav
  imgpatchtools
  inkscape-with-extensions
  kooha
  libdrm
  libgee
  libplacebo
  librem
  libtheora
  libvpl
  libwebcam
  losslesscut-bin
  lrzip
  lsix
  lv2
  megapixels
  menyoki
  metadata-cleaner
  mjpegtoolsFull
  mnamer
  mp4v2
  oggvideotools
  olive-editor
  p7zip
  pantheon.granite
  peek
  pipeline
  python312Packages.pygobject3
  redoflacs
  rx
  unstable.shotcut
  spotdl
  switcheroo
  traverso
  vid-stab
  vidmerger
  vlc
  vvenc
  webp-pixbuf-loader
  xvidcore
  yt-dlp
]

```````

`/etc/nixos/hosts/shared/pkgs/devtools.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  #nodePackages_latest.neovim
  actionlint
  tailwindcss-language-server
  any-nix-shell
  bc

  meson-tools
  gitAndTools.gh
  gitAndTools.git-absorb
  gitAndTools.git-machete
  gitAndTools.gitui
  luajitPackages.lua

  rust-analyzer
  grex
  gopls
  go
  meson
  brotli
  cached-nix-shell
  gist
  git
  git-backup-go
  git-extras
  git-filter-repo
  git-lfs
  git-repo-updater
  git-revise
  git-trim
  gitleaks

  bfg-repo-cleaner
  sassc
  cargo
  cargo-binutils
  clang
  cmake
  commitlint-rs
  deadnix
  diagnostic-languageserver
  direnv
  dotenv-linter
  eslint_d
  fuse3
  getopt
  getoptions
  gettext
  git
  git-extras
  git-filter-repo
  git-ignore
  git-repo-updater
  git-revise
  git-trim
  gitleaks
  glib
  glow
  gnumake
  gnutls
  go
  gource
  hlint
  imlib2Full
  inetutils
  just
  leptosfmt
  libclang
  libcxxStdenv
  libffi
  libglibutil
  libimobiledevice
  libpkgconf
  libtiff
  libtool
  lua
  lua-language-server
  lua5_3_compat
  lua5_4_compat
  luabind
  luaformatter
  luajitPackages.cqueues
  luajitPackages.inspect
  luajitPackages.ldbus
  luajitPackages.ldoc
  luajitPackages.lgi
  luajitPackages.lpeg
  luajitPackages.lpeg_patterns
  luajitPackages.lpeglabel
  luajitPackages.lua
  luajitPackages.lua-curl
  luajitPackages.lua-messagepack
  luajitPackages.lua-protobuf
  luajitPackages.lua-subprocess
  luajitPackages.luarocks-nix
  luajitPackages.luasocket
  luajitPackages.luasql-sqlite3
  luajitPackages.mediator_lua
  luajitPackages.mpack
  luajitPackages.std-_debug
  luajitPackages.std-normalize
  luajitPackages.stdlib
  luajitPackages.vicious
  luajitPackages.wrapLua
  lynis
  markdownlint-cli2
  nil
  nix-init
  nix-tree
  nixpkgs-fmt
  node2nix
  #nodePackages_latest.diagnostic-languageserver
  #nodePackages_latest.gulp
  #nodePackages_latest.nodejs
  #nodePackages_latest.prettier
  nodenv
  nps
  nss
  nvd
  onefetch
  openjdk
  pandoc
  pandoc-lua-filters
  pciutils
  pet
  php
  php83Packages.composer
  pipx
  pixcat
  pkg-config
  poetry
  protobuf
  protobufc
  rmlint
  ruby
  rubyfmt
  rustc
  rustfmt
  rustscan
  rustup
  rustywind
  rustlings
  sass
  sassc
  shellcheck
  shellharden
  shfmt
  sqlite
  sqlite-utils
  stdenv.cc.cc
  stylua
  sumneko-lua-language-server
  tokei
  tree-sitter
  typescript
  unstable.squashfs-tools-ng
  unstable.squashfsTools
  unstable.squashfuse
  vscode-langservers-extracted
  wkhtmltopdf-bin
  xorg.libX11
  xorg_sys_opengl
  yamllint
  yarn2nix
  zlib
]

```````

`/etc/nixos/hosts/shared/pkgs/archives.nix`:

```````nix
{pkgs, ...}:
with pkgs; [
  _7zz
  advancecomp
  archivemount
  cpio
  crabz
  dtrx
  fastjar
  gnome-autoar
  gnutar
  libarchive
  lz4
  mozlz4a
  ouch
  p7zip-rar
  pigz
  pixz
  plzip
  pxz
  rar
  rarcrack
  xarchiver
  xz
  zip
  zlib-ng
  zstd
]

```````

`/etc/nixos/hosts/shared/pkgs/python.nix`:

```````nix
{pkgs, ...}:
with pkgs;
  [
    (python312.withPackages (p:
      with p; [
        GitPython
        PyICU
        pydantic
        pydantic-core
        beautifulsoup4
        brotlicffi
        python-lsp-server
        flake8
        brotlipy
        gitdb
        googleapis-common-protos
        levenshtein
        mdformat
        pip
        pip-tools
        pipx
        protobuf
        pydantic
        pygobject3
        pylev
        pylint
        pylint-venv
        pylsp-mypy
        python-dotenv
        pyxdg
        setuptoolsBuildHook
        smmap
        sortedcontainers
        venvShellHook
        websockets
        wheel
        wheelUnpackHook
        youtube-transcript-api
      ]))
  ]
  ++ [
    gobject-introspection
    pipenv
    black
    ruff
    virtualenv
    virtualenv-clone
  ]

```````

`/etc/nixos/hosts/shared/base/default.nix`:

```````nix
{pkgs, ...}: {
  imports = [./nix.nix];

  console = let
    normal = ["191919" "fc618d" "7bd88f" "fce566" "5ad4e6" "948ae5" "6ab0f3" "69676c"];
    bright = ["2c2c2c" "d8557b" "6fbe81" "d9c65b" "53bbcc" "8179c6" "4a9cec" "dcd8e1"];
  in {
    colors = normal ++ bright;
    font = "${pkgs.terminus_font}/share/consolefonts/ter-c18b.psf.gz";
    useXkbConfig = true;
    earlySetup = true;
  };

  i18n = {
    defaultLocale = "en_US.UTF-8";
    extraLocaleSettings.LC_TIME = "en_US.UTF-8";
    supportedLocales = [
      "en_US.UTF-8/UTF-8"
    ];
  };

  time = {
    timeZone = "America/Los_Angeles";
    hardwareClockInLocalTime = true;
  };
}

```````

`/etc/nixos/hosts/shared/base/nix.nix`:

```````nix
{
  pkgs,
  inputs,
  lib,
  config,
  ...
}: {
  # Disable all documentation to reduce closure size
  documentation = {
    # disable documentation generation
    enable = false;
    # disable man pages
    man.enable = false;
    # disable dev documentation
    dev.enable = false;
    # disable doc generation
    doc.enable = false;
  };

  # ----------------------------------------------------------------------------
  # Package Manager Settings
  nix = {
    settings = {
      substituters = [
        "https://cache.nixos.org?priority=10" # nixos cache
        "https://fortuneteller2k.cachix.org" # f2k's cache
        "https://nix-community.cachix.org" # community cache
        "https://nixpkgs-unfree.cachix.org" # nixpkgs-unfree
        "https://pre-commit-hooks.cachix.org" # pre commit hooks
        "https://cuda-maintainers.cachix.org" # cuda maintainers
      ];

      trusted-public-keys = [
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        "fortuneteller2k.cachix.org-1:kXXNkMV5yheEQwT0I4XYh1MaCSz+qg72k8XAi2PthJI="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "nixpkgs-unfree.cachix.org-1:hqvoInulhbV4nJ9yJOEr+4wxhDV4xq2d1DK7S6Nj6rs="
        "pre-commit-hooks.cachix.org-1:Pkk3Panw5AW24TOv6kz3PvLhlH8puAsJTBbOPmBo7Rc="
        "cuda-maintainers.cachix.org-1:0dq3bujKpuEPMCX6U4WylrUDZ9JyUG0VpVZa7CNfq5E="
      ];

      # ----------------------------------------------------------------------
      # allow sudo users to mark the following values as trusted
      allowed-users = ["@wheel" "root" "tlh" "smg"];
      # only allow sudo users to manage the nix store
      trusted-users = [
        "root"
        "@wheel"
        "tlh"
        "smg"
      ];
      # Allow the store to optimize itself
      auto-optimise-store = true;
      # Free up to 10GiB whenever there is less than 5GB left.
      # this setting is in bytes, so we multiply with 1024 by 3
      min-free = "${toString (5 * 1024 * 1024 * 1024)}";
      max-free = "${toString (10 * 1024 * 1024 * 1024)}";
      # Useful/Necessary Features to Have Enabled
      system-features = lib.mkForce ["kvm" "recursive-nix" "big-parallel"];
      # Necessary Experimental Nix Features for Flakes and Friends
      experimental-features = lib.mkForce ["recursive-nix" "cgroups" "ca-derivations" "nix-command" "flakes"];
      flake-registry = "/etc/nix/registry.json";
      # Use C-Groups for builds(requires experimental setting above)
      use-cgroups = true;
      # show more log lines for failed builds
      log-lines = 20;
      # Use Binary Cache because we don't want to wait our lives away
      builders-use-substitutes = true;
      # No Seriously, Use the Binary Caches
      always-allow-substitutes = true;
      # continue building derivations if one fails
      keep-going = true;
      # Garbage Collection will handle this later, but for now keep it around for rebuilds
      keep-derivations = true;
      # Keep Flake Outputs (not Garbage Collected)
      keep-outputs = true;
      # Set the max number of jobs to run simultaneously (works fine once installed, but
      # limiting this is very helpful when nix-install is being buggy)
      max-jobs = "auto";
      # Turn off that annoying warning from not committing
      warn-dirty = false;
      use-xdg-base-directories = true;
    };

    # nix package manager version
    package = pkgs.nixVersions.git;
    # Garbage Collection Settings
    gc = {
      automatic = true;
      dates = "daily";
      options = "--delete-older-than 3d";
    };
    # Transform the `inputs` attribute set into a registry format
    registry = lib.mapAttrs (_: value: {flake = value;}) inputs;

    # Convert the `registry` attribute set to a list of strings in the form "key=path"
    nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;
  };
}

```````

`/etc/nixos/hosts/shared/bios/SREP_Config.cfg`:

```````cfg
Op Loaded
H2OFormBrowserDxe
Op Patch
Pattern
59B963B8C60E334099C18FD89F04022200000000
59B963B8C60E334099C18FD89F04022201000000
Op Patch
Pattern
E33545B0043046499EB714942898305300000000
E33545B0043046499EB714942898305301000000
Op Patch
Pattern
732871A65F92C64690B4A40F86A0917B00000000
732871A65F92C64690B4A40F86A0917B01000000
Op Patch
Pattern
9E76D4C6487F2A4D98E987ADCCF35CCC00000000
9E76D4C6487F2A4D98E987ADCCF35CCC01000000
Op End

Op LoadFromFV
SetupUtilityApp
Op Exec

```````

`/etc/nixos/hosts/matangi/default.nix`:

```````nix
{
  inputs,
  outputs,
  lib,
  config,
  pkgs,
  bhairava-grub-theme,
  ...
}: {
  imports = [
    inputs.home-manager.nixosModules.home-manager
    # Shared configuration across all machines
    ../shared/default.nix

    # Select the user configuration
    ../shared/users/smg.nix

    # Ollama configuration
    ../shared/ai/ollama.nix
    ../shared/ai/default.nix

    # Virtualization configuration
    ../shared/virtualization/default.nix

    #  laptop power management
    ../shared/power/laptop.nix

    # performance tweaks
    ../shared/performance/default.nix

    # Android
    ../shared/hardware/android.nix
    ../shared/virtualization/waydroid.nix

    # bluetooth support
    ../shared/hardware/bluetooth.nix

    # nvidia support
    ../shared/hardware/nvidia.nix

    # common hardware support
    ../shared/hardware/common.nix

    # Intel CPU support
    ../shared/hardware/intel.nix

    # Specific configuration
    ./hardware-configuration.nix

    # XFCE4
    ../shared/desktop/xfce.nix

    # Packages
    ./pkgs.nix
  ];

  services.xserver.videoDrivers = ["nvidia"];
  services.xserver.enable = true;
  boot.plymouth.enable = true;
  # boot.plymouth.theme = "loader";
  # boot.plymouth.themePackages = [pkgs.adi1090x-plymouth-themes];

  environment.systemPackages = with pkgs; [
    cpufrequtils
    config.boot.kernelPackages.acpi_call # acpi_call kernel module
    nvme-cli
    dbus
    mesa
    plymouth
    kdePackages.plymouth-kcm
    dbus-broker
    dbus-glib
    lenovo-legion
    i2c-tools
    peakperf
    intel-media-driver
    libdbusmenu
    libdbusmenu-gtk3
    linuxHeaders
    luajitPackages.ldbus
    polkit_gnome
    wirelesstools
    xss-lock
    xssproxy
  ];
  boot = {
    # early boot settings
    initrd = {
      systemd.enable = true; # enable systemd in initrd
      verbose = false; # disable verbose mode in initrd
      compressor = "zstd"; # use zstd as initrd compressor
      # pass arguments to zstd compressor
      compressorArgs = ["-19"];
      # specify the kernel modules to be included in early in boot process
      kernelModules = [
        "nvidia" # nvidia driver
        "nvidiafb" # nvidia framebuffer
        "nvidia-drm" # nvidia drm
        "nvidia-uvm" # nvidia uvm
        "nvidia-modeset" # modesetting nvidia driver
      ];
    };

    blacklistedKernelModules = ["nouveau"]; # blacklisted kernel modules

    kernelModules = ["lenovo_legion" "phc-intel" "kvm-intel" "ideapad" "apci_call"]; # specify the regular kernel modules to be loaded at boot

    tmp.cleanOnBoot = true; # clean the /tmp directory on boot

    kernelPackages = pkgs.linuxPackages_xanmod_latest; # use the latest xanmod kernel

    # specify the extra kernel modules to be included
    extraModulePackages = [
      config.boot.kernelPackages.acpi_call # acpi_call kernel module
      config.boot.kernelPackages.lenovo-legion-module # lenovo legion kernel module
      config.boot.kernelPackages.nvidiaPackages.production # nvidia x11 kernel module
    ];

    kernelParams = [
      # `I too like living dangerously`
      # check if vulnerable with: grep . /sys/devices/system/cpu/vulnerabilities/*
      "mitigations=off"
      # Rudest Kernel Interrupt for Priority Processes
      "preempt=full"
      # Hardware I/O Interface
      "acpi_call"
      # prevent the kernel from blanking plymouth out of the fb
      "fbcon=nodefer"
      # Plymouth, because apparently you can't turn it off
      "splash"
      # So we can see the kernel errors more clearly
      "quiet"
      # disable usb autosuspend
      "usbcore.autosuspend=-1"
      # Nvidia dGPU settings
      "nvidia_drm.fbdev=1" # enable Framebuffer driver
      "nvidia-drm.modeset=1" # enable Modesetting Kernel Module
      # Potentially useful for hanging or shutdown
      "reboot=acpi"
      # No hanging on reboot due to something I don't need on my laptop
      "watchdog=0"
      # Lenovo Legion Module force enable
      "lenovo-legion.force=1"
    ];

    loader = {
      timeout = null;
      systemd-boot.enable = false;
      efi = {
        canTouchEfiVariables = true;
        efiSysMountPoint = "/boot/";
      };

      grub = {
        enable = true;
        device = "nodev";
        efiSupport = true;
        timeoutStyle = "hidden";
        configurationLimit = 5;
        useOSProber = true; # Scan for Windows/Other Installs
        bhairava-grub-theme.enable = true;
        # Files needed to enter Advanced BIOS
        extraFiles = {
          "DisplayEngine.efi" = ../shared/bios/DisplayEngine.efi;
          "EFI/Boot/Bootx64.efi" = ../shared/bios/Bootx64.efi;
          "Loader.efi" = ../shared/bios/Loader.efi;
          "SREP_Config.cfg" = ../shared/bios/SREP_Config.cfg;
          "SetupBrowser.efi" = ../shared/bios/SetupBrowser.efi;
          "SuppressIFPatcher.efi" = ../shared/bios/SuppressIFPatcher.efi;
          "UiApp.efi" = ../shared/bios/UiApp.efi;
        };
        # Add in advanced BIOS entry (works for lenovo legion 16irx9, YMMV)
        extraEntries = ''
          menuentry 'Advanced UEFI Firmware Settings' {
            insmod fat
            insmod chain
            chainloader @bootRoot@/EFI/Boot/Bootx64.efi
          }
        '';
      };
    };
  };
  hardware = {
    enableAllFirmware = true;
    enableRedistributableFirmware = true;
  };

  networking = {
    hostName = "matangi";
    networkmanager.enable = true;
  };
  services = {
    logind = {
      lidSwitch = "suspend";
      powerKeyLongPress = "suspend";
    };
    displayManager = {
      defaultSession = "xfce";
    };
  };

  services.xserver.dpi = 189;
  # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
  system.stateVersion = "24.11";
}

```````

`/etc/nixos/hosts/matangi/README.md`:

```````md
# Host: Matangi

<img src="../../.github/assets/matangi.jpg" alt="Maa Bagalamukhi in amodern depiction that emphasizes the facial expressions to excellent effect in my opinion." align="center" width="100%" >

## Hardware Specs

<table>
<tr><td>Manufacturer:</td> <td>Lenovo</td> </tr>

<tr><td>Model:</td> <td>Legion Pro 5 16irx9h</td></tr>

<tr><td>CPU:</td> <td>Intel i9 14900Hx</td></tr>

<tr><td>RAM:</td> <td>32GB DDR5 (for now)</td></tr>

<tr><td>GPU:</td> <td>Nvidia 470</td> </tr>
<table>
<hr>
<br>
<br>
<br clear="both">

### About the Goddess Maa Tangi

Maa Tangi, also known as Matangi, is the seventh Mahavidya, a group of ten wisdom goddesses in Hindu tantric tradition. She is often depicted as a dark-skinned woman, wearing red or green clothes, adorned with ornaments, and seated on a throne or a lotus. She holds a book, a rosary, and a thunderbolt (vajra) in her hands, symbolizing her power over knowledge, speech, and action. Maa Tangi is associated with the Bijakshara (seed syllable) "Klim," which is believed to hold immense power and is used in tantric practices.

Maa Tangi is considered the presiding deity of the subtle element of sound (Shabda Tattva) and is often referred to as the goddess of learning and speech. She is believed to bestow knowledge, wisdom, and eloquence upon her devotees. According to Hindu mythology, Maa Tangi is the daughter of Lord Shiva and Goddess Parvati, and is often depicted as a manifestation of Saraswati, the goddess of knowledge and arts. However, unlike Saraswati who is associated with the creation of the universe, Maa Tangi is more connected with the preservation and destruction of the universe through her control over sound and speech. She is also associated with the concept of "Matangi Yoga," a tantric practice that involves the control of breath and sound to achieve spiritual liberation.

```````

`/etc/nixos/hosts/matangi/hardware-configuration.nix`:

```````nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "nvme" "usbhid"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel"];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/66e07834-4319-432a-8b31-cccc99fe1769";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/4854-CD54";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/1d2b48e5-9948-4501-84b8-79cc5d576192";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp12s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

```````

`/etc/nixos/hosts/matangi/pkgs.nix`:

```````nix
{
  pkgs,
  inputs,
  config,
  ...
}: let
  core = import ../shared/pkgs/core.nix {inherit pkgs inputs;};
  devtools = import ../shared/pkgs/devtools.nix {inherit pkgs;};
  gui = import ../shared/pkgs/gui.nix {inherit pkgs;};
  guilibs = import ../shared/pkgs/guilibs.nix {inherit pkgs;};
  image = import ../shared/pkgs/image.nix {inherit pkgs;};
  network = import ../shared/pkgs/network.nix {inherit pkgs;};
  pythonpackages = import ../shared/pkgs/python.nix {inherit pkgs;};
  shellutils = import ../shared/pkgs/shellutils.nix {inherit pkgs;};
  system = import ../shared/pkgs/system.nix {inherit pkgs;};
  video = import ../shared/pkgs/video.nix {inherit pkgs;};
in {
  imports = [../shared/pkgs/fonts.nix];
  environment.systemPackages = with pkgs;
    [
      pfetch
    ]
    ++ core
    ++ gui
    ++ guilibs
    ++ image
    ++ network
    ++ pythonpackages
    ++ system
    ++ video;
}

```````

`/etc/nixos/flake.lock`:

```````lock
{
  "nodes": {
    "bhairava-grub-theme": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1739089606,
        "narHash": "sha256-pu3LR7p/fUdqEWiWs2LfpZeXalYk7N/umkheVkfliV8=",
        "owner": "Sanatana-Linux",
        "repo": "Bhairava-Grub-Theme",
        "rev": "de7a57a353894e651be61b5c4b7849142f5bec59",
        "type": "github"
      },
      "original": {
        "owner": "Sanatana-Linux",
        "repo": "Bhairava-Grub-Theme",
        "type": "github"
      }
    },
    "cachix": {
      "locked": {
        "lastModified": 1635350005,
        "narHash": "sha256-tAMJnUwfaDEB2aa31jGcu7R7bzGELM9noc91L2PbVjg=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "1c1f5649bb9c1b0d98637c8c365228f57126f361",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-20.09",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "chaotic": {
      "inputs": {
        "fenix": "fenix",
        "flake-schemas": "flake-schemas",
        "home-manager": "home-manager",
        "jovian": "jovian",
        "nixpkgs": "nixpkgs"
      },
      "locked": {
        "lastModified": 1740596849,
        "narHash": "sha256-8elI7d5XCz9Lv+qovIW6J1/9aGjgNJPjLeJ5OFmtgzY=",
        "owner": "chaotic-cx",
        "repo": "nyx",
        "rev": "b950948f45d8da3da0bb8dcf95dbeb421fd5fc2b",
        "type": "github"
      },
      "original": {
        "owner": "chaotic-cx",
        "ref": "nyxpkgs-unstable",
        "repo": "nyx",
        "type": "github"
      }
    },
    "emacs": {
      "inputs": {
        "nixpkgs": "nixpkgs_6",
        "nixpkgs-stable": "nixpkgs-stable"
      },
      "locked": {
        "lastModified": 1740708553,
        "narHash": "sha256-BMQ5onp2fgBIekFKO+IjQq/NS+lztykzE5Gw3D2cGss=",
        "owner": "nix-community",
        "repo": "emacs-overlay",
        "rev": "729ae31cfa6a051b9585f9f4076e3df082bacfa2",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "emacs-overlay",
        "type": "github"
      }
    },
    "fenix": {
      "inputs": {
        "nixpkgs": [
          "chaotic",
          "nixpkgs"
        ],
        "rust-analyzer-src": "rust-analyzer-src"
      },
      "locked": {
        "lastModified": 1740551776,
        "narHash": "sha256-CkcCb2hGSL1owuZpjuNB6UQzlyaXgvuRXmjY6jLqjPc=",
        "owner": "nix-community",
        "repo": "fenix",
        "rev": "07a730bc80e8a4106df5b2341aa5602a240ee112",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "fenix",
        "type": "github"
      }
    },
    "fenix_2": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs-f2k",
          "nixpkgs-fmt",
          "nixpkgs"
        ],
        "rust-analyzer-src": "rust-analyzer-src_2"
      },
      "locked": {
        "lastModified": 1637475807,
        "narHash": "sha256-E3nzOvlzZXwyo8Stp5upKsTCDcqUTYAFj4EC060A31c=",
        "owner": "nix-community",
        "repo": "fenix",
        "rev": "960e7fef45692a4fffc6df6d6b613b0399bbdfd5",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "fenix",
        "type": "github"
      }
    },
    "firefox-nightly": {
      "inputs": {
        "cachix": "cachix",
        "flake-compat": "flake-compat",
        "lib-aggregate": "lib-aggregate",
        "mozilla": "mozilla",
        "nixpkgs": "nixpkgs_2"
      },
      "locked": {
        "lastModified": 1740784667,
        "narHash": "sha256-bBwiamHZO0Xo9YZzA7xzmDz7uO0TVV6fVNOG6NOT+p0=",
        "owner": "nix-community",
        "repo": "flake-firefox-nightly",
        "rev": "e63479b6f827ab9f02cdcd4546cfbab4bac2d960",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "flake-firefox-nightly",
        "type": "github"
      }
    },
    "flake-compat": {
      "locked": {
        "lastModified": 1717312683,
        "narHash": "sha256-FrlieJH50AuvagamEvWMIE6D2OAnERuDboFDYAED/dE=",
        "owner": "nix-community",
        "repo": "flake-compat",
        "rev": "38fd3954cf65ce6faf3d0d45cd26059e059f07ea",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_2": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_3": {
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "revCount": 57,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/edolstra/flake-compat/1.0.1/018afb31-abd1-7bff-a5e4-cff7e18efb7a/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/edolstra/flake-compat/1.tar.gz"
      }
    },
    "flake-parts": {
      "inputs": {
        "nixpkgs-lib": [
          "nur",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733312601,
        "narHash": "sha256-4pDvzqnegAfRkPwO3wmwBhVi/Sye1mzps0zHWYnP88c=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "205b12d8b7cd4802fbcb8e8ef6a0f1408781a4f9",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-schemas": {
      "locked": {
        "lastModified": 1721999734,
        "narHash": "sha256-G5CxYeJVm4lcEtaO87LKzOsVnWeTcHGKbKxNamNWgOw=",
        "rev": "0a5c42297d870156d9c57d8f99e476b738dcd982",
        "revCount": 75,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/DeterminateSystems/flake-schemas/0.1.5/0190ef2f-61e0-794b-ba14-e82f225e55e6/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/DeterminateSystems/flake-schemas/%3D0.1.5.tar.gz"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_2": {
      "inputs": {
        "systems": "systems_2"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_3": {
      "inputs": {
        "systems": "systems_3"
      },
      "locked": {
        "lastModified": 1710146030,
        "narHash": "sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "b1d9ab70662946ef0850d488da1c9019f3a9752a",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_4": {
      "locked": {
        "lastModified": 1637014545,
        "narHash": "sha256-26IZAc5yzlD9FlDT54io1oqG/bBoyka+FJk5guaX4x4=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "bba5dcc8e0b20ab664967ad83d24d64cb64ec4f4",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_5": {
      "locked": {
        "lastModified": 1667395993,
        "narHash": "sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "5aed5285a952e0b949eb3ba02c12fa4fcfef535f",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_6": {
      "inputs": {
        "systems": "systems_4"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "higgs-boson": {
      "flake": false,
      "locked": {
        "lastModified": 1740299712,
        "narHash": "sha256-yWpXzRRQszaODFCSlAFJfmwu6ZNPx9Im+jZ8/Y69k3w=",
        "owner": "ThomasHighbaugh",
        "repo": "firefox",
        "rev": "a2f1af27e2d0693c9ae456002efecf719e2fbe25",
        "type": "github"
      },
      "original": {
        "owner": "ThomasHighbaugh",
        "repo": "firefox",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "chaotic",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1740494361,
        "narHash": "sha256-Dd/GhJ9qKmUwuhgt/PAROG8J6YdU2ZjtJI9SQX5sVQI=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "74f0a8546e3f2458c870cf90fc4b38ac1f498b17",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "home-manager_2": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1740699498,
        "narHash": "sha256-r9hkKzX99CGiP1ZqH0e+SWKK4CMsRNRLyotuwrUjhTI=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "b71edac7a3167026aabea82a54d08b1794088c21",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "jovian": {
      "inputs": {
        "nix-github-actions": "nix-github-actions",
        "nixpkgs": [
          "chaotic",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1740553144,
        "narHash": "sha256-ujQ/f3mcYECH1o0vzakMLAQRCMeF/SXd8w4uBFHxYO8=",
        "owner": "Jovian-Experiments",
        "repo": "Jovian-NixOS",
        "rev": "14a125ea5c440c57310dc1bb3acf7641078d783a",
        "type": "github"
      },
      "original": {
        "owner": "Jovian-Experiments",
        "repo": "Jovian-NixOS",
        "type": "github"
      }
    },
    "lib-aggregate": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs-lib": "nixpkgs-lib"
      },
      "locked": {
        "lastModified": 1740312740,
        "narHash": "sha256-z3M+zR18jGF1IIJ7Fp9LVOkEIUBhtY+65TSNq/DbgzQ=",
        "owner": "nix-community",
        "repo": "lib-aggregate",
        "rev": "1229db6582e2ee6337d6fbc4c3c59f2ef0b6d481",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "lib-aggregate",
        "type": "github"
      }
    },
    "mozilla": {
      "flake": false,
      "locked": {
        "lastModified": 1740762144,
        "narHash": "sha256-I7a6e3IYJAp9u3PwUSW1+oilO1tAfnbeN3/YJQ+ObCo=",
        "owner": "mozilla",
        "repo": "nixpkgs-mozilla",
        "rev": "e35b0e071cae97469d80222be988fdd972b22c3b",
        "type": "github"
      },
      "original": {
        "owner": "mozilla",
        "repo": "nixpkgs-mozilla",
        "type": "github"
      }
    },
    "naersk": {
      "inputs": {
        "nixpkgs": "nixpkgs_8"
      },
      "locked": {
        "lastModified": 1733346208,
        "narHash": "sha256-a4WZp1xQkrnA4BbnKrzJNr+dYoQr5Xneh2syJoddFyE=",
        "owner": "nix-community",
        "repo": "naersk",
        "rev": "378614f37a6bee5a3f2ef4f825a73d948d3ae921",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "naersk",
        "type": "github"
      }
    },
    "nil": {
      "inputs": {
        "flake-utils": "flake-utils_2",
        "nixpkgs": [
          "nixpkgs"
        ],
        "rust-overlay": [
          "rust-overlay"
        ]
      },
      "locked": {
        "lastModified": 1732053863,
        "narHash": "sha256-DCIVdlb81Fct2uwzbtnawLBC/U03U2hqx8trqTJB7WA=",
        "owner": "oxalica",
        "repo": "nil",
        "rev": "2e24c9834e3bb5aa2a3701d3713b43a6fb106362",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "nil",
        "type": "github"
      }
    },
    "nix-github-actions": {
      "inputs": {
        "nixpkgs": [
          "chaotic",
          "jovian",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1729697500,
        "narHash": "sha256-VFTWrbzDlZyFHHb1AlKRiD/qqCJIripXKiCSFS8fAOY=",
        "owner": "zhaofengli",
        "repo": "nix-github-actions",
        "rev": "e418aeb728b6aa5ca8c5c71974e7159c2df1d8cf",
        "type": "github"
      },
      "original": {
        "owner": "zhaofengli",
        "ref": "matrix-name",
        "repo": "nix-github-actions",
        "type": "github"
      }
    },
    "nix-vscode-extensions": {
      "inputs": {
        "flake-compat": "flake-compat_2",
        "flake-utils": "flake-utils_3",
        "nixpkgs": "nixpkgs_3"
      },
      "locked": {
        "lastModified": 1740794166,
        "narHash": "sha256-nenw9VQ2viaFZvj2xQDGyMyjPr0IVyi/vpYUtfP09WU=",
        "owner": "nix-community",
        "repo": "nix-vscode-extensions",
        "rev": "dbd1339a34dd0379d7e83e9795ccaf0d0cef0db8",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "nix-vscode-extensions",
        "type": "github"
      }
    },
    "nixlib": {
      "locked": {
        "lastModified": 1736643958,
        "narHash": "sha256-tmpqTSWVRJVhpvfSN9KXBvKEXplrwKnSZNAoNPf/S/s=",
        "owner": "nix-community",
        "repo": "nixpkgs.lib",
        "rev": "1418bc28a52126761c02dd3d89b2d8ca0f521181",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "nixpkgs.lib",
        "type": "github"
      }
    },
    "nixos-generators": {
      "inputs": {
        "nixlib": "nixlib",
        "nixpkgs": "nixpkgs_4"
      },
      "locked": {
        "lastModified": 1737057290,
        "narHash": "sha256-3Pe0yKlCc7EOeq1X/aJVDH0CtNL+tIBm49vpepwL1MQ=",
        "owner": "nix-community",
        "repo": "nixos-generators",
        "rev": "d002ce9b6e7eb467cd1c6bb9aef9c35d191b5453",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "nixos-generators",
        "type": "github"
      }
    },
    "nixos-hardware": {
      "locked": {
        "lastModified": 1740646007,
        "narHash": "sha256-dMReDQobS3kqoiUCQIYI9c0imPXRZnBubX20yX/G5LE=",
        "owner": "NixOS",
        "repo": "nixos-hardware",
        "rev": "009b764ac98a3602d41fc68072eeec5d24fc0e49",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "master",
        "repo": "nixos-hardware",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1740367490,
        "narHash": "sha256-WGaHVAjcrv+Cun7zPlI41SerRtfknGQap281+AakSAw=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "0196c0175e9191c474c26ab5548db27ef5d34b05",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-f2k": {
      "inputs": {
        "emacs": "emacs",
        "nixpkgs": "nixpkgs_7",
        "nixpkgs-fmt": "nixpkgs-fmt",
        "parts": "parts"
      },
      "locked": {
        "lastModified": 1740711314,
        "narHash": "sha256-KMarPT3cNY9d3Bm9fzM5i1J5fqcz1lDaNs87KSHNfXk=",
        "owner": "moni-dz",
        "repo": "nixpkgs-f2k",
        "rev": "2f208aa7b1a5a282569349f76e7768fe2e55162b",
        "type": "github"
      },
      "original": {
        "owner": "moni-dz",
        "repo": "nixpkgs-f2k",
        "type": "github"
      }
    },
    "nixpkgs-fmt": {
      "inputs": {
        "fenix": "fenix_2",
        "flake-utils": "flake-utils_4",
        "nixpkgs": [
          "nixpkgs-f2k",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1721822211,
        "narHash": "sha256-zacOgNv3qM3AbSG3p5PT/Bfc4c7NoIqoLII8/jIUsOQ=",
        "owner": "nix-community",
        "repo": "nixpkgs-fmt",
        "rev": "bdb15b4c7e0cb49ae091dd43113d0a938afae02c",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "nixpkgs-fmt",
        "type": "github"
      }
    },
    "nixpkgs-lib": {
      "locked": {
        "lastModified": 1740272720,
        "narHash": "sha256-oiwv/ZK/2FhGxrCkQkB83i7GnWXPPLzoqFHpDD3uYpk=",
        "owner": "nix-community",
        "repo": "nixpkgs.lib",
        "rev": "3d8ac19b63cf9d8305eed7301e4e83ff4ce9f495",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "nixpkgs.lib",
        "type": "github"
      }
    },
    "nixpkgs-lib_2": {
      "locked": {
        "lastModified": 1738452942,
        "narHash": "sha256-vJzFZGaCpnmo7I6i416HaBLpC+hvcURh/BQwROcGIp8=",
        "type": "tarball",
        "url": "https://github.com/NixOS/nixpkgs/archive/072a6db25e947df2f31aab9eccd0ab75d5b2da11.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://github.com/NixOS/nixpkgs/archive/072a6db25e947df2f31aab9eccd0ab75d5b2da11.tar.gz"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1740603184,
        "narHash": "sha256-t+VaahjQAWyA+Ctn2idyo1yxRIYpaDxMgHkgCNiMJa4=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "f44bd8ca21e026135061a0a57dcf3d0775b67a49",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-24.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-unstable": {
      "locked": {
        "lastModified": 1740795983,
        "narHash": "sha256-Rpc94yYBXHYrisXP/P2Nmmay1paCDGC5P0b0+TmWhTI=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "312c944309f4a27accad8728526e0d53f0cbb331",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "master",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_10": {
      "locked": {
        "lastModified": 1736320768,
        "narHash": "sha256-nIYdTAiKIGnFNugbomgBJR+Xv5F1ZQU+HfaBqJKroC0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "4bc9c909d9ac828a039f288cf872d16d38185db8",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixpkgs-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1740560979,
        "narHash": "sha256-Vr3Qi346M+8CjedtbyUevIGDZW8LcA1fTG0ugPY/Hic=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "5135c59491985879812717f4c9fea69604e7f26f",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_3": {
      "locked": {
        "lastModified": 1713805509,
        "narHash": "sha256-YgSEan4CcrjivCNO5ZNzhg7/8ViLkZ4CB/GrGBVSudo=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "1e1dc66fe68972a76679644a5577828b6a7e8be4",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixpkgs-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_4": {
      "locked": {
        "lastModified": 1736657626,
        "narHash": "sha256-FWlPMUzp0lkQBdhKlPqtQdqmp+/C+1MBiEytaYfrCTY=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "2f9e2f85cb14a46410a1399aa9ea7ecf433e422e",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixpkgs-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_5": {
      "locked": {
        "lastModified": 1740695751,
        "narHash": "sha256-D+R+kFxy1KsheiIzkkx/6L63wEHBYX21OIwlFV8JvDs=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "6313551cd05425cd5b3e63fe47dbc324eabb15e4",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_6": {
      "locked": {
        "lastModified": 1740560979,
        "narHash": "sha256-Vr3Qi346M+8CjedtbyUevIGDZW8LcA1fTG0ugPY/Hic=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "5135c59491985879812717f4c9fea69604e7f26f",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_7": {
      "locked": {
        "lastModified": 1740711108,
        "narHash": "sha256-IfyJlFnkcIHD8piv+zuEhEt87mklpemnRsDtgQmgeyI=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "d8a79f6aa58e9eb108fee62ee18640c872525ba1",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "master",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_8": {
      "locked": {
        "lastModified": 1734323986,
        "narHash": "sha256-m/lh6hYMIWDYHCAsn81CDAiXoT3gmxXI9J987W5tZrE=",
        "path": "/nix/store/wj2qla569hnxwqfc26imv5hqbxc1rc27-source",
        "rev": "394571358ce82dff7411395829aa6a3aad45b907",
        "type": "path"
      },
      "original": {
        "id": "nixpkgs",
        "type": "indirect"
      }
    },
    "nixpkgs_9": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nps": {
      "inputs": {
        "flake-compat": "flake-compat_3",
        "flake-utils": "flake-utils_5",
        "naersk": "naersk",
        "nixpkgs": "nixpkgs_9"
      },
      "locked": {
        "lastModified": 1738483270,
        "narHash": "sha256-q/PkigsNAI7MCmeDFBMGuZJFXVL95pQCNOVhNvBH9dc=",
        "owner": "OleMussmann",
        "repo": "Nix-Package-Search",
        "rev": "2d005f22a52a0bda19d1afd8736ad5bfcb1d38cf",
        "type": "github"
      },
      "original": {
        "owner": "OleMussmann",
        "repo": "Nix-Package-Search",
        "type": "github"
      }
    },
    "nur": {
      "inputs": {
        "flake-parts": "flake-parts",
        "nixpkgs": [
          "nixpkgs"
        ],
        "treefmt-nix": "treefmt-nix"
      },
      "locked": {
        "lastModified": 1740795575,
        "narHash": "sha256-e3wPkm59um8euIDi2Ws9HD50DLFRlXyeVlnqTdG2KVM=",
        "owner": "nix-community",
        "repo": "NUR",
        "rev": "cec74042228d5bd5e1e9f017bf0a64ea8a5975f4",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "NUR",
        "type": "github"
      }
    },
    "parts": {
      "inputs": {
        "nixpkgs-lib": "nixpkgs-lib_2"
      },
      "locked": {
        "lastModified": 1738453229,
        "narHash": "sha256-7H9XgNiGLKN1G1CgRh0vUL4AheZSYzPm+zmZ7vxbJdo=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "32ea77a06711b758da0ad9bd6a844c5740a87abd",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "python-flexseal": {
      "inputs": {
        "flake-utils": [
          "stable-diffusion-webui-nix",
          "flake-utils"
        ],
        "nixpkgs": [
          "stable-diffusion-webui-nix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1734836319,
        "narHash": "sha256-h/Jiq852WJyyAL037sIxjPDScjeH8sUoZVZBWlciXaw=",
        "owner": "Janrupf",
        "repo": "python-flexseal",
        "rev": "fdd313f7b9a5c9545c015acaf0729b01f708118a",
        "type": "github"
      },
      "original": {
        "owner": "Janrupf",
        "repo": "python-flexseal",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "bhairava-grub-theme": "bhairava-grub-theme",
        "chaotic": "chaotic",
        "firefox-nightly": "firefox-nightly",
        "higgs-boson": "higgs-boson",
        "home-manager": "home-manager_2",
        "nil": "nil",
        "nix-vscode-extensions": "nix-vscode-extensions",
        "nixos-generators": "nixos-generators",
        "nixos-hardware": "nixos-hardware",
        "nixpkgs": "nixpkgs_5",
        "nixpkgs-f2k": "nixpkgs-f2k",
        "nixpkgs-unstable": "nixpkgs-unstable",
        "nps": "nps",
        "nur": "nur",
        "rust-overlay": "rust-overlay",
        "stable-diffusion-webui-nix": "stable-diffusion-webui-nix"
      }
    },
    "rust-analyzer-src": {
      "flake": false,
      "locked": {
        "lastModified": 1740470570,
        "narHash": "sha256-iYjLS4jy/IJScOHZfbQ31vkrS5tl0bjXtzYP4XKA2Pc=",
        "owner": "rust-lang",
        "repo": "rust-analyzer",
        "rev": "89255449982473939a4f8ee954512d339225c182",
        "type": "github"
      },
      "original": {
        "owner": "rust-lang",
        "ref": "nightly",
        "repo": "rust-analyzer",
        "type": "github"
      }
    },
    "rust-analyzer-src_2": {
      "flake": false,
      "locked": {
        "lastModified": 1637439871,
        "narHash": "sha256-2awQ/obzl7zqYgLwbQL0zT58gN8Xq7n+81GcMiS595I=",
        "owner": "rust-analyzer",
        "repo": "rust-analyzer",
        "rev": "4566414789310acb2617543f4b50beab4bb48e06",
        "type": "github"
      },
      "original": {
        "owner": "rust-analyzer",
        "ref": "nightly",
        "repo": "rust-analyzer",
        "type": "github"
      }
    },
    "rust-overlay": {
      "inputs": {
        "nixpkgs": "nixpkgs_10"
      },
      "locked": {
        "lastModified": 1740709839,
        "narHash": "sha256-4dF++MXIXna/AwlZWDKr7bgUmY4xoEwvkF1GewjNrt0=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "b4270835bf43c6f80285adac6f66a26d83f0f277",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    },
    "stable-diffusion-webui-nix": {
      "inputs": {
        "flake-utils": "flake-utils_6",
        "nixpkgs": [
          "nixpkgs"
        ],
        "python-flexseal": "python-flexseal"
      },
      "locked": {
        "lastModified": 1736572586,
        "narHash": "sha256-S/TppmrAnMUXLrJSyEj3PHvUYVfiRpV5xurpOR7QUY4=",
        "owner": "Janrupf",
        "repo": "stable-diffusion-webui-nix",
        "rev": "7df8049f078544640b957f29b9dacb20595e1a0c",
        "type": "github"
      },
      "original": {
        "owner": "Janrupf",
        "ref": "main",
        "repo": "stable-diffusion-webui-nix",
        "type": "github"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_2": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_3": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_4": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "treefmt-nix": {
      "inputs": {
        "nixpkgs": [
          "nur",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733222881,
        "narHash": "sha256-JIPcz1PrpXUCbaccEnrcUS8jjEb/1vJbZz5KkobyFdM=",
        "owner": "numtide",
        "repo": "treefmt-nix",
        "rev": "49717b5af6f80172275d47a418c9719a31a78b53",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "treefmt-nix",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/nixpkgs.nix`:

```````nix
# A nixpkgs instance that is grabbed from the pinned nixpkgs commit in the lock file
# This is useful to avoid using channels when using legacy nix commands
let
  lock = (builtins.fromJSON (builtins.readFile ./flake.lock)).nodes.nixpkgs.locked;
in
  import (fetchTarball {
    url = "https://github.com/nixos-unstable/nixpkgs/archive/${lock.rev}.tar.gz";
    sha256 = lock.narHash;
  })

```````

`/etc/nixos/modules/home-manager/default.nix`:

```````nix
# Add your reusable home-manager modules to this directory, on their own file (https://nixos.wiki/wiki/Module).
# These should be stuff you would like to share with others, not your personal configurations.
{
  # List your module files here
  # my-module = import ./my-module.nix;
}

```````

`/etc/nixos/modules/nixos/default.nix`:

```````nix
{
}

```````

`/etc/nixos/flake.nix`:

```````nix
{
  description = "The ShizNix Upon Which I Constantly Nit Pick";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    # TODO change this to master as well as the unstable.pkg(s) to
    # master.pkg(s)
    nixpkgs-unstable.url = "github:nixos/nixpkgs/master";
    chaotic.url = "github:chaotic-cx/nyx/nyxpkgs-unstable";
    nixpkgs-f2k.url = "github:moni-dz/nixpkgs-f2k";
    nix-vscode-extensions.url = "github:nix-community/nix-vscode-extensions";
    nur = {
      url = "github:nix-community/NUR";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-hardware.url = "github:NixOS/nixos-hardware/master";
    nixos-generators.url = "github:nix-community/nixos-generators";
    rust-overlay.url = "github:oxalica/rust-overlay";
    higgs-boson = {
      url = "github:ThomasHighbaugh/firefox";
      flake = false;
    };
    nil = {
      url = "github:oxalica/nil";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.rust-overlay.follows = "rust-overlay";
    };
    firefox-nightly.url = "github:nix-community/flake-firefox-nightly";
    nps.url = "github:OleMussmann/Nix-Package-Search";
    bhairava-grub-theme = {
      url = "github:Sanatana-Linux/Bhairava-Grub-Theme";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # neovim-nightly-overlay = {
    #   url = "github:nix-community/neovim-nightly-overlay";
    #   inputs.nixpkgs.follows = "nixpkgs";
    # };
    stable-diffusion-webui-nix = {
      url = "github:Janrupf/stable-diffusion-webui-nix/main";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    home-manager,
    nixos-hardware,
    nixos-generators,
    #   neovim-nightly-overlay,
    bhairava-grub-theme,
    nur,
    chaotic,
    ...
  } @ inputs: let
    inherit (self) outputs;
    # Supported systems for your flake packages, shell, etc.
    systems = [
      "aarch64-linux"
      "x86_64-linux"
    ];
    # This is a function that generates an attribute by calling a function you
    # pass to it, with each system as an argument
    forAllSystems = nixpkgs.lib.genAttrs systems;
  in {
    # Alejandra formatting
    formatter = forAllSystems (system: nixpkgs.legacyPackages.${system}.alejandra);
    # The extra packages and replacements that make this configuration tick
    overlays = import ./overlays {inherit inputs;};
    templates = import ./templates;
    #
    packages = forAllSystems (system: import ./pkgs nixpkgs.legacyPackages.${system});

    devShells = forAllSystems (pkgs: import ./shell.nix {inherit pkgs;});

    nixosConfigurations = {
      extra-substituters = [
        "https://cache.nixos.org?priority=10" # nixos cache
        "https://fortuneteller2k.cachix.org" # f2k's cache
        "https://nix-community.cachix.org" # community cache
        "https://nixpkgs-unfree.cachix.org" # nixpkgs-unfree
        "https://pre-commit-hooks.cachix.org" # pre commit hooks
        "https://cuda-maintainers.cachix.org" # cuda maintainers
        "https://sanatanalinux.cachix.org" # sanatana linux
      ];
      extra-trusted-public-keys = [
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        "fortuneteller2k.cachix.org-1:kXXNkMV5yheEQwT0I4XYh1MaCSz+qg72k8XAi2PthJI="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "nixpkgs-unfree.cachix.org-1:hqvoInulhbV4nJ9yJOEr+4wxhDV4xq2d1DK7S6Nj6rs="
        "pre-commit-hooks.cachix.org-1:Pkk3Panw5AW24TOv6kz3PvLhlH8puAsJTBbOPmBo7Rc="
        "cuda-maintainers.cachix.org-1:0dq3bujKpuEPMCX6U4WylrUDZ9JyUG0VpVZa7CNfq5E="
        "sanatanalinux.cachix.org-1:9WsJYECJ+Lt0HPTUI7+6f9uAaAUouaBUyTd9iAJbUEY="
      ];
      # ┣━━━━━━━━━━━━━━━━━━━━━━━┫ Dinosaur Laptop ┣━━━━━━━━━━━━━━━━━━━━━━━┫

      # TODO this whole config needs to be updated to effectively interface with changes to repo
      # TODO rename Chamunda and write appropiate README honoring the mother like bagalamukhi and Matangi
      # macbook-air = nixpkgs.lib.nixosSystem {
      #   specialArgs = {inherit inputs outputs self;};
      #   modules = [
      #     nur.modules.nixos.default
      #
      #     nixos-hardware.nixosModules.apple-macbook-air-6
      #     ./hosts/macbook-air
      #     bhairava-grub-theme.nixosModule
      #     home-manager.nixosModules.home-manager
      #     chaotic.nixosModules.default
      #     {
      #       home-manager = {
      #         useUserPackages = true;
      #         backupFileExtension = "bak";
      #         users.tlh = {imports = [./home/tlh/default.nix];};
      #       };
      #     }
      #   ];
      # };
      #
      # ┣━━━━━━━━━━━━━━━━━━━━━━┫ My Lenovo Legion Pro ┣━━━━━━━━━━━━━━━━━━━━━━┫

      bagalamukhi = nixpkgs.lib.nixosSystem {
        specialArgs = {inherit inputs outputs;};
        modules = [
          nur.modules.nixos.default
          nixos-hardware.nixosModules.lenovo-legion-16irx9h
          ./hosts/bagalamukhi
          bhairava-grub-theme.nixosModule
          chaotic.nixosModules.default
          home-manager.nixosModules.home-manager
          {
            home-manager = {
              useUserPackages = true;
              backupFileExtension = "bak";
              users = {
                tlh = {imports = [./home/tlh/default.nix];};
              };
            };
          }
        ];
      };
      # ┣━━━━━━━━━━━━━━━━━━┫ Sara's Lenovo Legion Pro ┣━━━━━━━━━━━━━━━━┫
      matangi = nixpkgs.lib.nixosSystem {
        specialArgs = {inherit inputs outputs;};
        modules = [
          nur.modules.nixos.default
          nixos-hardware.nixosModules.lenovo-legion-16irx9h
          ./hosts/matangi
          bhairava-grub-theme.nixosModule
          chaotic.nixosModules.default
          home-manager.nixosModules.home-manager
          {
            home-manager = {
              useUserPackages = true;
              backupFileExtension = "bak";
              users = {
                smg = {imports = [./home/smg/default.nix];};
              };
            };
          }
        ];
      };
    };
    # ┣━━━━━━━━━━━━━━━━━━━━━┫ Home Configurations ┣━━━━━━━━━━━━━━━━━━━━━┫
    homeConfigurations = {
      tlh = inputs.home-manager.lib.homeManagerConfiguration {
        extraSpecialArgs = {inherit inputs outputs self;};
        modules = [
          ./home/tlh/default.nix
        ];
      };
      smg = inputs.home-manager.lib.homeManagerConfiguration {
        extraSpecialArgs = {inherit inputs outputs self;};
        modules = [
          ./home/smg/default.nix
        ];
      };
    };
    # ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫

    matangi = self.nixosConfigurations.matangi.config.system.build.toplevel;
    bagalamukhi = self.nixosConfigurations.bagalamukhi.config.system.build.toplevel;
  };
}

```````

`/etc/nixos/home/tlh/default.nix`:

```````nix
{
  pkgs,
  config,
  inputs,
  outputs,
  ...
}: {
  imports = [
    ../shared/X
    ./theme.nix
    ../shared/pkgs
    ../shared/programs/yazi/default.nix
    ../shared/programs/nemo/default.nix
    ../shared/programs/aichat.nix
    ../shared/programs/ghostty.nix
    ../shared/programs/joshuto.nix
    ../shared/programs/firefox.nix
    ../shared/programs/gpg/default.nix
    ../shared/programs/zathura/default.nix
    ../shared/programs/kitty/default.nix
    ../shared/programs/neovim/default.nix
    ../shared/programs/ranger/default.nix
    ../shared/programs/zathura/default.nix
    ../shared/services/default.nix
    ../shared/services/picom.nix
    ../shared/shell
  ];

  systemd.user.startServices = "sd-switch";

  # we have tealdeer & internet for this. Rendered in more readable formats
  manual = {
    html.enable = false;
    json.enable = false;
    manpages.enable = false;
  };

  nixpkgs = {
    overlays = [
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.unstable-packages
      outputs.overlays.f2k-packages
      outputs.overlays.chaotic-packages
      inputs.nixpkgs-f2k.overlays.default
      inputs.nur.overlays.default
      #  inputs.neovim-nightly-overlay.overlays.default
    ];

    config = {
      allowUnfree = true;
      allowUnfreePredicate = _: true;
      allowUnsupportedSystem = true;
      allowBroken = true;
    };
  };

  services.gnome-keyring.enable = true;
  programs.home-manager.enable = true;

  home = {
    username = "tlh";
    homeDirectory = "/home/tlh";
    stateVersion = "24.11";
  };
  # Installation of AwesomeWM configuration if not present
  home.activation.installAwesomeWMConfig = ''
    if [ ! -d /home/tlh/.config/awesome ]; then
      git clone https://github.com/Sanatana-Linux/nixos-awesomewm /home/tlh/.config/awesome
      chmod -R +w /home/tlh/.config/awesome
      chown -R tlh /home/tlh/.config/awesome
      mkdir -p /home/tlh/.cache/awesome/json/
      touch  /home/tlh/.cache/awesome/json/settings.json
    fi
  '';

  # Installation of Neovim configuration if not present
  home.activation.installNvimConfig = ''
    if [ ! -d /home/tlh/.config/nvim ]; then
      git clone https://github.com/Thomashighbaugh/nvim-forge /home/tlh/.config/nvim
      chmod -R +w "/home/tlh/.config/nvim"
      chown -R tlh /home/tlh/.config/nvim
    fi
  '';
}

```````

`/etc/nixos/home/tlh/theme.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  # GTK Configuration
  gtk = {
    enable = true;

    # Font settings for GTK
    font = {
      name = "SFProText Nerd Font,  Bold  ";
      size = 10;
    };

    # GTK theme configuration
    theme = {
      name = "Materia-dark-compact";
      package = pkgs.materia-theme-transparent;
    };

    # GTK icon theme configuration
    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    # GTK cursor theme configuration
    cursorTheme = {
      name = "Phinger Cursors (light)";
      package = pkgs.phinger-cursors;
      size = 48;
    };

    # GTK2 specific configurations
    gtk2 = {
      extraConfig = ''
        gtk-toolbar-style=GTK_TOOLBAR_BOTH_HORIZ
        gtk-toolbar-icon-size=GTK_ICON_SIZE_LARGE_TOOLBAR
        gtk-button-images=1
        gtk-menu-images=1
        gtk-enable-event-sounds=1
        gtk-enable-input-feedback-sounds=1
        gtk-xft-antialias=1
        gtk-xft-hinting=1
        gtk-xft-hintstyle="hintslight"
        gtk-xft-rgba="rgba"
      '';
    };

    # GTK3 specific configurations
    gtk3.extraConfig = {
      gtk-application-prefer-dark-theme = true;
      gtk-decoration-layout = "menu:";
      gtk-button-images = "1";
      gtk-menu-images = "1";
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgba";
    };

    # GTK4 specific configurations
    gtk4.extraConfig = {
      # gtk-application-prefer-dark-theme = true;
      gtk-decoration-layout = "menu:";
    };
  };

  # QT Configuration
  qt = {
    enable = true;

    # Set GTK3 as the platform theme for QT
    platformTheme.name = "gtk3";
  };

  # ─────────────────────────────────────────────────────────────────

  # Home configuration
  home = {
    # Environment variables for session
    sessionVariables = {
      GTK_THEME = "Materia-dark-compact";
      QT_QPA_PLATFORMTHEME = "gtk3";
      GDK_PIXBUF_MODULE_FILE = "${pkgs.librsvg.out}/lib/gdk-pixbuf-2.0/*/loaders.cache";
      XDG_DATA_DIRS = "${pkgs.materia-theme-transparent}/share:$XDG_DATA_DIRS";
    };

    # Pointer cursor configuration
    pointerCursor = {
      package = pkgs.phinger-cursors;
      name = "Phinger Cursors (light)";
      size = 48;
      gtk.enable = true;
    };

    # File configuration for icon theme
    file = {
      ".icons/default".source = "${pkgs.phinger-cursors}/share/icons/phinger-cursors-light";
    };
  };

  fonts.fontconfig = {
    enable = true;
  };
}

```````

`/etc/nixos/home/smg/desktop.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  # GTK Configuration
  gtk = {
    enable = true;

    # Font settings for GTK
    font = {
      name = "Agave Nerd Font,  Bold  ";
      size = 10;
    };

    # GTK theme configuration
    theme = {
      name = "Orchis-Dark";
      package = pkgs.orchis-theme;
    };

    # GTK icon theme configuration
    iconTheme = {
      name = "Cosmic";
      package = pkgs.cosmic-icons;
    };

    # GTK cursor theme configuration
    cursorTheme = {
      name = "Cosmic";
      package = pkgs.cosmic-icons;
      size = 24;
    };

    # GTK2 specific configurations
    gtk2 = {
      extraConfig = ''
        gtk-toolbar-style=GTK_TOOLBAR_BOTH_HORIZ
        gtk-toolbar-icon-size=GTK_ICON_SIZE_LARGE_TOOLBAR
        gtk-button-images=1
        gtk-menu-images=1
        gtk-enable-event-sounds=1
        gtk-enable-input-feedback-sounds=1
        gtk-xft-antialias=1
        gtk-xft-hinting=1
        gtk-xft-hintstyle="hintslight"
        gtk-xft-rgba="rgba"
      '';
    };

    # GTK3 specific configurations
    gtk3.extraConfig = {
      gtk-application-prefer-dark-theme = true;
      gtk-decoration-layout = "menu:";
      gtk-button-images = "1";
      gtk-menu-images = "1";
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgba";
    };

    # GTK4 specific configurations
    gtk4.extraConfig = {
      # gtk-application-prefer-dark-theme = true;
      gtk-decoration-layout = "menu:";
    };
  };

  # QT Configuration
  qt = {
    enable = true;

    # Set GTK3 as the platform theme for QT
    platformTheme.name = "gtk3";
  };

  # ─────────────────────────────────────────────────────────────────

  # Home configuration
  home = {
    # Environment variables for session
    sessionVariables = {
      GTK_THEME = "Orchis-Grey-Dark-Compact";
      QT_QPA_PLATFORMTHEME = "gtk3";
    };

    # Pointer cursor configuration
    pointerCursor = {
      package = pkgs.cosmic-icons;
      name = "Cosmic";
      size = 24;
      gtk.enable = true;
    };

    # File configuration for icon theme
    #    file = {
    #      ".icons/default".source = "${pkgs.cosmic-icons}/share/icons/cosmic-icons";
    #    };
  };

  fonts.fontconfig = {
    enable = true;
  };
}

```````

`/etc/nixos/home/smg/default.nix`:

```````nix
{
  pkgs,
  config,
  inputs,
  outputs,
  ...
}: {
  imports = [
    ../shared/X
    ./desktop.nix
    ../shared/pkgs
    ../shared/programs/aichat.nix
    ../shared/programs/ghostty.nix
    #    ../shared/programs/firefox.nix
    ../shared/programs/kitty/default.nix
    ../shared/services/default.nix
    # ../shared/services/picom.nix
    ../shared/shell
  ];

  systemd.user.startServices = "sd-switch";

  # we have tealdeer & internet for this. Rendered in more readable formats
  manual = {
    html.enable = false;
    json.enable = false;
    manpages.enable = false;
  };

  nixpkgs = {
    overlays = [
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.unstable-packages
      outputs.overlays.f2k-packages
      outputs.overlays.chaotic-packages
      inputs.nixpkgs-f2k.overlays.default
      inputs.nur.overlays.default
    ];

    config = {
      allowUnfree = true;
      allowUnfreePredicate = _: true;
      allowUnsupportedSystem = true;
      allowBroken = true;
    };
  };

  programs.home-manager.enable = true;
  services.picom.enable = true;
  # GTK Configuration

  home = {
    username = "smg";
    homeDirectory = "/home/smg";
    stateVersion = "24.11";
  };
}

```````

`/etc/nixos/home/shared/X/default.nix`:

```````nix
{
  xresources.extraConfig = ''

        Xft.dpi: 96
    ! Now featuring Monokai Pro Spectrum
        *background: #222222
        *foreground:   #f9f9f9

        ! black
        *color0: #363537
        *color8: #525053

        ! red
        *color1: #fc618d
        *color9: #f92672

        ! green
        *color2:  #7bd88f
        *color10: #a6e22e

        ! yellow
        *color3:  #fce566
        *color11: #e6db74

        ! blue
        *color4: #5ad4e6
        *color12:#46A0AE

        ! magenta
        *color5:  #948ae3
        *color13: #ae81ff

        ! misc/cyan
        *color6:  #5affe6
        *color14: #00D4BE

        ! white
        *color7:  #bab6bf
        *color15: #f7f1ff
  '';
}

```````

`/etc/nixos/home/shared/shell/xdg.nix`:

```````nix
{
  lib,
  config,
  pkgs,
  ...
}:
with lib; let
  browser = ["firefox.desktop"];
  fileRoller = ["file-roller.desktop"]; # Define file-roller application
  zathura = ["org.pwmt.zathura.desktop"]; # Define zathura application
  vlc = ["vlc.desktop"]; # VLC application
  imv = ["imv-dir.desktop"];
  inkview = ["inkview.desktop"];

  associations = {
    "application/x-extension-htm" = browser;
    "application/x-extension-html" = browser;
    "application/x-extension-shtml" = browser;
    "application/x-extension-xht" = browser;
    "application/x-extension-xhtml" = browser;
    "application/xhtml+xml" = browser;
    "text/html" = browser;
    "x-scheme-handler/about" = browser;
    "x-scheme-handler/chrome" = ["google-chrome.desktop"];
    "x-scheme-handler/ftp" = browser;
    "x-scheme-handler/http" = browser;
    "x-scheme-handler/https" = browser;
    "x-scheme-handler/unknown" = browser;

    "audio/*" = vlc;
    "video/*" = vlc;
    "image/*" = imv;
    "image/svg+xml" = inkview;

    "application/json" = browser;

    "x-scheme-handler/discord" = ["discord.desktop"];
    "x-scheme-handler/spotify" = ["spotify.desktop"];
    "x-scheme-handler/tg" = ["telegramdesktop.desktop"];

    # Archive Files
    "application/x-7z-compressed" = fileRoller;
    "application/x-ar" = fileRoller;
    "application/x-bzip" = fileRoller;
    "application/x-bzip2" = fileRoller;
    "application/gzip" = fileRoller;
    "application/x-lzip" = fileRoller;
    "application/x-lzma" = fileRoller;
    "application/x-lzma-compressed-tar" = fileRoller;
    "application/x-rar" = fileRoller;
    "application/x-rar-compressed" = fileRoller;
    "application/x-tar" = fileRoller;
    "application/x-tarz" = fileRoller;
    "application/x-xz" = fileRoller;
    "application/zip" = fileRoller;
    "application/x-zip-compressed" = fileRoller;

    # Ebook formats
    "application/epub+zip" = zathura;
    "application/x-cbz" = zathura; # Comic book archive
    "application/pdf" = zathura;
    "application/x-cbr" = zathura; # Comic book archive
    "application/x-pdf" = zathura; # Although you already have a PDF rule, using zathura here is consistent.
    "application/djvu" = zathura;
    "application/fb2" = zathura;
    "application/mobipocket-ebook" = zathura; # .mobi
  };
in {
  home.packages = [pkgs.xdg-utils pkgs.xdg-desktop-portal-gtk pkgs.xdg-desktop-portal];

  xdg = {
    enable = true;
    userDirs = {
      enable = true;
      createDirectories = true;
    };

    portal = {
      enable = true;
      config.common.default = "*";
      extraPortals = with pkgs; [
        xdg-desktop-portal-gtk
      ];
    };

    mimeApps = {
      enable = true;
      associations.added = associations;
      defaultApplications = associations;
    };
  };
}

```````

`/etc/nixos/home/shared/shell/default.nix`:

```````nix
{
  pkgs,
  lib,
  config,
  ...
}: {
  imports = [
    ./xdg.nix
    ./starship.nix
    ./cli.nix
    ./nix.nix
    ./bin/default.nix
    ./zsh.nix
  ];

  home = {
    sessionPath = [
      "${config.home.homeDirectory}/.local/bin"
      "${config.home.homeDirectory}/.local/share/gem/ruby/3.1.0/bin"
      "${config.home.homeDirectory}/.local/share/flatpak/exports/share"
      "${config.home.homeDirectory}/Workspace/go/bin"
      "$GOBIN"
      "${config.home.homeDirectory}/.cargo/bin"
      "${config.home.homeDirectory}/.yarn/bin"
      "${config.home.homeDirectory}/.local/share/flatpak/exports/share"
      "/run/user/1000/fnm_multishells/87711_1736929409043/bin"
    ];

    sessionVariables = {
      GOPATH = "${config.home.homeDirectory}/Workspace/go";
      GOBIN = "${config.home.homeDirectory}/Workspace/go/bin";
      SHELL = "${pkgs.zsh}/bin/zsh";
      FNM_MULTISHELL_PATH = "/run/user/1000/fnm_multishells/87711_1736929409043";
      FNM_VERSION_FILE_STRATEGY = "local";
      FNM_DIR = "/home/tlh/.local/share/fnm";
      FNM_LOGLEVEL = "info";
      FNM_NODE_DIST_MIRROR = "https://nodejs.org/dist";
      FNM_COREPACK_ENABLED = "true";
      FNM_RESOLVE_ENGINES = "true";
      FNM_ARCH = "x64";
    };
  };
}

```````

`/etc/nixos/home/shared/shell/cli.nix`:

```````nix
{
  config,
  pkgs,
  ...
}: {
  home.packages = with pkgs; [
    bc
    btop
    catimg
    bat
    moar
    curl
    direnv
    du-dust
    duf
    editorconfig-core-c
    eza
    fd
    fnm
    fzf-obc
    fzf
    findutils
    file
    imv
    jq
    killall
    lm_sensors
    lz4
    mpc_cli
    mpg123
    neofetch
    pciutils
    perl
    procs
    psmisc
    p7zip
    ranger
    ripgrep
    rsync
    sd
    trash-cli
    tree
    unrar
    unzip
    util-linux
    wget
    xarchiver
    zip
    yt-dlp
    zsh
    zplug
    zsh-autosuggestions
  ];

  programs = {
    eza = {
      enable = true;
      colors = "always";
      icons = "always";
      git = true;
      enableZshIntegration = true;
    };
    gpg.enable = true;
    man.enable = true;
    ssh.enable = true;

    fzf = {
      enable = true;
      enableBashIntegration = true;
      enableZshIntegration = true;
    };
    pyenv = {
      enable = true;
      enableZshIntegration = true;
    };
    rbenv = {
      enable = true;
      enableZshIntegration = true;
    };
    carapace = {
      enable = true;
      enableZshIntegration = true;
    };
    zoxide = {
      enable = true;
      enableZshIntegration = true;
      options = [
        "--cmd cd"
      ];
    };

    dircolors = {
      enable = true;
      enableZshIntegration = true;
    };
    keychain = {
      enable = true;
      enableZshIntegration = true;
    };
  };
}

```````

`/etc/nixos/home/shared/shell/bin/updoot.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "updoot" ''
    [ -f "$1" ] && op="cat"
    ''${op:-echo} "''${@:-$(cat -)}" \
        | curl -sF file='@-' 'http://0x0.st' \
        | tee /dev/stderr \
        | tr -d '\n'      \
        | xclip -sel clip

  ''

```````

`/etc/nixos/home/shared/shell/bin/notes.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "notes" ''
    #!/usr/bin/env bash
    NOTES_DIR="./.notes"

    # Create the .notes directory if it doesn't exist
    mkdir -p "$NOTES_DIR"

    # Function to create a new note or open an existing note
    create_or_open_note() {
        echo -n "Enter the title of the note: "
        read title

        # Remove spaces from the title to form the filename
        filename=$(echo "$title" | tr -d '[:space:]').md

        # Check if the note already exists
        if [ -e "$NOTES_DIR/$filename" ]; then
            echo -e "Note with the same title already exists. Opening the note..."
            "$EDITOR" "$NOTES_DIR/$filename"
        else
            # Create the note file
            echo "# $title" > "$NOTES_DIR/$filename"
            echo -e "Note '%s' created successfully!" "$title"
            "$EDITOR" "$NOTES_DIR/$filename"
        fi
    }

    # Function to list all existing notes
    list_notes() {
        printf "List of existing notes:\n"
        for note in "$NOTES_DIR"/*.md; do
            echo -e "- $(basename "$note" .md)"
        done
    }

    # Function to view a specific notehome/tlh/shared/shell/bin/notes.nix
    view_note() {
        echo -n "Enter the title of the note you want to view: "
        read title

        # Remove spaces from the title to find the filename
        filename=$(echo "$title" | tr -d '[:space:]').md

        # Check if the note exists
        if [ -e "$NOTES_DIR/$filename" ]; then
            "$EDITOR" "$NOTES_DIR/$filename"
        else
            echo "Note '%s' not found." "$title"
            exit 1
        fi
    }

    # Function to delete a note
    delete_note() {
        echo -n "Enter the title of the note you want to delete: "
        read title

        # Remove spaces from the title to find the filename
        filename=$(echo "$title" | tr -d '[:space:]').md

        # Check if the note exists
        if [ -e "$NOTES_DIR/$filename" ]; then
            rm "$NOTES_DIR/$filename"
            echo -e "Note '%s' deleted successfully!" "$title"
        else
            echo "Note '%s' not found." "$title"
            exit 1
        fi
    }

    # Main menu
    echo "     Local Markdown Notes Manager"
    echo "+---------------------------------------+"

    while true; do
        echo   "Select an option:"
        echo   "1. Create or Open a note"
        echo   "2. List all existing notes"
        echo   "3. View a specific note"
        echo   "4. Delete a note"
        echo   "5. Exit"

        read choice

        case $choice in
        1)
            create_or_open_note
            ;;
        2)
            list_notes
            ;;
        3)
            view_note
            ;;
        4)
            delete_note
            ;;
        5)
            printf "Exiting. Have a great day!\n"
            exit 0
            ;;
        *)
            printf "Invalid choice. Please try again.\n"
            ;;
        esac

        printf "\n"
    done

  ''

```````

`/etc/nixos/home/shared/shell/bin/panes.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "panes" ''
    #!/usr/bin/env bash
     f=3 b=4
     for j in f b; do
       for i in {0..7}; do
         printf -v $j$i %b "\e[''${!j}''${i}m"
       done
     done
     d=$'\e[1m'
     t=$'\e[0m'
     v=$'\e[7m'
     cat << EOF
      $f0████$d▄$t  $f1████$d▄$t  $f2████$d▄$t  $f3████$d▄$t  $f4████$d▄$t  $f5████$d▄$t  $f6████$d▄$t  $f7████$d▄$t
      $f0████$d█$t  $f1████$d█$t  $f2████$d█$t  $f3████$d█$t  $f4████$d█$t  $f5████$d█$t  $f6████$d█$t  $f7████$d█$t
      $f0████$d█$t  $f1████$d█$t  $f2████$d█$t  $f3████$d█$t  $f4████$d█$t  $f5████$d█$t  $f6████$d█$t  $f7████$d█$t
      $d$f0 ▀▀▀▀  $d$f1 ▀▀▀▀   $f2▀▀▀▀   $f3▀▀▀▀   $f4▀▀▀▀   $f5▀▀▀▀   $f6▀▀▀▀   $f7▀▀▀▀$t
     EOF
  ''

```````

`/etc/nixos/home/shared/shell/bin/shrooms.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "shrooms" ''
     #!/usr/bin/env bash
    #made by toru
    #irc.unixhub.net
    bkf=$'\e[30m';   rf=$'\e[31m';    gf=$'\e[32m'
    yf=$'\e[33m'   bf=$'\e[34m';   mf=$'\e[35m'
    cf=$'\e[36m';    wf=$'\e[37m'

    bkb=$'\e[40m';   rb=$'\e[41m';    gb=$'\e[42m'
    yb=$'\e[43m'   bb=$'\e[44m';   mb=$'\e[45m'
    cb=$'\e[46m';    wb=$'\e[47m'; rst=$'\e[0m'

    ibkf=$'\e[90m';   irf=$'\e[91m';    igf=$'\e[92m'
    iyf=$'\e[93m'   ibf=$'\e[94m';   imf=$'\e[95m'
    icf=$'\e[96m';    iwf=$'\e[97m'

    ibkb=$'\e[100m';   irb=$'\e[101m';    igb=$'\e[102m'
    iyb=$'\e[103m'   ibb=$'\e[104m';   imb=$'\e[105m'
    icb=$'\e[106m';    iwb=$'\e[107m';
    #over all length of mushrooms = 64

    # width of terminal
    width=$(tput cols)

    for ((v=0; v < ($width-64)/3; v++))
    do
        spaces="$spaces "
    done

    cat << EOF
    $ibkf   ▄▄█$wb▀$rb▀▀$wb▀█$rst$ibkf▄$rst$break$spaces    $ibkf   ▄▄█$wb▀$igb▀▀$wb▀█$rst$ibkf▄$rst$break$spaces    $ibkf   ▄▄█$wb▀$yb▀▀$wb▀█$rst$ibkf▄$rst$break$spaces    $ibkf   ▄▄█$wb▀$bb▀▀$wb▀█$rst$ibkf▄$rst
    $ibkf ▄█$rb▀$wf██▀$rf██$wf$rb▀██$ibkf▀█$rst$ibkf▄$rst$break$spaces $ibkf ▄█$igb▀$wf██▀$igf██$wf$igb▀██$ibkf▀█$rst$ibkf▄$rst$break$spaces $ibkf ▄█$yb▀$wf██▀$yf██$wf$yb▀██$ibkf▀█$rst$ibkf▄$rst$break$spaces $ibkf ▄█$bb▀$wf██▀$bf██$wf$bb▀██$ibkf▀█$rst$ibkf▄$rst
    $ibkf▄█$wf█$rb▄$rf██$wb▀▀▀▀██▀$wf█$rst$ibkf█▄$rst$break$spaces$ibkf▄█$wf█$igb▄$igf██$wb▀▀▀▀██▀$wf█$rst$ibkf█▄$rst$break$spaces$ibkf▄█$wf█$yb▄$yf██$wb▀▀▀▀██▀$wf█$rst$ibkf█▄$rst$break$spaces$ibkf▄█$wf█$bb▄$bf██$wb▀▀▀▀██▀$wf█$rst$ibkf█▄$rst
    $ibkf█$wf███$rf█$wf██████$rf█$wf███$ibkf█$rst$break$spaces$ibkf█$wf███$igf█$wf██████$igf█$wf███$ibkf█$rst$break$spaces$ibkf█$wf███$yf█$wf██████$yf█$wf███$ibkf█$rst$break$spaces$ibkf█$wf███$bf█$wf██████$bf█$wf███$ibkf█$rst
    $ibkf█$rf$wb▄▄██▄$wf████$rf$wb▄██▄▄$ibkf█$rst$break$spaces$ibkf█$igf$wb▄▄██▄$wf████$igf$wb▄██▄▄$ibkf█$rst$break$spaces$ibkf█$yf$wb▄▄██▄$wf████$yf$wb▄██▄▄$ibkf█$rst$break$spaces$ibkf█$bf$wb▄▄██▄$wf████$bf$wb▄██▄▄$ibkf█$rst
    $ibkf█$wb▄▄█▀▀█▀▀█▀▀█▄▄█$rst$break$spaces$ibkf█$wb▄▄█▀▀█▀▀█▀▀█▄▄█$rst$break$spaces$ibkf█$wb▄▄█▀▀█▀▀█▀▀█▄▄█$rst$break$spaces$ibkf█$wb▄▄█▀▀█▀▀█▀▀█▄▄█$rst
    $ibkf ▀█$wf███$ibkb▄██▄███$rst$ibkf█▀$rst$break$spaces $ibkf ▀█$wf███$ibkb▄██▄███$rst$ibkf█▀$rst$break$spaces $ibkf ▀█$wf███$ibkb▄██▄███$rst$ibkf█▀$rst$break$spaces $ibkf ▀█$wf███$ibkb▄██▄███$rst$ibkf█▀$rst
    $ibkf  ▀█$wb▄▄▄▄▄▄▄▄█$rst$ibkf▀$rst$break$spaces  $ibkf  ▀█$wb▄▄▄▄▄▄▄▄█$rst$ibkf▀$rst$break$spaces  $ibkf  ▀█$wb▄▄▄▄▄▄▄▄█$rst$ibkf▀$rst$break$spaces  $ibkf  ▀█$wb▄▄▄▄▄▄▄▄█$rst$ibkf▀$rst$endofline
    $break
    EOF
  ''

```````

`/etc/nixos/home/shared/shell/bin/gita.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "gita" ''
    #!/usr/bin/env bash

    git add .

    git commit -m "$(date +"%Y-%m-%d %H:%M:%S")"

    git push

  ''

```````

`/etc/nixos/home/shared/shell/bin/default.nix`:

```````nix
{
  config,
  pkgs,
  ...
}: let
  extract = import ./extract.nix {inherit pkgs;};
  gita = import ./gita.nix {inherit pkgs;};
  nixfetch = import ./nixfetch.nix {inherit pkgs;};
  notes = import ./notes.nix {inherit pkgs;};
  om = import ./om.nix {inherit pkgs;};
  panes = import ./panes.nix {inherit pkgs;};
  screenlocked = import ./screenlocked.nix {inherit pkgs;};
  shrooms = import ./shrooms.nix {inherit pkgs;};
  updoot = import ./updoot.nix {inherit pkgs;};
  mountbox = import ./mountbox.nix {inherit pkgs;};
in {
  home.packages = with pkgs; [extract om mountbox notes screenlocked run shrooms gita nixfetch updoot panes];
}

```````

`/etc/nixos/home/shared/shell/bin/nixfetch.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "nixfetch" ''
    f=3 b=4
    for j in f b; do
      for i in {0..7}; do
        printf -v $j$i %b "\e[''${!j}''${i}m"
      done
    done
    d=$'\e[1m'
    t=$'\e[0m'
    v=$'\e[7m'
    # OS Release
    os_name=$(cat /etc/os-release | grep -i ID= | grep -v _ | cut -f2 -d '=')
    os_vers=$(cat /etc/os-release | grep -i VERSION_ID= | cut -f2 -d '=' | tr -d '\"')
    os="$os_name $os_vers"
    # Kernel Version
    krn=$(cat /proc/version | awk '{print $3}')
    # X Session
    wm_id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK | awk '{print $5}')
    # Packages
    pkgs=$(nix-store -q --requisites /run/current-system/sw | wc -l)
    cat << EOF
                $f4\\\\  $f6\\\\ //
               $f4==\\\\__$f6\\\\/ $f4//
                 $f6//   \\\\$f4//
              $f6==//     $f4//==
               $f6//$f4\\\\$f6 __$f4//
              $f6// $f4/\\\\  $f6\\\\==
                $f4// \\\\  $f6\\\\
        $f4         os $f7.$t $os
        $f6     kernel $f7.$t $krn
        $f4      de/wm $f7.$t $wm_id
        $f6   packages $f7.$t $pkgs
            $f0 $f1 $f2 $f3 $f4 $f5 $f6 $f7 $t
    EOF
  ''

```````

`/etc/nixos/home/shared/shell/bin/screenlocked.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "screenlocked" ''
        #!/usr/bin/env bash
      # Creates the lock screen, with the necessar
      # commands to set the wallpaper

    ${pkgs.betterlockscreen}/bin/betterlockscreen -l /etc/nixos/hosts/shared/wallpaper/monokaiprospectrum.png
  ''

```````

`/etc/nixos/home/shared/shell/bin/om.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "om" ''
    #!/usr/bin/env bash
    dots="/etc/nixos"

    function help() {
      WHITE_PINK="\e[38;2;232;232;232m"
      SKY_BLUE="\e[38;2;136;192;208m"
      MAGENTA="\e[38;2;154;32;201m"
      ORANGE="\e[38;2;242;161;56m"
      DIRTY="\e[38;2;133;133;133m"
      YELLOW="\e[38;2;219;245;76m"
      RED="\e[38;2;191;97;106m"
      GREEN="\e[38;2;134;239;172m"

      UNDERLINE="\e[4m"
      SPECIAL_END="\e[0m"

      echo -e "$SKY_BLUE Description: $SPECIAL_END"
      echo " This script is a personal wrapper script around various functions"
      echo " used to ease the administration of NixOS systems. Not to be "
      echo " confused with omnix, which is unrelated... and not as useful ;]"
      echo
      echo
      echo -e "$RED USAGE: $SPECIAL_END $DIRTY om $SPECIAL_END [command]"
      echo
      echo -e "$GREEN Available commands: $SPECIAL_END"
      echo
      echo -e "            $SKY_BLUE help $SPECIAL_END               show this text"
      echo -e "            $SKY_BLUE repair $SPECIAL_END             repair the Nix Store"
      echo -e "            $SKY_BLUE clean $SPECIAL_END              clean and garbage collect store"
      echo -e "            $SKY_BLUE rebuild $SPECIAL_END            rebuild configuration for host"
      echo -e "            $SKY_BLUE optimize $SPECIAL_END           clean then optimize the Nix Store"
      echo -e "            $SKY_BLUE weight $SPECIAL_END             determine the size of the system's configuration"
      echo -e "            $SKY_BLUE rollback $SPECIAL_END           rollback to previous generation"
      echo -e "            $SKY_BLUE search $SPECIAL_END             search packages available"
      echo -e "            $SKY_BLUE options $SPECIAL_END            search nixos and home-manager options"
      echo -e "            $SKY_BLUE sync $SPECIAL_END               pull config from git repo, then commit and push"
      echo -e "            $SKY_BLUE update $SPECIAL_END             update flake"
      echo -e "            $SKY_BLUE format $SPECIAL_END             format nix files in configuration"
      echo -e "            $SKY_BLUE vm $SPECIAL_END                 build a vm"
      echo -e "            $SKY_BLUE health $SPECIAL_END             run nix-health check"
    }

    function repair() {
      echo "Repairing the Nix Store Now"
      nix-collect-garbage -d
      nix-store --verify --repair
      nix-store --verify --check-contents --repair
      nix store verify --all
      nix store repair --all
      nix-collect-garbage -d
      echo "Repair Process Finished"
    }

    function format() {
      echo "Formatting NixOS Configuration Files Now"
      find "$dots" -name "*.nix" -print0 | while IFS= read -r -d $'\0' file; do
        alejandra "$file"
      done
    }

    function weight() {
      echo "You Current System Size is:"
      nix path-info -Sh /run/current-system
    }

    function sync() {
      echo "Syncing Nix Configuration Now"
      cd $dots && git add . && git commit && git push && echo "Sync Completed!" || echo "Error With Git, See Output Above" && exit
    }

    function rebuild() {
      echo "Rebuilding Configuration Now"
      rm -rf $HOME/.config/*.bak
      rm -rf $HOME/.config/**/*.bak
      nixos-rebuild switch --flake ".#$2" --impure -v --use-remote-sudo && echo "Done Rebuilding NixOS Configuration"
    }

    function vm() {
      echo "Creating Virtual Machine Now"
      nixos-rebuild --flake $dots#"$2" --impure build-vm
    }

    function optimize() {
      echo "Optimizing the Nix Store Now"
      nix-collect-garbage -d
      nix-store --verify --check-contents --repair
      nix-store --optimize --verbose
    }

    function rollback() {
      echo "Rolling Back Configuration Now"
      nixos-rebuild --rollback switch
    }

    function update() {
      echo "Updating Flake Lock File Now"
      nix flake update
    }

    function clean() {
      echo "Cleaning the Nix Store"
      nix-store --gc
      echo "Removing old generations"
      nix-env --delete-generations old
      echo "Collecting system garbage"
      nix-collect-garbage -d
      nix profile wipe-history
      echo "Collecting user garbage"
      nix-collect-garbage -d
      nix profile wipe-history
      janitor --gc
    }

    function search() {
    nix search --impure nixpkgs "$2" | moar
    }

    function options() {
      manix --source=hm_options,nixos_options,nixpkgs_doc,nixpkgs_tree,nixpkgs_comments "$2" | moar
    }

    function health() {
      echo "Running nix-health check"
      nix-health
    }

    case "$1" in
    sync)
      sync
      ;;
    repair)
      repair
      ;;
    rebuild)
      rebuild "$@"
      ;;
    optimize)
      optimize
      ;;
    format)
      format
      ;;
    vm)
      vm "$@"
      ;;
    rollback)
      rollback
      ;;
    weight)
      weight
      ;;
    update)
      update
      ;;
    clean)
      clean
      ;;
    search)
      search "$@"
      ;;
    options)
      options "$@"
      ;;
    health)
      health
      ;;
    help)
      help
      ;;
    *)
      help
      ;;
    esac
  ''

```````

`/etc/nixos/home/shared/shell/bin/extract.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "extract" ''
    #!/usr/bin/env bash
       if [ -f $1 ] ; then
           case $1 in
               *.tar.bz2)   tar xjf $1   ;;
               *.tar.gz)    tar xzf $1   ;;
               *.bz2)       bunzip2 $1   ;;
               *.rar)       unrar x $1   ;;
               *.gz)        gunzip $1    ;;
               *.tar)       tar xf $1    ;;
               *.tbz2)      tar xjf $1   ;;
               *.tgz)       tar xzf $1   ;;
               *.zip)       unzip $1     ;;
               *.Z)         uncompress $1;;
               *.7z)        7z x $1      ;;
               *)           echo "'$1' cannot be extracted via extract" ;;
           esac
       else
           echo "'$1' is not a valid file"
       fi

  ''

```````

`/etc/nixos/home/shared/shell/bin/mountbox.nix`:

```````nix
{pkgs}:
with pkgs;
  writeScriptBin "mountbox" ''
      #!/usr/bin/env bash
      # Assumes a remote called dropbox is already configured and the
      # user wants to mount it at ~/Dropbox
    rclone mount dropbox:/ ~/Dropbox  --daemon   --allow-non-empty
  ''

```````

`/etc/nixos/home/shared/shell/zsh.nix`:

```````nix
# This module configures the ZSH shell environment.
{
  config,
  lib,
  pkgs,
  ...
}: {
  programs.zsh = {
    enable = true;
    syntaxHighlighting.enable = true;
    enableCompletion = true;
    autocd = true; # Automatically change directory on typing a directory name.
    enableVteIntegration = true; # Integrate with VTE terminals.
    autosuggestion = {
      enable = true;
      highlight = "fg=8,bg=default"; # Set highlight style for autosuggestions.
    };
    defaultKeymap = "viins"; # Use vi insert mode as the default keymap.
    dotDir = ".config/zsh"; # Location for ZSH configuration files.

    # History configuration
    history = {
      append = true;
      extended = true; # Use extended history format.
      ignoreDups = false; # Do not ignore duplicate history entries.
      expireDuplicatesFirst = true; # Expire duplicate entries first.
      ignoreSpace = false; # Do not ignore entries with leading spaces.
      path = "${config.xdg.dataHome}/zsh/history"; # Path to the history file.
      save = 9000000; # Number of history lines to save.
      size = 9900000; # Maximum number of history lines.
      share = true; # Share history between sessions.
    };

    # History substring search
    historySubstringSearch = {
      enable = true;
      searchDownKey = "\e[B"; # Keybinding for searching down in history.
      searchUpKey = "\e[A"; # Keybinding for searching up in history.
    };

    # Completion system initialization
    completionInit = ''
      zmodload -i zsh/zle
      zmodload zsh/complist
      autoload -U compinit; compinit
      _comp_options+=(globdots)
      WORDCHARS="$WORDCHARS//[\/[&.;]"
    '';

    # Create the completion cache directory
    initExtra = ''
                        export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense' # optional
                        zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
                        source <(carapace _carapace)

                        mkdir -p "${config.xdg.cacheHome}/zsh/completion-cache" # Use xdg directory for cache

                        # Completion & Completion Menu Oprions
                        # :completion:<function>:<completer>:<command>:<argument>:<tag>

                        zstyle ':completion:*' completer _complete _ignored _approximate
                        zstyle ':completion:*' complete true
                        zstyle ':completion:*' complete-options true
                        zstyle ':completion:*' file-sort modification
                        zstyle ':completion:*' group-name '''
                        zstyle ':completion:*' keep-prefix true
                        zstyle ':completion:*' list-colors ''${(s.:.)LS_COLORS}
                        zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
                        zstyle ':completion:*' menu select
                        zstyle ':completion:*' verbose true

                        zstyle ':completion:*:default' list-prompt '%S%M matches%s'
                        zstyle ':completion:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
                        zstyle ':completion:*:descriptions' format '%F{blue}-- %D %d --%f'
                        zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
                        zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
                        zstyle ':completion:*:*:-command-:*:*' group-order aliases builtins functions commands

                        zstyle ':completion:*' use-cache on
                        zstyle ':completion:*' cache-path "${config.xdg.cacheHome}/zsh/completion-cache" # Use xdg directory for cache



                  # ┣━━━━━━━━━━━━━━━━━━━━━━━━━┫ Functions ┣━━━━━━━━━━━━━━━━━━━━━━━━━┫

                  # walk tui file management and navigation

                  function lk {
                    cd "$(walk --icons  "$@")"
                  }

            _aichat_zsh() {
                if [[ -n "$BUFFER" ]]; then
                    local _old=$BUFFER
                    BUFFER+="⌛"
                    zle -I && zle redisplay
                    BUFFER=$(aichat -e "$_old")
                    zle end-of-line
                fi
            }
            zle -N _aichat_zsh
            bindkey '\ee' _aichat_zsh

      # Node Version Management
        eval "$(fnm env --shell zsh --use-on-cd --corepack-enabled )" &



    '';

    # ZSH options
    profileExtra = ''
      setopt  APPEND_HISTORY AUTO_LIST AUTO_PARAM_SLASH AUTO_PUSHD COMPLETE_ALIASES CORRECT_ALL \
              EXTENDED_GLOB EXTENDED_HISTORY GLOB_COMPLETE GLOB_STAR_SHORT HIST_FCNTL_LOCK HIST_REDUCE_BLANKS \
              INTERACTIVE_COMMENTS NOCASEGLOB NO_CLOBBER NUMERIC_GLOB_SORT PUSHD_SILENT \
              PUSHD_TO_HOME RCEXPANDPARAM SHARE_HISTORY TRANSIENT_RPROMPT

      unsetopt BEEP FLOW_CONTROL HIST_BEEP


    '';

    # Local ZSH variables
    localVariables = with pkgs; {
      ZSH_AUTOSUGGEST_USE_ASYNC = "true"; # Use asynchronous autosuggestions.
      ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE = 40; # Maximum buffer size for autosuggestions.
      KEYTIMEOUT = 1;
    };

    # Shell aliases, grouped by category

    shellAliases = with pkgs; {
      # Navigation
      "cd.." = "cd ../";
      "cd..." = "cd ../../";
      fcd = "cd $(find -type d | fzf)"; # Fuzzy find a directory and change to it
      mkcd = "mkdir $1 && cd $1 "; # Create a directory and change to it.

      # File Management and Viewing
      l = "eza -l --git --color=auto --group-directories-first --time-style=long-iso --icons -s extension "; # Enhanced ls.
      la = "eza -lah --tree --git --color=auto --group-directories-first --time-style=long-iso --icons -s extension "; # Enhanced ls with all and human readable sizes.
      ll = "eza -alh "; # Another alias for enhanced ls.
      ls = "eza -h --git --icons --color=auto --group-directories-first -s extension"; # Enhanced ls with human readable sizes.
      lx = "eza -alh -s extension --color=auto --group-directories-first --icons -R"; # Another enhanced ls alias.
      tree = "eza --icons --tree";
      cat = "bat --style=plain"; # Use bat for syntax highlighting, plain style for regular "cat" behaviour.
      du = "${lib.getBin du-dust}/bin/du-dust"; # Disk usage analyzer.
      gz = "gzip -l"; # list contents of gzipped files
      rm = "rm -rvf"; # remove files and directories recursively and forcefully
      trm = "${lib.getBin trash-cli}/bin/trash-cli"; # Move files to trash
      firefox = "firefox-nightly";
      less = "moar";

      # System
      cleanup = "sudo nix-collect-garbage --delete-older-than 3d"; # Clean up old Nix store entries.
      purge = "doas sync; echo 3 | doas tee /proc/sys/vm/drop_caches"; # Purge disk caches (requires doas).
      ps = "${lib.getBin procs}/bin/procs"; # Improved process viewer.

      # Searching and File Opening
      grep = "${lib.getBin ripgrep-all}/bin/rga"; # Use ripgrep for fast searching
      fzim = "fzf | xargs nvim"; # Fuzzy find a file and open it with Neovim.
      vim = "nvim";

      # Miscellaneous
      c = "clear";
      nvm = "${lib.getBin fnm}/bin/fnm";
      m = "mkdir -p"; # create directory if not exists
      ytmp3 = ''
        ${lib.getBin yt-dlp}/bin/yt-dlp -x --continue --add-metadata --embed-thumbnail --audio-format mp3 --audio-quality 0 --metadata-from-title="%(artist)s - %(title)s" --prefer-ffmpeg -o "%(title)s.%(ext)s"
      ''; # Download YouTube videos as MP3.
      aider = "aider --model ollama_chat/deepseek-r1:14b";
    };

    zplug = {
      enable = true;
      zplugHome = "${config.xdg.configHome}/zsh/zplug";
      plugins = [
        {name = "hlissner/zsh-autopair";}
        {name = "chisui/zsh-nix-shell";}
        {name = "molovo/tipz";}
        {name = "nix-community/nix-zsh-completions";}
        {name = "ytet5uy4/fzf-widgets";}
      ];
    };
  };
}

```````

`/etc/nixos/home/shared/shell/starship.nix`:

```````nix
{config, ...}: {
  home.sessionVariables.STARSHIP_CACHE = "${config.xdg.cacheHome}/starship";

  programs.starship = {
    enable = true;
    enableZshIntegration = true;
    settings = {
      scan_timeout = 10;

      add_newline = true;
      line_break.disabled = true;

      format = "$directory$git_branch$git_metrics$git_commit$git_state$git_status$all";

      character = {
        success_symbol = "[🕉](green)";
        error_symbol = "[🕉](red)";
        vimcmd_symbol = "[🕉](green)";
      };

      directory = {
        home_symbol = "home";
        style = "cyan";
      };

      git_commit.tag_symbol = " tag ";
      git_branch = {
        style = "purple";
        symbol = "";
      };

      git_metrics = {
        added_style = "bold yellow";
        deleted_style = "bold red";
        disabled = false;
      };

      aws.symbol = "aws ";
      bun.symbol = "bun ";
      c.symbol = "C ";
      cobol.symbol = "cobol ";
      conda.symbol = "conda ";
      crystal.symbol = "cr ";
      cmake.symbol = "cmake ";
      daml.symbol = "daml ";
      dart.symbol = "dart ";
      deno.symbol = "deno ";
      dotnet.symbol = ".NET ";
      directory.read_only = " ro";
      docker_context.symbol = "docker ";
      elixir.symbol = "exs ";
      elm.symbol = "elm ";
      golang.symbol = "go ";
      guix_shell.symbol = "guix ";
      hg_branch.symbol = "hg ";
      java.symbol = "java ";
      julia.symbol = "jl ";
      kotlin.symbol = "kt ";
      lua.symbol = "lua ";
      memory_usage.symbol = "memory ";
      meson.symbol = "meson ";
      nim.symbol = "nim ";
      nix_shell.symbol = "nix ";
      ocaml.symbol = "ml ";
      opa.symbol = "opa ";
      nodejs.symbol = "nodejs ";
      package.symbol = "pkg ";
      perl.symbol = "pl ";
      php.symbol = "php ";
      pulumi.symbol = "pulumi ";
      purescript.symbol = "purs ";
      python.symbol = "py ";
      raku.symbol = "raku ";
      ruby.symbol = "rb ";
      rust.symbol = "rs ";
      scala.symbol = "scala ";
      spack.symbol = "spack ";
      sudo.symbol = "sudo ";
      swift.symbol = "swift ";
      terraform.symbol = "terraform ";
      zig.symbol = "zig ";
    };
  };
}

```````

`/etc/nixos/home/shared/shell/nix.nix`:

```````nix
{pkgs, ...}: {
  home = {
    packages = with pkgs; [
      alejandra
      any-nix-shell
      cached-nix-shell
      deadnix
      nix-index
      statix
      nix-bash-completions
      nix-direnv
      nix-binary-cache
      nix-bundle
      nix-direnv-flakes
      nix-health
      nix-janitor
      nix-plugins
      nix-prefetch
      nix-prefetch-scripts
      nix-search-cli
      nix-template
      nix-zsh-completions
    ];

    sessionVariables = with pkgs; {
      DIRENV_LOG_FORMAT = "";
      LD_LIBRARY_PATH = "${pkgs.stdenv.cc.cc.lib}/lib";
    };
  };

  programs = {
    nix-index = {
      enable = true;
      enableZshIntegration = true;
    };

    direnv = {
      enable = true;
      enableZshIntegration = true;
      enableBashIntegration = true;
      nix-direnv.enable = true;
    };
  };
}

```````

`/etc/nixos/home/shared/desktop/desktop.nix`:

```````nix
{
  pkgs,
  config,
  ...
}: {
  # GTK Configuration
  gtk = {
    enable = true;

    # Font settings for GTK
    font = {
      name = "SFProText Nerd Font,  Bold  ";
      size = 10;
    };

    # GTK theme configuration
    theme = {
      name = "Materia-dark-compact";
      package = pkgs.materia-theme-transparent;
    };

    # GTK icon theme configuration
    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    # GTK cursor theme configuration
    cursorTheme = {
      name = "Phinger Cursors (light)";
      package = pkgs.phinger-cursors;
      size = 48;
    };

    # GTK2 specific configurations
    gtk2 = {
      extraConfig = ''
        gtk-toolbar-style=GTK_TOOLBAR_BOTH_HORIZ
        gtk-toolbar-icon-size=GTK_ICON_SIZE_LARGE_TOOLBAR
        gtk-button-images=1
        gtk-menu-images=1
        gtk-enable-event-sounds=1
        gtk-enable-input-feedback-sounds=1
        gtk-xft-antialias=1
        gtk-xft-hinting=1
        gtk-xft-hintstyle="hintslight"
        gtk-xft-rgba="rgba"
      '';
    };

    # GTK3 specific configurations
    gtk3.extraConfig = {
      gtk-application-prefer-dark-theme = true;
      gtk-decoration-layout = "menu:";
      gtk-button-images = "1";
      gtk-menu-images = "1";
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgba";
    };

    # GTK4 specific configurations
    gtk4.extraConfig = {
      # gtk-application-prefer-dark-theme = true;
      gtk-decoration-layout = "menu:";
    };
  };

  # QT Configuration
  qt = {
    enable = true;

    # Set GTK3 as the platform theme for QT
    platformTheme.name = "gtk3";
  };

  # ─────────────────────────────────────────────────────────────────

  # Home configuration
  home = {
    # Environment variables for session
    sessionVariables = {
      GTK_THEME = "Materia-dark-compact";
      QT_QPA_PLATFORMTHEME = "gtk3";
    };

    # Pointer cursor configuration
    pointerCursor = {
      package = pkgs.phinger-cursors;
      name = "Phinger Cursors (light)";
      size = 48;
      gtk.enable = true;
    };

    # Installation of AwesomeWM configuration if not present
    activation.installAwesomeWMConfig = ''
      if [ ! -d "${config.home.homeDirectory}/.config/awesome" ]; then
        ${pkgs.git}/bin/git clone https://github.com/Sanatana-Linux/nixos-awesomewm "${config.home.homeDirectory}/.config/awesome"
        chmod -R +w "${config.home.homeDirectory}/.config/awesome"
        chown -R tlh "${config.home.homeDirectory}/.config/awesome"
      fi
    '';

    # Installation of Neovim configuration if not present
    activation.installNvimConfig = ''
      if [ ! -d "${config.home.homeDirectory}/.config/nvim" ]; then
        ${pkgs.git}/bin/git clone https://github.com/Thomashighbaugh/nvim-forge "${config.home.homeDirectory}/.config/nvim"
        chmod -R +w "$HOME/.config/nvim"
        chown -R tlh "${config.home.homeDirectory}/.config/nvim"
      fi
    '';

    # File configuration for icon theme
    file = {
      ".icons/default".source = "${pkgs.phinger-cursors}/share/icons/phinger-cursors-light";
    };
  };

  fonts.fontconfig = {
    enable = true;
  };
}

```````

`/etc/nixos/home/shared/programs/ranger/commands_full.py`:

```````py
# -*- coding: utf-8 -*-
# This file is part of ranger, the console file manager.
# This configuration file is licensed under the same terms as ranger.
# ===================================================================
#
# NOTE: If you copied this file to /etc/ranger/commands_full.py or
# ~/.config/ranger/commands_full.py, then it will NOT be loaded by ranger,
# and only serve as a reference.
#
# ===================================================================
# This file contains ranger's commands.
# It's all in python; lines beginning with # are comments.
#
# Note that additional commands are automatically generated from the methods
# of the class ranger.core.actions.Actions.
#
# You can customize commands in the files /etc/ranger/commands.py (system-wide)
# and ~/.config/ranger/commands.py (per user).
# They have the same syntax as this file.  In fact, you can just copy this
# file to ~/.config/ranger/commands_full.py with
# `ranger --copy-config=commands_full' and make your modifications, don't
# forget to rename it to commands.py.  You can also use
# `ranger --copy-config=commands' to copy a short sample commands.py that
# has everything you need to get started.
# But make sure you update your configs when you update ranger.
#
# ===================================================================
# Every class defined here which is a subclass of `Command' will be used as a
# command in ranger.  Several methods are defined to interface with ranger:
#   execute():   called when the command is executed.
#   cancel():    called when closing the console.
#   tab(tabnum): called when <TAB> is pressed.
#   quick():     called after each keypress.
#
# tab() argument tabnum is 1 for <TAB> and -1 for <S-TAB> by default
#
# The return values for tab() can be either:
#   None: There is no tab completion
#   A string: Change the console to this string
#   A list/tuple/generator: cycle through every item in it
#
# The return value for quick() can be:
#   False: Nothing happens
#   True: Execute the command afterwards
#
# The return value for execute() and cancel() doesn't matter.
#
# ===================================================================
# Commands have certain attributes and methods that facilitate parsing of
# the arguments:
#
# self.line: The whole line that was written in the console.
# self.args: A list of all (space-separated) arguments to the command.
# self.quantifier: If this command was mapped to the key "X" and
#      the user pressed 6X, self.quantifier will be 6.
# self.arg(n): The n-th argument, or an empty string if it doesn't exist.
# self.rest(n): The n-th argument plus everything that followed.  For example,
#      if the command was "search foo bar a b c", rest(2) will be "bar a b c"
# self.start(n): Anything before the n-th argument.  For example, if the
#      command was "search foo bar a b c", start(2) will be "search foo"
#
# ===================================================================
# And this is a little reference for common ranger functions and objects:
#
# self.fm: A reference to the "fm" object which contains most information
#      about ranger.
# self.fm.notify(string): Print the given string on the screen.
# self.fm.notify(string, bad=True): Print the given string in RED.
# self.fm.reload_cwd(): Reload the current working directory.
# self.fm.thisdir: The current working directory. (A File object.)
# self.fm.thisfile: The current file. (A File object too.)
# self.fm.thistab.get_selection(): A list of all selected files.
# self.fm.execute_console(string): Execute the string as a ranger command.
# self.fm.open_console(string): Open the console with the given string
#      already typed in for you.
# self.fm.move(direction): Moves the cursor in the given direction, which
#      can be something like down=3, up=5, right=1, left=1, to=6, ...
#
# File objects (for example self.fm.thisfile) have these useful attributes and
# methods:
#
# tfile.path: The path to the file.
# tfile.basename: The base name only.
# tfile.load_content(): Force a loading of the directories content (which
#      obviously works with directories only)
# tfile.is_directory: True/False depending on whether it's a directory.
#
# For advanced commands it is unavoidable to dive a bit into the source code
# of ranger.
# ===================================================================

from __future__ import (absolute_import, division, print_function)

from collections import deque
import os
import re

from ranger.api.commands import Command


class alias(Command):
    """:alias <newcommand> <oldcommand>

    Copies the oldcommand as newcommand.
    """

    context = 'browser'
    resolve_macros = False

    def execute(self):
        if not self.arg(1) or not self.arg(2):
            self.fm.notify('Syntax: alias <newcommand> <oldcommand>', bad=True)
            return

        self.fm.commands.alias(self.arg(1), self.rest(2))


class echo(Command):
    """:echo <text>

    Display the text in the statusbar.
    """

    def execute(self):
        self.fm.notify(self.rest(1))


class cd(Command):
    """:cd [-r] <path>

    The cd command changes the directory.
    If the path is a file, selects that file.
    The command 'cd -' is equivalent to typing ``.
    Using the option "-r" will get you to the real path.
    """

    def execute(self):
        if self.arg(1) == '-r':
            self.shift()
            destination = os.path.realpath(self.rest(1))
            if os.path.isfile(destination):
                self.fm.select_file(destination)
                return
        else:
            destination = self.rest(1)

        if not destination:
            destination = '~'

        if destination == '-':
            self.fm.enter_bookmark('`')
        else:
            self.fm.cd(destination)

    def _tab_args(self):
        # dest must be rest because path could contain spaces
        if self.arg(1) == '-r':
            start = self.start(2)
            dest = self.rest(2)
        else:
            start = self.start(1)
            dest = self.rest(1)

        if dest:
            head, tail = os.path.split(os.path.expanduser(dest))
            if head:
                dest_exp = os.path.join(os.path.normpath(head), tail)
            else:
                dest_exp = tail
        else:
            dest_exp = ''
        return (start, dest_exp, os.path.join(self.fm.thisdir.path, dest_exp),
                dest.endswith(os.path.sep))

    @staticmethod
    def _tab_paths(dest, dest_abs, ends_with_sep):
        if not dest:
            try:
                return next(os.walk(dest_abs))[1], dest_abs
            except (OSError, StopIteration):
                return [], ''

        if ends_with_sep:
            try:
                return [os.path.join(dest, path) for path in next(os.walk(dest_abs))[1]], ''
            except (OSError, StopIteration):
                return [], ''

        return None, None

    def _tab_match(self, path_user, path_file):
        if self.fm.settings.cd_tab_case == 'insensitive':
            path_user = path_user.lower()
            path_file = path_file.lower()
        elif self.fm.settings.cd_tab_case == 'smart' and path_user.islower():
            path_file = path_file.lower()
        return path_file.startswith(path_user)

    def _tab_normal(self, dest, dest_abs):
        dest_dir = os.path.dirname(dest)
        dest_base = os.path.basename(dest)

        try:
            dirnames = next(os.walk(os.path.dirname(dest_abs)))[1]
        except (OSError, StopIteration):
            return [], ''

        return [os.path.join(dest_dir, d) for d in dirnames if self._tab_match(dest_base, d)], ''

    def _tab_fuzzy_match(self, basepath, tokens):
        """ Find directories matching tokens recursively """
        if not tokens:
            tokens = ['']
        paths = [basepath]
        while True:
            token = tokens.pop()
            matches = []
            for path in paths:
                try:
                    directories = next(os.walk(path))[1]
                except (OSError, StopIteration):
                    continue
                matches += [os.path.join(path, d) for d in directories
                            if self._tab_match(token, d)]
            if not tokens or not matches:
                return matches
            paths = matches

        return None

    def _tab_fuzzy(self, dest, dest_abs):
        tokens = []
        basepath = dest_abs
        while True:
            basepath_old = basepath
            basepath, token = os.path.split(basepath)
            if basepath == basepath_old:
                break
            if os.path.isdir(basepath_old) and not token.startswith('.'):
                basepath = basepath_old
                break
            tokens.append(token)

        paths = self._tab_fuzzy_match(basepath, tokens)
        if not os.path.isabs(dest):
            paths_rel = self.fm.thisdir.path
            paths = [os.path.relpath(os.path.join(basepath, path), paths_rel)
                     for path in paths]
        else:
            paths_rel = ''
        return paths, paths_rel

    def tab(self, tabnum):
        from os.path import sep

        start, dest, dest_abs, ends_with_sep = self._tab_args()

        paths, paths_rel = self._tab_paths(dest, dest_abs, ends_with_sep)
        if paths is None:
            if self.fm.settings.cd_tab_fuzzy:
                paths, paths_rel = self._tab_fuzzy(dest, dest_abs)
            else:
                paths, paths_rel = self._tab_normal(dest, dest_abs)

        paths.sort()

        if self.fm.settings.cd_bookmarks:
            paths[0:0] = [
                os.path.relpath(v.path, paths_rel) if paths_rel else v.path
                for v in self.fm.bookmarks.dct.values() for path in paths
                if v.path.startswith(os.path.join(paths_rel, path) + sep)
            ]

        if not paths:
            return None
        if len(paths) == 1:
            return start + paths[0] + sep
        return [start + dirname + sep for dirname in paths]


class chain(Command):
    """:chain <command1>; <command2>; ...

    Calls multiple commands at once, separated by semicolons.
    """
    resolve_macros = False

    def execute(self):
        if not self.rest(1).strip():
            self.fm.notify('Syntax: chain <command1>; <command2>; ...', bad=True)
            return
        for command in [s.strip() for s in self.rest(1).split(";")]:
            self.fm.execute_console(command)


class shell(Command):
    escape_macros_for_shell = True

    def execute(self):
        if self.arg(1) and self.arg(1)[0] == '-':
            flags = self.arg(1)[1:]
            command = self.rest(2)
        else:
            flags = ''
            command = self.rest(1)

        if command:
            self.fm.execute_command(command, flags=flags)

    def tab(self, tabnum):
        from ranger.ext.get_executables import get_executables
        if self.arg(1) and self.arg(1)[0] == '-':
            command = self.rest(2)
        else:
            command = self.rest(1)
        start = self.line[0:len(self.line) - len(command)]

        try:
            position_of_last_space = command.rindex(" ")
        except ValueError:
            return (start + program + ' ' for program
                    in get_executables() if program.startswith(command))
        if position_of_last_space == len(command) - 1:
            selection = self.fm.thistab.get_selection()
            if len(selection) == 1:
                return self.line + selection[0].shell_escaped_basename + ' '
            return self.line + '%s '

        before_word, start_of_word = self.line.rsplit(' ', 1)
        return (before_word + ' ' + file.shell_escaped_basename
                for file in self.fm.thisdir.files or []
                if file.shell_escaped_basename.startswith(start_of_word))


class open_with(Command):

    def execute(self):
        app, flags, mode = self._get_app_flags_mode(self.rest(1))
        self.fm.execute_file(
            files=[f for f in self.fm.thistab.get_selection()],
            app=app,
            flags=flags,
            mode=mode)

    def tab(self, tabnum):
        return self._tab_through_executables()

    def _get_app_flags_mode(self, string):  # pylint: disable=too-many-branches,too-many-statements
        """Extracts the application, flags and mode from a string.

        examples:
        "mplayer f 1" => ("mplayer", "f", 1)
        "atool 4" => ("atool", "", 4)
        "p" => ("", "p", 0)
        "" => None
        """

        app = ''
        flags = ''
        mode = 0
        split = string.split()

        if len(split) == 1:
            part = split[0]
            if self._is_app(part):
                app = part
            elif self._is_flags(part):
                flags = part
            elif self._is_mode(part):
                mode = part

        elif len(split) == 2:
            part0 = split[0]
            part1 = split[1]

            if self._is_app(part0):
                app = part0
                if self._is_flags(part1):
                    flags = part1
                elif self._is_mode(part1):
                    mode = part1
            elif self._is_flags(part0):
                flags = part0
                if self._is_mode(part1):
                    mode = part1
            elif self._is_mode(part0):
                mode = part0
                if self._is_flags(part1):
                    flags = part1

        elif len(split) >= 3:
            part0 = split[0]
            part1 = split[1]
            part2 = split[2]

            if self._is_app(part0):
                app = part0
                if self._is_flags(part1):
                    flags = part1
                    if self._is_mode(part2):
                        mode = part2
                elif self._is_mode(part1):
                    mode = part1
                    if self._is_flags(part2):
                        flags = part2
            elif self._is_flags(part0):
                flags = part0
                if self._is_mode(part1):
                    mode = part1
            elif self._is_mode(part0):
                mode = part0
                if self._is_flags(part1):
                    flags = part1

        return app, flags, int(mode)

    def _is_app(self, arg):
        return not self._is_flags(arg) and not arg.isdigit()

    @staticmethod
    def _is_flags(arg):
        from ranger.core.runner import ALLOWED_FLAGS
        return all(x in ALLOWED_FLAGS for x in arg)

    @staticmethod
    def _is_mode(arg):
        return all(x in '0123456789' for x in arg)


class set_(Command):
    """:set <option name>=<python expression>

    Gives an option a new value.

    Use `:set <option>!` to toggle or cycle it, e.g. `:set flush_input!`
    """
    name = 'set'  # don't override the builtin set class

    def execute(self):
        name = self.arg(1)
        name, value, _, toggle = self.parse_setting_line_v2()
        if toggle:
            self.fm.toggle_option(name)
        else:
            self.fm.set_option_from_string(name, value)

    def tab(self, tabnum):  # pylint: disable=too-many-return-statements
        from ranger.gui.colorscheme import get_all_colorschemes
        name, value, name_done = self.parse_setting_line()
        settings = self.fm.settings
        if not name:
            return sorted(self.firstpart + setting for setting in settings)
        if not value and not name_done:
            return sorted(self.firstpart + setting for setting in settings
                          if setting.startswith(name))
        if not value:
            value_completers = {
                "colorscheme":
                # Cycle through colorschemes when name, but no value is specified
                lambda: sorted(self.firstpart + colorscheme for colorscheme
                               in get_all_colorschemes(self.fm)),

                "column_ratios":
                lambda: self.firstpart + ",".join(map(str, settings[name])),
            }

            def default_value_completer():
                return self.firstpart + str(settings[name])

            return value_completers.get(name, default_value_completer)()
        if bool in settings.types_of(name):
            if 'true'.startswith(value.lower()):
                return self.firstpart + 'True'
            if 'false'.startswith(value.lower()):
                return self.firstpart + 'False'
        # Tab complete colorscheme values if incomplete value is present
        if name == "colorscheme":
            return sorted(self.firstpart + colorscheme for colorscheme
                          in get_all_colorschemes(self.fm) if colorscheme.startswith(value))
        return None


class setlocal(set_):
    """:setlocal path=<regular expression> <option name>=<python expression>

    Gives an option a new value.
    """
    PATH_RE_DQUOTED = re.compile(r'^setlocal\s+path="(.*?)"')
    PATH_RE_SQUOTED = re.compile(r"^setlocal\s+path='(.*?)'")
    PATH_RE_UNQUOTED = re.compile(r'^path=(.*?)$')

    def _re_shift(self, match):
        if not match:
            return None
        path = os.path.expanduser(match.group(1))
        for _ in range(len(path.split())):
            self.shift()
        return path

    def execute(self):
        path = self._re_shift(self.PATH_RE_DQUOTED.match(self.line))
        if path is None:
            path = self._re_shift(self.PATH_RE_SQUOTED.match(self.line))
        if path is None:
            path = self._re_shift(self.PATH_RE_UNQUOTED.match(self.arg(1)))
        if path is None and self.fm.thisdir:
            path = self.fm.thisdir.path
        if not path:
            return

        name, value, _ = self.parse_setting_line()
        self.fm.set_option_from_string(name, value, localpath=path)


class setintag(set_):
    """:setintag <tag or tags> <option name>=<option value>

    Sets an option for directories that are tagged with a specific tag.
    """

    def execute(self):
        tags = self.arg(1)
        self.shift()
        name, value, _ = self.parse_setting_line()
        self.fm.set_option_from_string(name, value, tags=tags)


class default_linemode(Command):

    def execute(self):
        from ranger.container.fsobject import FileSystemObject

        if len(self.args) < 2:
            self.fm.notify(
                "Usage: default_linemode [path=<regexp> | tag=<tag(s)>] <linemode>", bad=True)

        # Extract options like "path=..." or "tag=..." from the command line
        arg1 = self.arg(1)
        method = "always"
        argument = None
        if arg1.startswith("path="):
            method = "path"
            argument = re.compile(arg1[5:])
            self.shift()
        elif arg1.startswith("tag="):
            method = "tag"
            argument = arg1[4:]
            self.shift()

        # Extract and validate the line mode from the command line
        lmode = self.rest(1)
        if lmode not in FileSystemObject.linemode_dict:
            self.fm.notify(
                "Invalid linemode: %s; should be %s" % (
                    lmode, "/".join(FileSystemObject.linemode_dict)),
                bad=True,
            )

        # Add the prepared entry to the fm.default_linemodes
        entry = [method, argument, lmode]
        self.fm.default_linemodes.appendleft(entry)

        # Redraw the columns
        if self.fm.ui.browser:
            for col in self.fm.ui.browser.columns:
                col.need_redraw = True

    def tab(self, tabnum):
        return (self.arg(0) + " " + lmode
                for lmode in self.fm.thisfile.linemode_dict.keys()
                if lmode.startswith(self.arg(1)))


class quit(Command):  # pylint: disable=redefined-builtin
    """:quit

    Closes the current tab, if there's more than one tab.
    Otherwise quits if there are no tasks in progress.
    """
    def _exit_no_work(self):
        if self.fm.loader.has_work():
            self.fm.notify('Not quitting: Tasks in progress: Use `quit!` to force quit')
        else:
            self.fm.exit()

    def execute(self):
        if len(self.fm.tabs) >= 2:
            self.fm.tab_close()
        else:
            self._exit_no_work()


class quit_bang(Command):
    """:quit!

    Closes the current tab, if there's more than one tab.
    Otherwise force quits immediately.
    """
    name = 'quit!'
    allow_abbrev = False

    def execute(self):
        if len(self.fm.tabs) >= 2:
            self.fm.tab_close()
        else:
            self.fm.exit()


class quitall(Command):
    """:quitall

    Quits if there are no tasks in progress.
    """
    def _exit_no_work(self):
        if self.fm.loader.has_work():
            self.fm.notify('Not quitting: Tasks in progress: Use `quitall!` to force quit')
        else:
            self.fm.exit()

    def execute(self):
        self._exit_no_work()


class quitall_bang(Command):
    """:quitall!

    Force quits immediately.
    """
    name = 'quitall!'
    allow_abbrev = False

    def execute(self):
        self.fm.exit()


class terminal(Command):
    """:terminal

    Spawns an "x-terminal-emulator" starting in the current directory.
    """

    def execute(self):
        from ranger.ext.get_executables import get_term
        self.fm.run(get_term(), flags='f')


class delete(Command):
    """:delete

    Tries to delete the selection or the files passed in arguments (if any).
    The arguments use a shell-like escaping.

    "Selection" is defined as all the "marked files" (by default, you
    can mark files with space or v). If there are no marked files,
    use the "current file" (where the cursor is)

    When attempting to delete non-empty directories or multiple
    marked files, it will require a confirmation.
    """

    allow_abbrev = False
    escape_macros_for_shell = True

    def execute(self):
        import shlex
        from functools import partial

        def is_directory_with_files(path):
            return os.path.isdir(path) and not os.path.islink(path) and len(os.listdir(path)) > 0

        if self.rest(1):
            files = shlex.split(self.rest(1))
            many_files = (len(files) > 1 or is_directory_with_files(files[0]))
        else:
            cwd = self.fm.thisdir
            tfile = self.fm.thisfile
            if not cwd or not tfile:
                self.fm.notify("Error: no file selected for deletion!", bad=True)
                return

            # relative_path used for a user-friendly output in the confirmation.
            files = [f.relative_path for f in self.fm.thistab.get_selection()]
            many_files = (cwd.marked_items or is_directory_with_files(tfile.path))

        confirm = self.fm.settings.confirm_on_delete
        if confirm != 'never' and (confirm != 'multiple' or many_files):
            self.fm.ui.console.ask(
                "Confirm deletion of: %s (y/N)" % ', '.join(files),
                partial(self._question_callback, files),
                ('n', 'N', 'y', 'Y'),
            )
        else:
            # no need for a confirmation, just delete
            self.fm.delete(files)

    def tab(self, tabnum):
        return self._tab_directory_content()

    def _question_callback(self, files, answer):
        if answer == 'y' or answer == 'Y':
            self.fm.delete(files)


class trash(Command):
    """:trash

    Tries to move the selection or the files passed in arguments (if any) to
    the trash, using rifle rules with label "trash".
    The arguments use a shell-like escaping.

    "Selection" is defined as all the "marked files" (by default, you
    can mark files with space or v). If there are no marked files,
    use the "current file" (where the cursor is)

    When attempting to trash non-empty directories or multiple
    marked files, it will require a confirmation.
    """

    allow_abbrev = False
    escape_macros_for_shell = True

    def execute(self):
        import shlex
        from functools import partial

        def is_directory_with_files(path):
            return os.path.isdir(path) and not os.path.islink(path) and len(os.listdir(path)) > 0

        if self.rest(1):
            files = shlex.split(self.rest(1))
            many_files = (len(files) > 1 or is_directory_with_files(files[0]))
        else:
            cwd = self.fm.thisdir
            tfile = self.fm.thisfile
            if not cwd or not tfile:
                self.fm.notify("Error: no file selected for deletion!", bad=True)
                return

            # relative_path used for a user-friendly output in the confirmation.
            files = [f.relative_path for f in self.fm.thistab.get_selection()]
            many_files = (cwd.marked_items or is_directory_with_files(tfile.path))

        confirm = self.fm.settings.confirm_on_delete
        if confirm != 'never' and (confirm != 'multiple' or many_files):
            self.fm.ui.console.ask(
                "Confirm deletion of: %s (y/N)" % ', '.join(files),
                partial(self._question_callback, files),
                ('n', 'N', 'y', 'Y'),
            )
        else:
            # no need for a confirmation, just delete
            self.fm.execute_file(files, label='trash')

    def tab(self, tabnum):
        return self._tab_directory_content()

    def _question_callback(self, files, answer):
        if answer == 'y' or answer == 'Y':
            self.fm.execute_file(files, label='trash')


class jump_non(Command):
    """:jump_non [-FLAGS...]

    Jumps to first non-directory if highlighted file is a directory and vice versa.

    Flags:
     -r    Jump in reverse order
     -w    Wrap around if reaching end of filelist
    """
    def __init__(self, *args, **kwargs):
        super(jump_non, self).__init__(*args, **kwargs)

        flags, _ = self.parse_flags()
        self._flag_reverse = 'r' in flags
        self._flag_wrap = 'w' in flags

    @staticmethod
    def _non(fobj, is_directory):
        return fobj.is_directory if not is_directory else not fobj.is_directory

    def execute(self):
        tfile = self.fm.thisfile
        passed = False
        found_before = None
        found_after = None
        for fobj in self.fm.thisdir.files[::-1] if self._flag_reverse else self.fm.thisdir.files:
            if fobj.path == tfile.path:
                passed = True
                continue

            if passed:
                if self._non(fobj, tfile.is_directory):
                    found_after = fobj.path
                    break
            elif not found_before and self._non(fobj, tfile.is_directory):
                found_before = fobj.path

        if found_after:
            self.fm.select_file(found_after)
        elif self._flag_wrap and found_before:
            self.fm.select_file(found_before)


class mark_tag(Command):
    """:mark_tag [<tags>]

    Mark all tags that are tagged with either of the given tags.
    When leaving out the tag argument, all tagged files are marked.
    """
    do_mark = True

    def execute(self):
        cwd = self.fm.thisdir
        tags = self.rest(1).replace(" ", "")
        if not self.fm.tags or not cwd.files:
            return
        for fileobj in cwd.files:
            try:
                tag = self.fm.tags.tags[fileobj.realpath]
            except KeyError:
                continue
            if not tags or tag in tags:
                cwd.mark_item(fileobj, val=self.do_mark)
        self.fm.ui.status.need_redraw = True
        self.fm.ui.need_redraw = True


class console(Command):
    """:console <command>

    Open the console with the given command.
    """

    def execute(self):
        position = None
        if self.arg(1)[0:2] == '-p':
            try:
                position = int(self.arg(1)[2:])
            except ValueError:
                pass
            else:
                self.shift()
        self.fm.open_console(self.rest(1), position=position)


class load_copy_buffer(Command):
    """:load_copy_buffer

    Load the copy buffer from datadir/copy_buffer
    """
    copy_buffer_filename = 'copy_buffer'

    def execute(self):
        import sys
        from ranger.container.file import File
        from os.path import exists
        fname = self.fm.datapath(self.copy_buffer_filename)
        unreadable = IOError if sys.version_info[0] < 3 else OSError
        try:
            fobj = open(fname, 'r')
        except unreadable:
            return self.fm.notify(
                "Cannot open %s" % (fname or self.copy_buffer_filename), bad=True)

        self.fm.copy_buffer = set(File(g)
                                  for g in fobj.read().split("\n") if exists(g))
        fobj.close()
        self.fm.ui.redraw_main_column()
        return None


class save_copy_buffer(Command):
    """:save_copy_buffer

    Save the copy buffer to datadir/copy_buffer
    """
    copy_buffer_filename = 'copy_buffer'

    def execute(self):
        import sys
        fname = None
        fname = self.fm.datapath(self.copy_buffer_filename)
        unwritable = IOError if sys.version_info[0] < 3 else OSError
        try:
            fobj = open(fname, 'w')
        except unwritable:
            return self.fm.notify("Cannot open %s" %
                                  (fname or self.copy_buffer_filename), bad=True)
        fobj.write("\n".join(fobj.path for fobj in self.fm.copy_buffer))
        fobj.close()
        return None


class unmark_tag(mark_tag):
    """:unmark_tag [<tags>]

    Unmark all tags that are tagged with either of the given tags.
    When leaving out the tag argument, all tagged files are unmarked.
    """
    do_mark = False


class mkdir(Command):
    """:mkdir <dirname>

    Creates a directory with the name <dirname>.
    """

    def execute(self):
        from os.path import join, expanduser, lexists
        from os import makedirs

        dirname = join(self.fm.thisdir.path, expanduser(self.rest(1)))
        if not lexists(dirname):
            makedirs(dirname)
        else:
            self.fm.notify("file/directory exists!", bad=True)

    def tab(self, tabnum):
        return self._tab_directory_content()


class touch(Command):
    """:touch <fname>

    Creates a file with the name <fname>.
    """

    def execute(self):
        from os.path import join, expanduser, lexists

        fname = join(self.fm.thisdir.path, expanduser(self.rest(1)))
        if not lexists(fname):
            open(fname, 'a').close()
        else:
            self.fm.notify("file/directory exists!", bad=True)

    def tab(self, tabnum):
        return self._tab_directory_content()


class edit(Command):
    """:edit <filename>

    Opens the specified file in vim
    """

    def execute(self):
        if not self.arg(1):
            self.fm.edit_file(self.fm.thisfile.path)
        else:
            self.fm.edit_file(self.rest(1))

    def tab(self, tabnum):
        return self._tab_directory_content()


class eval_(Command):
    """:eval [-q] <python code>

    Evaluates the python code.
    `fm' is a reference to the FM instance.
    To display text, use the function `p'.

    Examples:
    :eval fm
    :eval len(fm.directories)
    :eval p("Hello World!")
    """
    name = 'eval'
    resolve_macros = False

    def execute(self):
        # The import is needed so eval() can access the ranger module
        import ranger  # NOQA pylint: disable=unused-import,unused-variable
        if self.arg(1) == '-q':
            code = self.rest(2)
            quiet = True
        else:
            code = self.rest(1)
            quiet = False
        global cmd, fm, p, quantifier  # pylint: disable=invalid-name,global-variable-undefined
        fm = self.fm
        cmd = self.fm.execute_console
        p = fm.notify
        quantifier = self.quantifier
        try:
            try:
                result = eval(code)  # pylint: disable=eval-used
            except SyntaxError:
                exec(code)  # pylint: disable=exec-used
            else:
                if result and not quiet:
                    p(result)
        except Exception as err:  # pylint: disable=broad-except
            fm.notify("The error `%s` was caused by evaluating the "
                      "following code: `%s`" % (err, code), bad=True)


class rename(Command):
    """:rename <newname>

    Changes the name of the currently highlighted file to <newname>
    """

    def execute(self):
        from ranger.container.file import File
        from os import access

        new_name = self.rest(1)

        if not new_name:
            return self.fm.notify('Syntax: rename <newname>', bad=True)

        if new_name == self.fm.thisfile.relative_path:
            return None

        if access(new_name, os.F_OK):
            return self.fm.notify("Can't rename: file already exists!", bad=True)

        if self.fm.rename(self.fm.thisfile, new_name):
            file_new = File(new_name)
            self.fm.bookmarks.update_path(self.fm.thisfile.path, file_new)
            self.fm.tags.update_path(self.fm.thisfile.path, file_new.path)
            self.fm.thisdir.pointed_obj = file_new
            self.fm.thisfile = file_new

        return None

    def tab(self, tabnum):
        return self._tab_directory_content()


class rename_append(Command):
    """:rename_append [-FLAGS...]

    Opens the console with ":rename <current file>" with the cursor positioned
    before the file extension.

    Flags:
     -a    Position before all extensions
     -r    Remove everything before extensions
    """
    def __init__(self, *args, **kwargs):
        super(rename_append, self).__init__(*args, **kwargs)

        flags, _ = self.parse_flags()
        self._flag_ext_all = 'a' in flags
        self._flag_remove = 'r' in flags

    def execute(self):
        from ranger import MACRO_DELIMITER, MACRO_DELIMITER_ESC

        tfile = self.fm.thisfile
        relpath = tfile.relative_path.replace(MACRO_DELIMITER, MACRO_DELIMITER_ESC)
        basename = tfile.basename.replace(MACRO_DELIMITER, MACRO_DELIMITER_ESC)

        if basename.find('.') <= 0 or os.path.isdir(relpath):
            self.fm.open_console('rename ' + relpath)
            return

        if self._flag_ext_all:
            pos_ext = re.search(r'[^.]+', basename).end(0)
        else:
            pos_ext = basename.rindex('.')
        pos = len(relpath) - len(basename) + pos_ext

        if self._flag_remove:
            relpath = relpath[:-len(basename)] + basename[pos_ext:]
            pos -= pos_ext

        self.fm.open_console('rename ' + relpath, position=(7 + pos))


class chmod(Command):
    """:chmod <octal number>

    Sets the permissions of the selection to the octal number.

    The octal number is between 0 and 777. The digits specify the
    permissions for the user, the group and others.

    A 1 permits execution, a 2 permits writing, a 4 permits reading.
    Add those numbers to combine them. So a 7 permits everything.
    """

    def execute(self):
        mode_str = self.rest(1)
        if not mode_str:
            if self.quantifier is None:
                self.fm.notify("Syntax: chmod <octal number> "
                               "or specify a quantifier", bad=True)
                return
            mode_str = str(self.quantifier)

        try:
            mode = int(mode_str, 8)
            if mode < 0 or mode > 0o777:
                raise ValueError
        except ValueError:
            self.fm.notify("Need an octal number between 0 and 777!", bad=True)
            return

        for fobj in self.fm.thistab.get_selection():
            try:
                os.chmod(fobj.path, mode)
            except OSError as ex:
                self.fm.notify(ex)

        # reloading directory.  maybe its better to reload the selected
        # files only.
        self.fm.thisdir.content_outdated = True


class bulkrename(Command):
    """:bulkrename

    This command opens a list of selected files in an external editor.
    After you edit and save the file, it will generate a shell script
    which does bulk renaming according to the changes you did in the file.

    This shell script is opened in an editor for you to review.
    After you close it, it will be executed.
    """

    def execute(self):
        # pylint: disable=too-many-locals,too-many-statements,too-many-branches
        import sys
        import tempfile
        from ranger.container.file import File
        from ranger.ext.shell_escape import shell_escape as esc
        py3 = sys.version_info[0] >= 3

        # Create and edit the file list
        filenames = [f.relative_path for f in self.fm.thistab.get_selection()]
        with tempfile.NamedTemporaryFile(delete=False) as listfile:
            listpath = listfile.name
            if py3:
                listfile.write("\n".join(filenames).encode(
                    encoding="utf-8", errors="surrogateescape"))
            else:
                listfile.write("\n".join(filenames))
        self.fm.execute_file([File(listpath)], app='editor')
        with (open(listpath, 'r', encoding="utf-8", errors="surrogateescape") if
              py3 else open(listpath, 'r')) as listfile:
            new_filenames = listfile.read().split("\n")
        os.unlink(listpath)
        if all(a == b for a, b in zip(filenames, new_filenames)):
            self.fm.notify("No renaming to be done!")
            return

        # Generate script
        with tempfile.NamedTemporaryFile() as cmdfile:
            script_lines = []
            script_lines.append("# This file will be executed when you close"
                                " the editor.")
            script_lines.append("# Please double-check everything, clear the"
                                " file to abort.")
            new_dirs = []
            for old, new in zip(filenames, new_filenames):
                if old != new:
                    basepath, _ = os.path.split(new)
                    if (basepath and basepath not in new_dirs
                            and not os.path.isdir(basepath)):
                        script_lines.append("mkdir -vp -- {dir}".format(
                            dir=esc(basepath)))
                        new_dirs.append(basepath)
                    script_lines.append("mv -vi -- {old} {new}".format(
                        old=esc(old), new=esc(new)))
            # Make sure not to forget the ending newline
            script_content = "\n".join(script_lines) + "\n"
            if py3:
                cmdfile.write(script_content.encode(encoding="utf-8",
                                                    errors="surrogateescape"))
            else:
                cmdfile.write(script_content)
            cmdfile.flush()

            # Open the script and let the user review it, then check if the
            # script was modified by the user
            self.fm.execute_file([File(cmdfile.name)], app='editor')
            cmdfile.seek(0)
            script_was_edited = (script_content != cmdfile.read())

            # Do the renaming
            self.fm.run(['/bin/sh', cmdfile.name], flags='w')

        # Retag the files, but only if the script wasn't changed during review,
        # because only then we know which are the source and destination files.
        if not script_was_edited:
            tags_changed = False
            for old, new in zip(filenames, new_filenames):
                if old != new:
                    oldpath = self.fm.thisdir.path + '/' + old
                    newpath = self.fm.thisdir.path + '/' + new
                    if oldpath in self.fm.tags:
                        old_tag = self.fm.tags.tags[oldpath]
                        self.fm.tags.remove(oldpath)
                        self.fm.tags.tags[newpath] = old_tag
                        tags_changed = True
            if tags_changed:
                self.fm.tags.dump()
        else:
            fm.notify("files have not been retagged")


class relink(Command):
    """:relink <newpath>

    Changes the linked path of the currently highlighted symlink to <newpath>
    """

    def execute(self):
        new_path = self.rest(1)
        tfile = self.fm.thisfile

        if not new_path:
            return self.fm.notify('Syntax: relink <newpath>', bad=True)

        if not tfile.is_link:
            return self.fm.notify('%s is not a symlink!' % tfile.relative_path, bad=True)

        if new_path == os.readlink(tfile.path):
            return None

        try:
            os.remove(tfile.path)
            os.symlink(new_path, tfile.path)
        except OSError as err:
            self.fm.notify(err)

        self.fm.reset()
        self.fm.thisdir.pointed_obj = tfile
        self.fm.thisfile = tfile

        return None

    def tab(self, tabnum):
        if not self.rest(1):
            return self.line + os.readlink(self.fm.thisfile.path)
        return self._tab_directory_content()


class help_(Command):
    """:help

    Display ranger's manual page.
    """
    name = 'help'

    def execute(self):
        def callback(answer):
            if answer == "q":
                return
            elif answer == "m":
                self.fm.display_help()
            elif answer == "c":
                self.fm.dump_commands()
            elif answer == "k":
                self.fm.dump_keybindings()
            elif answer == "s":
                self.fm.dump_settings()

        self.fm.ui.console.ask(
            "View [m]an page, [k]ey bindings, [c]ommands or [s]ettings? (press q to abort)",
            callback,
            list("mqkcs")
        )


class copymap(Command):
    """:copymap <keys> <newkeys1> [<newkeys2>...]

    Copies a "browser" keybinding from <keys> to <newkeys>
    """
    context = 'browser'

    def execute(self):
        if not self.arg(1) or not self.arg(2):
            return self.fm.notify("Not enough arguments", bad=True)

        for arg in self.args[2:]:
            self.fm.ui.keymaps.copy(self.context, self.arg(1), arg)

        return None


class copypmap(copymap):
    """:copypmap <keys> <newkeys1> [<newkeys2>...]

    Copies a "pager" keybinding from <keys> to <newkeys>
    """
    context = 'pager'


class copycmap(copymap):
    """:copycmap <keys> <newkeys1> [<newkeys2>...]

    Copies a "console" keybinding from <keys> to <newkeys>
    """
    context = 'console'


class copytmap(copymap):
    """:copytmap <keys> <newkeys1> [<newkeys2>...]

    Copies a "taskview" keybinding from <keys> to <newkeys>
    """
    context = 'taskview'


class unmap(Command):
    """:unmap <keys> [<keys2>, ...]

    Remove the given "browser" mappings
    """
    context = 'browser'

    def execute(self):
        for arg in self.args[1:]:
            self.fm.ui.keymaps.unbind(self.context, arg)


class uncmap(unmap):
    """:uncmap <keys> [<keys2>, ...]

    Remove the given "console" mappings
    """
    context = 'console'


class cunmap(uncmap):
    """:cunmap <keys> [<keys2>, ...]

    Remove the given "console" mappings

    DEPRECATED in favor of uncmap.
    """

    def execute(self):
        self.fm.notify("cunmap is deprecated in favor of uncmap!")
        super(cunmap, self).execute()


class unpmap(unmap):
    """:unpmap <keys> [<keys2>, ...]

    Remove the given "pager" mappings
    """
    context = 'pager'


class punmap(unpmap):
    """:punmap <keys> [<keys2>, ...]

    Remove the given "pager" mappings

    DEPRECATED in favor of unpmap.
    """

    def execute(self):
        self.fm.notify("punmap is deprecated in favor of unpmap!")
        super(punmap, self).execute()


class untmap(unmap):
    """:untmap <keys> [<keys2>, ...]

    Remove the given "taskview" mappings
    """
    context = 'taskview'


class tunmap(untmap):
    """:tunmap <keys> [<keys2>, ...]

    Remove the given "taskview" mappings

    DEPRECATED in favor of untmap.
    """

    def execute(self):
        self.fm.notify("tunmap is deprecated in favor of untmap!")
        super(tunmap, self).execute()


class map_(Command):
    """:map <keysequence> <command>

    Maps a command to a keysequence in the "browser" context.

    Example:
    map j move down
    map J move down 10
    """
    name = 'map'
    context = 'browser'
    resolve_macros = False

    def execute(self):
        if not self.arg(1) or not self.arg(2):
            self.fm.notify("Syntax: {0} <keysequence> <command>".format(self.get_name()), bad=True)
            return

        self.fm.ui.keymaps.bind(self.context, self.arg(1), self.rest(2))


class cmap(map_):
    """:cmap <keysequence> <command>

    Maps a command to a keysequence in the "console" context.

    Example:
    cmap <ESC> console_close
    cmap <C-x> console_type test
    """
    context = 'console'


class tmap(map_):
    """:tmap <keysequence> <command>

    Maps a command to a keysequence in the "taskview" context.
    """
    context = 'taskview'


class pmap(map_):
    """:pmap <keysequence> <command>

    Maps a command to a keysequence in the "pager" context.
    """
    context = 'pager'


class scout(Command):
    """:scout [-FLAGS...] <pattern>

    Swiss army knife command for searching, traveling and filtering files.

    Flags:
     -a    Automatically open a file on unambiguous match
     -e    Open the selected file when pressing enter
     -f    Filter files that match the current search pattern
     -g    Interpret pattern as a glob pattern
     -i    Ignore the letter case of the files
     -k    Keep the console open when changing a directory with the command
     -l    Letter skipping; e.g. allow "rdme" to match the file "readme"
     -m    Mark the matching files after pressing enter
     -M    Unmark the matching files after pressing enter
     -p    Permanent filter: hide non-matching files after pressing enter
     -r    Interpret pattern as a regular expression pattern
     -s    Smart case; like -i unless pattern contains upper case letters
     -t    Apply filter and search pattern as you type
     -v    Inverts the match

    Multiple flags can be combined.  For example, ":scout -gpt" would create
    a :filter-like command using globbing.
    """
    # pylint: disable=bad-whitespace
    AUTO_OPEN     = 'a'
    OPEN_ON_ENTER = 'e'
    FILTER        = 'f'
    SM_GLOB       = 'g'
    IGNORE_CASE   = 'i'
    KEEP_OPEN     = 'k'
    SM_LETTERSKIP = 'l'
    MARK          = 'm'
    UNMARK        = 'M'
    PERM_FILTER   = 'p'
    SM_REGEX      = 'r'
    SMART_CASE    = 's'
    AS_YOU_TYPE   = 't'
    INVERT        = 'v'
    # pylint: enable=bad-whitespace

    def __init__(self, *args, **kwargs):
        super(scout, self).__init__(*args, **kwargs)
        self._regex = None
        self.flags, self.pattern = self.parse_flags()

    def execute(self):  # pylint: disable=too-many-branches
        thisdir = self.fm.thisdir
        flags = self.flags
        pattern = self.pattern
        regex = self._build_regex()
        count = self._count(move=True)

        self.fm.thistab.last_search = regex
        self.fm.set_search_method(order="search")

        if (self.MARK in flags or self.UNMARK in flags) and thisdir.files:
            value = flags.find(self.MARK) > flags.find(self.UNMARK)
            if self.FILTER in flags:
                for fobj in thisdir.files:
                    thisdir.mark_item(fobj, value)
            else:
                for fobj in thisdir.files:
                    if regex.search(fobj.relative_path):
                        thisdir.mark_item(fobj, value)

        if self.PERM_FILTER in flags:
            thisdir.filter = regex if pattern else None

        # clean up:
        self.cancel()

        if self.OPEN_ON_ENTER in flags or \
                (self.AUTO_OPEN in flags and count == 1):
            if pattern == '..':
                self.fm.cd(pattern)
            else:
                self.fm.move(right=1)
                if self.quickly_executed:
                    self.fm.block_input(0.5)

        if self.KEEP_OPEN in flags and thisdir != self.fm.thisdir:
            # reopen the console:
            if not pattern:
                self.fm.open_console(self.line)
            else:
                self.fm.open_console(self.line[0:-len(pattern)])

        if self.quickly_executed and thisdir != self.fm.thisdir and pattern != "..":
            self.fm.block_input(0.5)

    def cancel(self):
        self.fm.thisdir.temporary_filter = None
        self.fm.thisdir.refilter()

    def quick(self):
        asyoutype = self.AS_YOU_TYPE in self.flags
        if self.FILTER in self.flags:
            self.fm.thisdir.temporary_filter = self._build_regex()
        if self.PERM_FILTER in self.flags and asyoutype:
            self.fm.thisdir.filter = self._build_regex()
        if self.FILTER in self.flags or self.PERM_FILTER in self.flags:
            self.fm.thisdir.refilter()
        if self._count(move=asyoutype) == 1 and self.AUTO_OPEN in self.flags:
            return True
        return False

    def tab(self, tabnum):
        self._count(move=True, offset=tabnum)

    def _build_regex(self):
        if self._regex is not None:
            return self._regex

        frmat = "%s"
        flags = self.flags
        pattern = self.pattern

        if pattern == ".":
            return re.compile("")

        # Handle carets at start and dollar signs at end separately
        if pattern.startswith('^'):
            pattern = pattern[1:]
            frmat = "^" + frmat
        if pattern.endswith('$'):
            pattern = pattern[:-1]
            frmat += "$"

        # Apply one of the search methods
        if self.SM_REGEX in flags:
            regex = pattern
        elif self.SM_GLOB in flags:
            regex = re.escape(pattern).replace("\\*", ".*").replace("\\?", ".")
        elif self.SM_LETTERSKIP in flags:
            regex = ".*".join(re.escape(c) for c in pattern)
        else:
            regex = re.escape(pattern)

        regex = frmat % regex

        # Invert regular expression if necessary
        if self.INVERT in flags:
            regex = "^(?:(?!%s).)*$" % regex

        # Compile Regular Expression
        # pylint: disable=no-member
        options = re.UNICODE
        if self.IGNORE_CASE in flags or self.SMART_CASE in flags and \
                pattern.islower():
            options |= re.IGNORECASE
        # pylint: enable=no-member
        try:
            self._regex = re.compile(regex, options)
        except re.error:
            self._regex = re.compile("")
        return self._regex

    def _count(self, move=False, offset=0):
        count = 0
        cwd = self.fm.thisdir
        pattern = self.pattern

        if not pattern or not cwd.files:
            return 0
        if pattern == '.':
            return 0
        if pattern == '..':
            return 1

        deq = deque(cwd.files)
        deq.rotate(-cwd.pointer - offset)
        i = offset
        regex = self._build_regex()
        for fsobj in deq:
            if regex.search(fsobj.relative_path):
                count += 1
                if move and count == 1:
                    cwd.move(to=(cwd.pointer + i) % len(cwd.files))
                    self.fm.thisfile = cwd.pointed_obj
            if count > 1:
                return count
            i += 1

        return count == 1


class narrow(Command):
    """
    :narrow

    Show only the files selected right now. If no files are selected,
    disable narrowing.
    """
    def execute(self):
        if self.fm.thisdir.marked_items:
            selection = [f.basename for f in self.fm.thistab.get_selection()]
            self.fm.thisdir.narrow_filter = selection
        else:
            self.fm.thisdir.narrow_filter = None
        self.fm.thisdir.refilter()


class filter_inode_type(Command):
    """
    :filter_inode_type [dfl]

    Displays only the files of specified inode type. Parameters
    can be combined.

        d display directories
        f display files
        l display links
    """

    def execute(self):
        if not self.arg(1):
            self.fm.thisdir.inode_type_filter = ""
        else:
            self.fm.thisdir.inode_type_filter = self.arg(1)
        self.fm.thisdir.refilter()


class filter_stack(Command):
    """
    :filter_stack ...

    Manages the filter stack.

        filter_stack add FILTER_TYPE ARGS...
        filter_stack pop
        filter_stack decompose
        filter_stack rotate [N=1]
        filter_stack clear
        filter_stack show
    """
    def execute(self):
        from ranger.core.filter_stack import SIMPLE_FILTERS, FILTER_COMBINATORS

        subcommand = self.arg(1)

        if subcommand == "add":
            try:
                self.fm.thisdir.filter_stack.append(
                    SIMPLE_FILTERS[self.arg(2)](self.rest(3))
                )
            except KeyError:
                FILTER_COMBINATORS[self.arg(2)](self.fm.thisdir.filter_stack)
        elif subcommand == "pop":
            self.fm.thisdir.filter_stack.pop()
        elif subcommand == "decompose":
            inner_filters = self.fm.thisdir.filter_stack.pop().decompose()
            if inner_filters:
                self.fm.thisdir.filter_stack.extend(inner_filters)
        elif subcommand == "clear":
            self.fm.thisdir.filter_stack = []
        elif subcommand == "rotate":
            rotate_by = int(self.arg(2) or self.quantifier or 1)
            self.fm.thisdir.filter_stack = (
                self.fm.thisdir.filter_stack[-rotate_by:]
                + self.fm.thisdir.filter_stack[:-rotate_by]
            )
        elif subcommand == "show":
            stack = list(map(str, self.fm.thisdir.filter_stack))
            pager = self.fm.ui.open_pager()
            pager.set_source(["Filter stack: "] + stack)
            pager.move(to=100, percentage=True)
            return
        else:
            self.fm.notify(
                "Unknown subcommand: {}".format(subcommand),
                bad=True
            )
            return

        self.fm.thisdir.refilter()


class grep(Command):
    """:grep <string>

    Looks for a string in all marked files or directories
    """

    def execute(self):
        if self.rest(1):
            action = ['grep', '--line-number']
            action.extend(['-e', self.rest(1), '-r'])
            action.extend(f.path for f in self.fm.thistab.get_selection())
            self.fm.execute_command(action, flags='p')


class flat(Command):
    """
    :flat <level>

    Flattens the directory view up to the specified level.

        -1 fully flattened
         0 remove flattened view
    """

    def execute(self):
        try:
            level_str = self.rest(1)
            level = int(level_str)
        except ValueError:
            level = self.quantifier
        if level is None:
            self.fm.notify("Syntax: flat <level>", bad=True)
            return
        if level < -1:
            self.fm.notify("Need an integer number (-1, 0, 1, ...)", bad=True)
        self.fm.thisdir.unload()
        self.fm.thisdir.flat = level
        self.fm.thisdir.load_content()


class reset_previews(Command):
    """:reset_previews

    Reset the file previews.
    """
    def execute(self):
        self.fm.previews = {}
        self.fm.ui.need_redraw = True


# Version control commands
# --------------------------------


class stage(Command):
    """
    :stage

    Stage selected files for the corresponding version control system
    """

    def execute(self):
        from ranger.ext.vcs import VcsError

        if self.fm.thisdir.vcs and self.fm.thisdir.vcs.track:
            filelist = [f.path for f in self.fm.thistab.get_selection()]
            try:
                self.fm.thisdir.vcs.action_add(filelist)
            except VcsError as ex:
                self.fm.notify('Unable to stage files: {0}'.format(ex))
            self.fm.ui.vcsthread.process(self.fm.thisdir)
        else:
            self.fm.notify('Unable to stage files: Not in repository')


class unstage(Command):
    """
    :unstage

    Unstage selected files for the corresponding version control system
    """

    def execute(self):
        from ranger.ext.vcs import VcsError

        if self.fm.thisdir.vcs and self.fm.thisdir.vcs.track:
            filelist = [f.path for f in self.fm.thistab.get_selection()]
            try:
                self.fm.thisdir.vcs.action_reset(filelist)
            except VcsError as ex:
                self.fm.notify('Unable to unstage files: {0}'.format(ex))
            self.fm.ui.vcsthread.process(self.fm.thisdir)
        else:
            self.fm.notify('Unable to unstage files: Not in repository')

# Metadata commands
# --------------------------------


class prompt_metadata(Command):
    """
    :prompt_metadata <key1> [<key2> [<key3> ...]]

    Prompt the user to input metadata for multiple keys in a row.
    """

    _command_name = "meta"
    _console_chain = None

    def execute(self):
        prompt_metadata._console_chain = self.args[1:]
        self._process_command_stack()

    def _process_command_stack(self):
        if prompt_metadata._console_chain:
            key = prompt_metadata._console_chain.pop()
            self._fill_console(key)
        else:
            for col in self.fm.ui.browser.columns:
                col.need_redraw = True

    def _fill_console(self, key):
        metadata = self.fm.metadata.get_metadata(self.fm.thisfile.path)
        if key in metadata and metadata[key]:
            existing_value = metadata[key]
        else:
            existing_value = ""
        text = "%s %s %s" % (self._command_name, key, existing_value)
        self.fm.open_console(text, position=len(text))


class meta(prompt_metadata):
    """
    :meta <key> [<value>]

    Change metadata of a file.  Deletes the key if value is empty.
    """

    def execute(self):
        key = self.arg(1)
        update_dict = dict()
        update_dict[key] = self.rest(2)
        selection = self.fm.thistab.get_selection()
        for fobj in selection:
            self.fm.metadata.set_metadata(fobj.path, update_dict)
        self._process_command_stack()

    def tab(self, tabnum):
        key = self.arg(1)
        metadata = self.fm.metadata.get_metadata(self.fm.thisfile.path)
        if key in metadata and metadata[key]:
            return [" ".join([self.arg(0), self.arg(1), metadata[key]])]
        return [self.arg(0) + " " + k for k in sorted(metadata)
                if k.startswith(self.arg(1))]


class linemode(default_linemode):
    """
    :linemode <mode>

    Change what is displayed as a filename.

    - "mode" may be any of the defined linemodes (see: ranger.core.linemode).
      "normal" is mapped to "filename".
    """

    def execute(self):
        mode = self.arg(1)

        if mode == "normal":
            from ranger.core.linemode import DEFAULT_LINEMODE
            mode = DEFAULT_LINEMODE

        if mode not in self.fm.thisfile.linemode_dict:
            self.fm.notify("Unhandled linemode: `%s'" % mode, bad=True)
            return

        self.fm.thisdir.set_linemode_of_children(mode)

        # Ask the browsercolumns to redraw
        for col in self.fm.ui.browser.columns:
            col.need_redraw = True


class yank(Command):
    """:yank [name|dir|path]

    Copies the file's name (default), directory or path into both the primary X
    selection and the clipboard.
    """

    modes = {
        '': 'basename',
        'name_without_extension': 'basename_without_extension',
        'name': 'basename',
        'dir': 'dirname',
        'path': 'path',
    }

    def execute(self):
        import subprocess

        def clipboards():
            from ranger.ext.get_executables import get_executables
            clipboard_managers = {
                'xclip': [
                    ['xclip'],
                    ['xclip', '-selection', 'clipboard'],
                ],
                'xsel': [
                    ['xsel'],
                    ['xsel', '-b'],
                ],
                'wl-copy': [
                    ['wl-copy'],
                ],
                'pbcopy': [
                    ['pbcopy'],
                ],
            }
            ordered_managers = ['pbcopy', 'wl-copy', 'xclip', 'xsel']
            executables = get_executables()
            for manager in ordered_managers:
                if manager in executables:
                    return clipboard_managers[manager]
            return []

        clipboard_commands = clipboards()

        mode = self.modes[self.arg(1)]
        selection = self.get_selection_attr(mode)

        new_clipboard_contents = "\n".join(selection)
        for command in clipboard_commands:
            process = subprocess.Popen(command, universal_newlines=True,
                                       stdin=subprocess.PIPE)
            process.communicate(input=new_clipboard_contents)

    def get_selection_attr(self, attr):
        return [getattr(item, attr) for item in
                self.fm.thistab.get_selection()]

    def tab(self, tabnum):
        return (
            self.start(1) + mode for mode
            in sorted(self.modes.keys())
            if mode
        )


class paste_ext(Command):
    """
    :paste_ext

    Like paste but tries to rename conflicting files so that the
    file extension stays intact (e.g. file_.ext).
    """

    @staticmethod
    def make_safe_path(dst):
        if not os.path.exists(dst):
            return dst

        dst_name, dst_ext = os.path.splitext(dst)

        if not dst_name.endswith("_"):
            dst_name += "_"
            if not os.path.exists(dst_name + dst_ext):
                return dst_name + dst_ext
        n = 0
        test_dst = dst_name + str(n)
        while os.path.exists(test_dst + dst_ext):
            n += 1
            test_dst = dst_name + str(n)

        return test_dst + dst_ext

    def execute(self):
        return self.fm.paste(make_safe_path=paste_ext.make_safe_path)

```````

`/etc/nixos/home/shared/programs/ranger/default.nix`:

```````nix
{...}: {
  home.file.".config/ranger/commands.py".source = ./commands.py;
  home.file.".config/ranger/commands_full.py".source = ./commands_full.py;
  home.file.".config/ranger/rc.conf".source = ./rc.conf;
  home.file.".config/ranger/rifle.conf".source = ./rifle.conf;
  home.file.".config/ranger/scope.sh".source = ./scope.sh;
  home.file.".config/ranger/plugins/ranger_devicons/__init__.py".source = ./plugins/ranger_devicons/__init__.py;
  home.file.".config/ranger/plugins/ranger_devicons/devicons.py".source = ./plugins/ranger_devicons/devicons.py;
}

```````

`/etc/nixos/home/shared/programs/ranger/plugins/ranger_devicons/devicons.py`:

```````py
#!/usr/bin/python
# coding=UTF-8
# These glyphs, and the mapping of file extensions to glyphs
# has been copied from the vimscript code that is present in
# https://github.com/ryanoasis/vim-devicons

import re
import os


# Get the XDG_USER_DIRS directory names from environment variables
xdgs_dirs = {
    os.path.basename(os.getenv(key).rstrip('/')): icon
    for key, icon in (
        ('XDG_DOCUMENTS_DIR', ''),
        ('XDG_DOWNLOAD_DIR', ''),
        ('XDG_CONFIG_DIR', ''),
        ('XDG_MUSIC_DIR', ''),
        ('XDG_PICTURES_DIR', ''),
        ('XDG_PUBLICSHARE_DIR', ''),
        ('XDG_TEMPLATES_DIR', ''),
        ('XDG_VIDEOS_DIR', ''),
    )
    if os.getenv(key)
}


# all those glyphs will show as weird squares if you don't have the correct patched font
# My advice is to use NerdFonts which can be found here:
# https://github.com/ryanoasis/nerd-fonts
file_node_extensions = {
    '7z'       : '',
    'a'        : '',
    'ai'       : '',
    'apk'      : '',
    'asm'      : '',
    'asp'      : '',
    'aup'      : '',
    'avi'      : '',
    'awk'      : '',
    'bash'     : '',
    'bat'      : '',
    'bmp'      : '',
    'bz2'      : '',
    'c'        : '',
    'c++'      : '',
    'cab'      : '',
    'cbr'      : '',
    'cbz'      : '',
    'cc'       : '',
    'class'    : '',
    'clj'      : '',
    'cljc'     : '',
    'cljs'     : '',
    'cmake'    : '',
    'coffee'   : '',
    'conf'     : '',
    'cp'       : '',
    'cpio'     : '',
    'cpp'      : '',
    'cs'       : '󰌛',
    'csh'      : '',
    'css'      : '',
    'cue'      : '',
    'cvs'      : '',
    'cxx'      : '',
    'd'        : '',
    'dart'     : '',
    'db'       : '',
    'deb'      : '',
    'diff'     : '',
    'dll'      : '',
    'wps'      : '',
    'wpt'      : '',
    'doc'      : '',
    'docx'     : '',
    'docm'     : '',
    'dotx'     : '',
    'dotm'     : '',
    'dump'     : '',
    'edn'      : '',
    'eex'      : '',
    'efi'      : '',
    'ejs'      : '',
    'elf'      : '',
    'elm'      : '',
    'epub'     : '',
    'erl'      : '',
    'ex'       : '',
    'exe'      : '',
    'exs'      : '',
    'f#'       : '',
    'fifo'     : '󰟥',
    'fish'     : '',
    'flac'     : '',
    'flv'      : '',
    'fs'       : '',
    'fsi'      : '',
    'fsscript' : '',
    'fsx'      : '',
    'gem'      : '',
    'gemspec'  : '',
    'gif'      : '',
    'go'       : '',
    'gz'       : '',
    'gzip'     : '',
    'h'        : '',
    'haml'     : '',
    'hbs'      : '',
    'hh'       : '',
    'hpp'      : '',
    'hrl'      : '',
    'hs'       : '',
    'htaccess' : '',
    'htm'      : '',
    'html'     : '',
    'htpasswd' : '',
    'hxx'      : '',
    'ico'      : '',
    'img'      : '',
    'ini'      : '',
    'iso'      : '',
    'jar'      : '',
    'java'     : '',
    'jl'       : '',
    'jpeg'     : '',
    'jpg'      : '',
    'js'       : '',
    'json'     : '',
    'jsx'      : '',
    'key'      : '',
    'ksh'      : '',
    'leex'     : '',
    'less'     : '',
    'lha'      : '',
    'lhs'      : '',
    'log'      : '',
    'lua'      : '',
    'lzh'      : '',
    'lzma'     : '',
    'm4a'      : '',
    'm4v'      : '',
    'markdown' : '',
    'md'       : '',
    'mdx'      : '',
    'mjs'      : '',
    'mkv'      : '',
    'ml'       : 'λ',
    'mli'      : 'λ',
    'mov'      : '',
    'mp3'      : '',
    'mp4'      : '',
    'mpeg'     : '',
    'mpg'      : '',
    'msi'      : '',
    'mustache' : '',
    'nix'      : '',
    'o'        : '',
    'ogg'      : '',
    'part'     : '',
    'pdf'      : '',
    'php'      : '',
    'pl'       : '',
    'pm'       : '',
    'png'      : '',
    'pp'       : '',
    'dps'      : '',
    'dpt'      : '',
    'ppt'      : '',
    'pptx'     : '',
    'pptm'     : '',
    'pot'      : '',
    'potx'     : '',
    'potm'     : '',
    'pps'      : '',
    'ppsx'     : '',
    'ppsm'     : '',
    'ps1'      : '',
    'psb'      : '',
    'psd'      : '',
    'pub'      : '',
    'py'       : '',
    'pyc'      : '',
    'pyd'      : '',
    'pyo'      : '',
    'r'        : '󰟔',
    'rake'     : '',
    'rar'      : '',
    'rb'       : '',
    'rc'       : '',
    'rlib'     : '',
    'rmd'      : '',
    'rom'      : '',
    'rpm'      : '',
    'rproj'    : '󰗆',
    'rs'       : '',
    'rss'      : '',
    'rtf'      : '',
    's'        : '',
    'sass'     : '',
    'scala'    : '',
    'scss'     : '',
    'sh'       : '',
    'slim'     : '',
    'sln'      : '',
    'so'       : '',
    'sql'      : '',
    'styl'     : '',
    'suo'      : '',
    'swift'    : '',
    't'        : '',
    'tar'      : '',
    'tex'      : '󰙩',
    'tgz'      : '',
    'toml'     : '',
    'torrent'  : '',
    'ts'       : '',
    'tsx'      : '',
    'twig'     : '',
    'vim'      : '',
    'vimrc'    : '',
    'vue'      : '󰡄',
    'wav'      : '',
    'webm'     : '',
    'webmanifest' : '',
    'webp'     : '',
    'xbps'     : '',
    'xcplayground' : '',
    'xhtml'    : '',
    'et'       : '󰈛',
    'ett'      : '󰈛',
    'xls'      : '󰈛',
    'xlt'      : '󰈛',
    'xlsx'     : '󰈛',
    'xlsm'     : '󰈛',
    'xlsb'     : '󰈛',
    'xltx'     : '󰈛',
    'xltm'     : '󰈛',
    'xla'      : '󰈛',
    'xlam'     : '󰈛',
    'xml'      : '',
    'xul'      : '',
    'xz'       : '',
    'yaml'     : '',
    'yml'      : '',
    'zip'      : '',
    'zsh'      : '',
}


dir_node_exact_matches = {
# English
    '.git'                             : '',
    'Desktop'                          : '',
    'Documents'                        : '',
    'Downloads'                        : '',
    'Dotfiles'                         : '',
    'Dropbox'                          : '',
    'Music'                            : '',
    'Pictures'                         : '',
    'Public'                           : '',
    'Templates'                        : '',
    'Videos'                           : '',
    'anaconda3'                        : '',
    'go'                               : '',
    'workspace'                        : '',
    'OneDrive'                         : '',
# Spanish
    'Escritorio'                       : '',
    'Documentos'                       : '',
    'Descargas'                        : '',
    'Música'                           : '',
    'Imágenes'                         : '',
    'Público'                          : '',
    'Plantillas'                       : '',
    'Vídeos'                           : '',
# French
    'Bureau'                           : '',
    'Documents'                        : '',
    'Images'                           : '',
    'Musique'                          : '',
    'Publique'                         : '',
    'Téléchargements'                  : '',
    'Vidéos'                           : '',
# Portuguese
    'Documentos'                       : '',
    'Imagens'                          : '',
    'Modelos'                          : '',
    'Música'                           : '',
    'Público'                          : '',
    'Vídeos'                           : '',
    'Área de trabalho'                 : '',
# Italian
    'Documenti'                        : '',
    'Immagini'                         : '',
    'Modelli'                          : '',
    'Musica'                           : '',
    'Pubblici'                         : '',
    'Scaricati'                        : '',
    'Scrivania'                        : '',
    'Video'                            : '',
# German
    'Bilder'                           : '',
    'Dokumente'                        : '',
    'Musik'                            : '',
    'Schreibtisch'                     : '',
    'Vorlagen'                         : '',
    'Öffentlich'                       : '',
# Hungarian
    'Dokumentumok'                     : '',
    'Képek'                            : '',
    'Modelli'                          : '',
    'Zene'                             : '',
    'Letöltések'                       : '',
    'Számítógép'                       : '',
    'Videók'                           : '',
# Chinese(Simple)
    '桌面'                             : '',
    '文档'                             : '',
    '下载'                             : '',
    '音乐'                             : '',
    '图片'                             : '',
    '公共的'                           : '',
    '公共'                           : '',
    '模板'                             : '',
    '视频'                             : '',
# Chinese(Traditional)
    '桌面'                             : '',
    '文檔'                             : '',
    '下載'                             : '',
    '音樂'                             : '',
    '圖片'                             : '',
    '公共的'                           : '',
    '公共'                           : '',
    '模板'                             : '',
    '視頻'                             : '',
}

# Python 2.x-3.4 don't support unpacking syntex `{**dict}`
# XDG_USER_DIRS
dir_node_exact_matches.update(xdgs_dirs)


file_node_exact_matches = {
    '.bash_aliases'                    : '',
    '.bash_history'                    : '',
    '.bash_logout'                     : '',
    '.bash_profile'                    : '',
    '.bashprofile'                     : '',
    '.bashrc'                          : '',
    '.dmrc'                            : '',
    '.DS_Store'                        : '',
    '.fasd'                            : '',
    '.fehbg'                           : '',
    '.gitattributes'                   : '',
    '.gitconfig'                       : '',
    '.gitignore'                       : '',
    '.gitlab-ci.yml'                   : '',
    '.gvimrc'                          : '',
    '.inputrc'                         : '',
    '.jack-settings'                   : '',
    '.mime.types'                      : '',
    '.ncmpcpp'                         : '',
    '.nvidia-settings-rc'              : '',
    '.pam_environment'                 : '',
    '.profile'                         : '',
    '.recently-used'                   : '',
    '.selected_editor'                 : '',
    '.vim'                             : '',
    '.viminfo'                         : '',
    '.vimrc'                           : '',
    '.Xauthority'                      : '',
    '.Xdefaults'                       : '',
    '.xinitrc'                         : '',
    '.xinputrc'                        : '',
    '.Xresources'                      : '',
    '.zshrc'                           : '',
    '_gvimrc'                          : '',
    '_vimrc'                           : '',
    'a.out'                            : '',
    'authorized_keys'                  : '',
    'bspwmrc'                          : '',
    'cmakelists.txt'                   : '',
    'config'                           : '',
    'config.ac'                        : '',
    'config.m4'                        : '',
    'config.mk'                        : '',
    'config.ru'                        : '',
    'configure'                        : '',
    'docker-compose.yml'               : '',
    'dockerfile'                       : '',
    'Dockerfile'                       : '',
    'dropbox'                          : '',
    'exact-match-case-sensitive-1.txt' : 'X1',
    'exact-match-case-sensitive-2'     : 'X2',
    'favicon.ico'                      : '',
    'gemfile'                          : '',
    'gruntfile.coffee'                 : '',
    'gruntfile.js'                     : '',
    'gruntfile.ls'                     : '',
    'gulpfile.coffee'                  : '',
    'gulpfile.js'                      : '',
    'gulpfile.ls'                      : '',
    'ini'                              : '',
    'known_hosts'                      : '',
    'ledger'                           : '',
    'license'                          : '',
    'LICENSE'                          : '',
    'LICENSE.md'                       : '',
    'LICENSE.txt'                      : '',
    'Makefile'                         : '',
    'makefile'                         : '',
    'Makefile.ac'                      : '',
    'Makefile.in'                      : '',
    'mimeapps.list'                    : '',
    'mix.lock'                         : '',
    'node_modules'                     : '',
    'package-lock.json'                : '',
    'package.json'                     : '',
    'playlists'                        : '',
    'procfile'                         : '',
    'Rakefile'                         : '',
    'rakefile'                         : '',
    'react.jsx'                        : '',
    'README'                           : '',
    'README.markdown'                  : '',
    'README.md'                        : '',
    'README.rst'                       : '',
    'README.txt'                       : '',
    'sxhkdrc'                          : '',
    'user-dirs.dirs'                   : '',
    'webpack.config.js'                : '',
}


def devicon(file):
    if file.is_directory:
        return dir_node_exact_matches.get(file.relative_path, '')
    return file_node_exact_matches.get(os.path.basename(file.relative_path),
                                       file_node_extensions.get(file.extension, ''))

```````

`/etc/nixos/home/shared/programs/ranger/plugins/ranger_devicons/__init__.py`:

```````py
import os
import ranger.api
from ranger.core.linemode import LinemodeBase
from .devicons import *

SEPARATOR = os.getenv('RANGER_DEVICONS_SEPARATOR', ' ')

@ranger.api.register_linemode
class DevIconsLinemode(LinemodeBase):
  name = "devicons"

  uses_metadata = False

  def filetitle(self, file, metadata):
    return devicon(file) + SEPARATOR + file.relative_path

```````

`/etc/nixos/home/shared/programs/ranger/commands.py`:

```````py
# This is a sample commands.py.  You can add your own commands here.
#
# Please refer to commands_full.py for all the default commands and a complete
# documentation.  Do NOT add them all here, or you may end up with defunct
# commands when upgrading ranger.

# A simple command for demonstration purposes follows.
# -----------------------------------------------------------------------------

from __future__ import (absolute_import, division, print_function)

# You can import any python module as needed.
import os

# You always need to import ranger.api.commands here to get the Command class:
from ranger.api.commands import Command


# Any class that is a subclass of "Command" will be integrated into ranger as a
# command.  Try typing ":my_edit<ENTER>" in ranger!
class my_edit(Command):
    # The so-called doc-string of the class will be visible in the built-in
    # help that is accessible by typing "?c" inside ranger.
    """:my_edit <filename>

    A sample command for demonstration purposes that opens a file in an editor.
    """

    # The execute method is called when you run this command in ranger.
    def execute(self):
        # self.arg(1) is the first (space-separated) argument to the function.
        # This way you can write ":my_edit somefilename<ENTER>".
        if self.arg(1):
            # self.rest(1) contains self.arg(1) and everything that follows
            target_filename = self.rest(1)
        else:
            # self.fm is a ranger.core.filemanager.FileManager object and gives
            # you access to internals of ranger.
            # self.fm.thisfile is a ranger.container.file.File object and is a
            # reference to the currently selected file.
            target_filename = self.fm.thisfile.path

        # This is a generic function to print text in ranger.
        self.fm.notify("Let's edit the file " + target_filename + "!")

        # Using bad=True in fm.notify allows you to print error messages:
        if not os.path.exists(target_filename):
            self.fm.notify("The given file does not exist!", bad=True)
            return

        # This executes a function from ranger.core.acitons, a module with a
        # variety of subroutines that can help you construct commands.
        # Check out the source, or run "pydoc ranger.core.actions" for a list.
        self.fm.edit_file(target_filename)

    # The tab method is called when you press tab, and should return a list of
    # suggestions that the user will tab through.
    # tabnum is 1 for <TAB> and -1 for <S-TAB> by default
    def tab(self, tabnum):
        # This is a generic tab-completion function that iterates through the
        # content of the current directory.
        return self._tab_directory_content()

```````

`/etc/nixos/home/shared/programs/ranger/rifle.conf`:

```````conf
# vim: ft=cfg
#
# This is the configuration file of "rifle", ranger's file executor/opener.
# Each line consists of conditions and a command.  For each line the conditions
# are checked and if they are met, the respective command is run.
#
# Syntax:
#   <condition1> , <condition2> , ... = command
#
# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files
#
# If you use the special command "ask", rifle will ask you what program to run.
#
# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | A graphical environment is available (darwin, Xorg, or Wayland)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.

#-------------------------------------------
# Websites
#-------------------------------------------
# Rarely installed browsers get higher priority; It is assumed that if you
# install a rare browser, you probably use it.  Firefox/konqueror/w3m on the
# other hand are often only installed as fallback browsers.
ext x?html?, has librewolf, X, flag f = librewolf --private-window -- "$@"

#-------------------------------------------
# Misc
#-------------------------------------------
# Define the "editor" for text files as first action
mime ^text,  label editor = nvim -- "$@"
mime ^text,  label pager  = "$PAGER" -- "$@"
!mime ^text, label editor, ext xml|json|csv|tex|py|pl|rb|js|sh|php = nvim -- "$@"
!mime ^text, label pager,  ext xml|json|csv|tex|py|pl|rb|js|sh|php = "$PAGER" -- "$@"

# Keepassxc
ext kdbx, has keepassxc, X, flag f = keepassxc "$@"

ext 1                         = man "$1"
ext s[wmf]c, has zsnes, X     = zsnes "$1"
ext s[wmf]c, has snes9x-gtk,X = snes9x-gtk "$1"
ext nes, has fceux, X         = fceux "$1"
ext exe                       = wine "$1"
name ^[mM]akefile$            = make

#--------------------------------------------
# Scripts
#-------------------------------------------
ext py  = python -- "$1"
ext pl  = perl -- "$1"
ext rb  = ruby -- "$1"
ext js  = node -- "$1"
ext sh  = sh -- "$1"
ext php = php -- "$1"

#--------------------------------------------
# Audio without X
#-------------------------------------------
mime ^audio|ogg$, terminal, has mpv      = mpv -- "$@"

#--------------------------------------------
# Video/Audio with a GUI
#-------------------------------------------
mime ^video,       has mpv,      X, flag f = mpv -- "$@"
mime ^video,       has mpv,      X, flag f = mpv --fs -- "$@"

#--------------------------------------------
# Video without X
#-------------------------------------------
mime ^video, terminal, !X, has mpv       = mpv -- "$@"

#-------------------------------------------
# Documents
#-------------------------------------------


ext pdf, has evince,   X, flag f = evince -- "$@"


ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm|gnumeric, has libreoffice, X, flag f = libreoffice "$@"

ext djvu, has foliate, X, flag f = foliate -- "$@"

ext epub, has foliate, X, flag f = foliate -- "$@"
ext mobi, has foliate, X, flag f = foliate -- "$@"

ext mscz,                   X, flag f = mscore -- "$@"
ext sc,         label editor = sc-im -- "$@"
ext nix,        label editor = nvim -- "$@"

#-------------------------------------------
# Images
#-------------------------------------------
mime ^image, has gthumb,    X, flag f = gthumb -- "$@"
mime ^image, has gimp,      X, flag f = gimp -- "$@"
ext xcf,                    X, flag f = gimp -- "$@"

#-------------------------------------------
# Archives
#-------------------------------------------

# avoid password prompt by providing empty password
ext 7z, has 7z = 7z -p l "$@" | "$PAGER"
# This requires atool
ext ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,     has atool = atool --list --each -- "$@" | "$PAGER"
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = atool --list --each -- "$@" | "$PAGER"
ext 7z|ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,  has atool = atool --extract --each -- "$@"
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = atool --extract --each -- "$@"

# Listing and extracting archives without atool:
ext tar|gz|bz2|xz, has tar = tar vvtf "$1" | "$PAGER"
ext tar|gz|bz2|xz, has tar = for file in "$@"; do tar vvxf "$file"; done
ext bz2, has bzip2 = for file in "$@"; do bzip2 -dk "$file"; done
ext zip, has unzip = unzip -l "$1" | less
ext zip, has unzip = for file in "$@"; do unzip -d "${file%.*}" "$file"; done
ext ace, has unace = unace l "$1" | less
ext ace, has unace = for file in "$@"; do unace e "$file"; done
ext rar, has unrar = unrar l "$1" | less
ext rar, has unrar = for file in "$@"; do unrar x "$file"; done

#-------------------------------------------
# Fonts
#-------------------------------------------
mime ^font, has fontforge, X, flag f = fontforge "$@"

#-------------------------------------------
# Flag t fallback terminals
#-------------------------------------------
# Rarely installed terminal emulators get higher priority; It is assumed that
# if you install a rare terminal emulator, you probably use it.
# gnome-terminal/konsole/xterm on the other hand are often installed as part of
# a desktop environment or as fallback terminal emulators.
mime ^ranger/x-terminal-emulator, has foot = kitty -e "$@"

#-------------------------------------------
# Misc
#-------------------------------------------
label wallpaper, number 11, mime ^image, has feh, X = feh --bg-scale "$1"
label wallpaper, number 12, mime ^image, has feh, X = feh --bg-tile "$1"
label wallpaper, number 13, mime ^image, has feh, X = feh --bg-center "$1"
label wallpaper, number 14, mime ^image, has feh, X = feh --bg-fill "$1"

#-------------------------------------------
# Generic file openers
#-------------------------------------------
label open, has xdg-open = xdg-open "$@"
label open, has open     = open -- "$@"

# Define the editor for non-text files + pager as last action
              !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php|nix  = nvim -- "$@"
label editor, !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php|nix  = ${VISUAL:-$EDITOR} -- "$@"
label pager,  !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php|nix  = "$PAGER" -- "$@"


######################################################################
# The actions below are left so low down in this file on purpose, so #
# they are never triggered accidentally.                             #
######################################################################

# Execute a file as program/script.
mime application/x-executable = "$1"

# Move the file to trash using trash-cli.
label trash, has trash-put = trash-put -- "$@"
label trash = mkdir -p -- ${XDG_DATA_DIR:-$HOME/.ranger}/ranger-trash; mv -- "$@" ${XDG_DATA_DIR:-$HOME/.ranger}/ranger-trash

```````

`/etc/nixos/home/shared/programs/ranger/rc.conf`:

```````conf
# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create either /etc/ranger/rc.conf
# (system-wide) or ~/.config/ranger/rc.conf (per user) and add your custom
# commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# ===================================================================
# == Options
# ===================================================================

# Which viewmode should be used?  Possible values are:
#     miller: Use miller columns which show multiple levels of the hierarchy
#     multipane: Midnight-commander like multipane view showing all tabs next
#                to each other
set viewmode miller
#set viewmode multipane

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden true

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete always

# Use non-default path for file preview script?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
#set preview_script ~/.config/ranger/scope.sh

# Use the external preview script or display simple plain text or image previews?
# set use_preview_script true
set use_preview_script false

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
set open_all_images true

# Be aware of version control systems and display information.
set vcs_aware true

# State of the four backends git, hg, bzr, svn. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled
set vcs_backend_svn disabled

# Truncate the long commit messages to this length when shown in the statusbar.
set vcs_msg_length 50

# Use one of the supported image preview protocols
set preview_images true

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
#
#   This feature relies on the dimensions of the terminal's font.  By default, a
#   width of 8 and height of 11 are used.  To use other values, set the options
#   iterm2_font_width and iterm2_font_height to the desired values.
#
# * terminology:
#   Previews images in full color in the terminology terminal emulator.
#   Supports a wide variety of formats, even vector graphics like svg.
#
# * urxvt:
#   Preview images in full color using urxvt image backgrounds. This
#   requires using urxvt compiled with pixbuf support.
#
# * urxvt-full:
#   The same as urxvt but utilizing not only the preview pane but the
#   whole terminal window.
#
# * kitty:
#   Preview images in full color using kitty image protocol.
#   Requires python PIL or pillow library.
#   If ranger does not share the local filesystem with kitty
#   the transfer method is changed to encode the whole image;
#   while slower, this allows remote previews,
#   for example during an ssh session.
#   Tmux is unsupported.
#
# * ueberzug:
#   Preview images in full color with the external command "ueberzug".
#   Images are shown by using a child window.
#   Only for users who run X11 in GNU/Linux.
#  set preview_images_method ueberzug
 set preview_images_method kitty

# Delay in seconds before displaying an image with the w3m method.
# Increase it in case of experiencing display corruption.
set w3m_delay 0.02

# Manually adjust the w3mimg offset when using a terminal which needs this
set w3m_offset 0

# Default iTerm2 font size (see: preview_images_method: iterm2)
set iterm2_font_width 8
set iterm2_font_height 11

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis true

# BIDI support - try to properly display file names in RTL languages (Hebrew, Arabic).
# Requires the python-bidi pip package
set bidi_support false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow, solarized
set colorscheme default

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Wrap long lines in plain text previews?
set wrap_plaintext_previews true

# Save the console history on exit?
set save_console_history false

# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# Draw borders around columns? (separators, outline, both, or none)
# Separators are vertical lines between columns.
# Outline draws a box around all the columns.
# Both combines the two.
#set draw_borders both
# set draw_borders none
set draw_borders outline

# Display the directory name in tabs?
set dirname_in_tabs false

# Enable the mouse support?
set mouse_enabled true

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# Display the free disk space in the status bar?
set display_free_space_in_status_bar true

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window? Updates both `WM_NAME` and `WM_ICON_NAME`
set update_title true

# Set the tmux/screen window-name to "ranger"?
set update_tmux_title true

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# Show hostname in titlebar?
set hostname_in_titlebar true

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar false

# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticeable when ranger lags)
set flushinput true

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# Save the "`" bookmark to disk.  This can be used to switch to the last
# directory by typing "``".
set save_backtick_bookmark true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
set show_cursor false

# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)
set xterm_alt_key false

# Whether to include bookmarks in cd command
set cd_bookmarks true

# Changes case sensitivity for the cd command tab completion
set cd_tab_case sensitive

# Use fuzzy tab completion with the "cd" command. For example,
# ":cd /u/lo/b<tab>" expands to ":cd /usr/local/bin".
set cd_tab_fuzzy false

# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
# disable this feature.
set preview_max_size 0

# The key hint lists up to this size have their sublists expanded.
# Otherwise the submaps are replaced with "...".
set hint_collapse_threshold 10

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# Clear all existing filters when leaving a directory
set clear_filters_on_dir_change false

# Disable displaying line numbers in main column.
# Possible values: false, absolute, relative.
set line_numbers false

# When line_numbers=relative show the absolute line number in the
# current line.
set relative_current_zero false

# Start line numbers from 1 instead of 0
set one_indexed false

# Save tabs on exit
set save_tabs_on_exit false

# Enable scroll wrapping - moving down while on the last item will wrap around to
# the top and vice versa.
set wrap_scroll false

# Set the global_inode_type_filter to nothing.  Possible options: d, f and l for
# directories, files and symlinks respectively.
set global_inode_type_filter

# This setting allows to freeze the list of files to save I/O bandwidth.  It
# should be 'false' during start-up, but you can toggle it by pressing F.
set freeze_files false

# Print file sizes in bytes instead of the default human-readable format.
set size_in_bytes false

# Warn at startup if RANGER_LEVEL env var is greater than 0, in other words
# give a warning when you nest ranger in a subshell started by ranger.
# Special value "error" makes the warning more visible.
set nested_ranger_warning true

# ===================================================================
# == Local Options
# ===================================================================
# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

# ===================================================================
# == Command Aliases in the Console
# ===================================================================

alias e     edit
alias q     quit
alias q!    quit!
alias qa    quitall
alias qa!   quitall!
alias qall  quitall
alias qall! quitall!
alias setl  setlocal

alias filter     scout -prts
alias find       scout -aets
alias mark       scout -mr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefklst

# ===================================================================
# == Define keys for the browser
# ===================================================================

# Basic
map     Q quitall
map     q quit
copymap q ZZ ZQ

map R     reload_cwd
map F     set freeze_files!
map <C-r> reset
map <C-l> redraw_window
map <C-c> abort
map <esc> change_mode normal
map ~ set viewmode!

map i display_file
map <A-j> scroll_preview 1
map <A-k> scroll_preview -1
map ? help
map W display_log
map w taskview_open
map S shell $SHELL

map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
map s  console shell%space
map r  chain draw_possible_programs; console open_with%space
map f  console find%space
map cd console cd%space

map <C-p> chain console; eval fm.ui.console.history_move(-1)

# Change the line mode
map Mf linemode filename
map Mi linemode fileinfo
map Mm linemode mtime
map Mh linemode humanreadablemtime
map Mp linemode permissions
map Ms linemode sizemtime
map MH linemode sizehumanreadablemtime
map Mt linemode metatitle

# Tagging / Marking
map t       tag_toggle
map ut      tag_remove
map "<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map v       mark_files all=True toggle=True
map uv      mark_files all=True val=False
map V       toggle_visual_mode
map uV      toggle_visual_mode reverse=True

# For the nostalgics: Midnight Commander bindings
map <F1> help
map <F2> rename_append
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
#map <F8> console trash
map <F10> exit

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       move right=1
#map <DELETE>   console delete
map <INSERT>   console touch%space

# VIM-like
copymap <UP>       k
copymap <DOWN>     j
copymap <LEFT>     h
copymap <RIGHT>    l
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

map J  move down=0.5  pages=True
map K  move up=0.5    pages=True
copymap J <C-D>
copymap K <C-U>

# Jumping around
map H     history_go -1
map L     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse
map {     traverse_backwards
map )     jump_non

map gh cd ~
map ge cd /etc
map gu cd /usr
map gd cd /dev
map gl cd -r .
map gL cd -r %f
map go cd /opt
map gv cd /var
map gm cd /media
map gi eval fm.cd('/run/media/' + os.getenv('USER'))
map gM cd /mnt
map gs cd /srv
map gp cd /tmp
map gr cd /
map gR eval fm.cd(ranger.RANGERDIR)
map g/ cd /
map g? cd /usr/share/doc/ranger

# External Programs
map E  edit
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map yp yank path
map yd yank dir
map yn yank name
map y. yank name_without_extension

# Filesystem Operations
map =  chmod

map cw console rename%space
map a  rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map I  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)

map pp paste
map po paste overwrite=True
map pP paste append=True
map pO paste overwrite=True append=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree
map pd console paste dest=
map p`<any> paste dest=%any_path
map p'<any> paste dest=%any_path

map dD console delete
map dT console trash

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove
map dt cut mode=toggle

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove
map yt copy mode=toggle

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search%space
map n  search_next
map N  search_next forward=False
map ct search_next order=tag
map cs search_next order=size
map ci search_next order=mimetype
map cc search_next order=ctime
map cm search_next order=mtime
map ca search_next order=atime

# Tabs
map <C-n>     tab_new
map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map gt        tab_move 1
map gT        tab_move -1
map gn        tab_new
map gc        tab_close
map uq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9
map <a-r>     tab_shift 1
map <a-l>     tab_shift -1

# Sorting
map or set sort_reverse!
map oz set sort=random
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False
map oe chain set sort=extension; set sort_reverse=False

map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True
map oE chain set sort=extension; set sort_reverse=True

map dc get_cumulative_size

# Settings
map zc    set collapse_preview!
map zd    set sort_directories_first!
map zh    set show_hidden!
map <C-h> set show_hidden!
copymap <C-h> <backspace>
copymap <backspace> <backspace2>
map zI    set flushinput!
map zi    set preview_images!
map zm    set mouse_enabled!
map zp    set preview_files!
map zP    set preview_directories!
map zs    set sort_case_insensitive!
map zu    set autoupdate_cumulative_size!
map zv    set use_preview_script!
map zf    console filter%space
copymap zf zz

# Filter stack
map .d filter_stack add type d
map .f filter_stack add type f
map .l filter_stack add type l
map .m console filter_stack add mime%space
map .n console filter_stack add name%space
map .# console filter_stack add hash%space
map ." filter_stack add duplicate
map .' filter_stack add unique
map .| filter_stack add or
map .& filter_stack add and
map .! filter_stack add not
map .r filter_stack rotate
map .c filter_stack clear
map .* filter_stack decompose
map .p filter_stack pop
map .. filter_stack show

# Bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map um<any> unset_bookmark %any

map m<bg>   draw_bookmarks
copymap m<bg>  um<bg> `<bg> '<bg>

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)
cmap <a-b> eval fm.ui.console.move_word(left=1)
cmap <a-f> eval fm.ui.console.move_word(right=1)

copycmap <a-b> <a-left>
copycmap <a-f> <a-right>

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <ESC>       <C-g>
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

# Basic
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>
default_linemode devicons

```````

`/etc/nixos/home/shared/programs/ranger/scope.sh`:

```````sh
#!/usr/bin/env bash

set -o noclobber -o noglob -o nounset -o pipefail
IFS=$'\n'

## If the option `use_preview_script` is set to `true`,
## then this script will be called and its output will be displayed in ranger.
## ANSI color codes are supported.
## STDIN is disabled, so interactive scripts won't work properly

## This script is considered a configuration file and must be updated manually.
## It will be left untouched if you upgrade ranger.

## Because of some automated testing we do on the script #'s for comments need
## to be doubled up. Code that is commented out, because it's an alternative for
## example, gets only one #.

## Meanings of exit codes:
## code | meaning    | action of ranger
## -----+------------+-------------------------------------------
## 0    | success    | Display stdout as preview
## 1    | no preview | Display no preview at all
## 2    | plain text | Display the plain content of the file
## 3    | fix width  | Don't reload when width changes
## 4    | fix height | Don't reload when height changes
## 5    | fix both   | Don't ever reload
## 6    | image      | Display the image `$IMAGE_CACHE_PATH` points to as an image preview
## 7    | image      | Display the file directly as an image

## Script arguments
FILE_PATH="${1}"         # Full path of the highlighted file
PV_WIDTH="${2}"          # Width of the preview pane (number of fitting characters)
## shellcheck disable=SC2034 # PV_HEIGHT is provided for convenience and unused
PV_HEIGHT="${3}"         # Height of the preview pane (number of fitting characters)
IMAGE_CACHE_PATH="${4}"  # Full path that should be used to cache image preview
PV_IMAGE_ENABLED="${5}"  # 'True' if image previews are enabled, 'False' otherwise.

FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER="$(printf "%s" "${FILE_EXTENSION}" | tr '[:upper:]' '[:lower:]')"

## Settings
HIGHLIGHT_SIZE_MAX=262143  # 256KiB
HIGHLIGHT_TABWIDTH=${HIGHLIGHT_TABWIDTH:-8}
HIGHLIGHT_STYLE=${HIGHLIGHT_STYLE:-pablo}
HIGHLIGHT_OPTIONS="--replace-tabs=${HIGHLIGHT_TABWIDTH} --style=${HIGHLIGHT_STYLE} ${HIGHLIGHT_OPTIONS:-}"
PYGMENTIZE_STYLE=${PYGMENTIZE_STYLE:-autumn}
OPENSCAD_IMGSIZE=${RNGR_OPENSCAD_IMGSIZE:-1000,1000}
OPENSCAD_COLORSCHEME=${RNGR_OPENSCAD_COLORSCHEME:-Tomorrow Night}

handle_extension() {
    case "${FILE_EXTENSION_LOWER}" in
        ## Archive
        a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
        rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
            atool --list -- "${FILE_PATH}" && exit 5
            bsdtar --list --file "${FILE_PATH}" && exit 5
            exit 1;;
        rar)
            ## Avoid password prompt by providing empty password
            unrar lt -p- -- "${FILE_PATH}" && exit 5
            exit 1;;
        7z)
            ## Avoid password prompt by providing empty password
            7z l -p -- "${FILE_PATH}" && exit 5
            exit 1;;

        ## PDF
        pdf)
            ## Preview as text conversion
            pdftotext -l 10 -nopgbrk -q -- "${FILE_PATH}" - | \
              fmt -w "${PV_WIDTH}" && exit 5
            mutool draw -F txt -i -- "${FILE_PATH}" 1-10 | \
              fmt -w "${PV_WIDTH}" && exit 5
            exiftool "${FILE_PATH}" && exit 5
            exit 1;;

        ## BitTorrent
        torrent)
            transmission-show -- "${FILE_PATH}" && exit 5
            exit 1;;

        ## OpenDocument
        odt|ods|odp|sxw)
            ## Preview as text conversion
            odt2txt "${FILE_PATH}" && exit 5
            ## Preview as markdown conversion
            pandoc -s -t markdown -- "${FILE_PATH}" && exit 5
            exit 1;;

        ## XLSX
        xlsx)
            ## Preview as csv conversion
            ## Uses: https://github.com/dilshod/xlsx2csv
            xlsx2csv -- "${FILE_PATH}" && exit 5
            exit 1;;

        ## HTML
        htm|html|xhtml)
            ## Preview as text conversion
            w3m -dump "${FILE_PATH}" && exit 5
            lynx -dump -- "${FILE_PATH}" && exit 5
            elinks -dump "${FILE_PATH}" && exit 5
            pandoc -s -t markdown -- "${FILE_PATH}" && exit 5
            ;;

        ## JSON
        json)
            jq --color-output . "${FILE_PATH}" && exit 5
            python -m json.tool -- "${FILE_PATH}" && exit 5
            ;;

        ## Direct Stream Digital/Transfer (DSDIFF) and wavpack aren't detected
        ## by file(1).
        dff|dsf|wv|wvc)
            mediainfo "${FILE_PATH}" && exit 5
            exiftool "${FILE_PATH}" && exit 5
            ;; # Continue with next handler on failure
    esac
}

handle_image() {
    ## Size of the preview if there are multiple options or it has to be
    ## rendered from vector graphics. If the conversion program allows
    ## specifying only one dimension while keeping the aspect ratio, the width
    ## will be used.
    local DEFAULT_SIZE="1920x1080"

    local mimetype="${1}"
    case "${mimetype}" in
        ## SVG
        # image/svg+xml|image/svg)
        #     convert -- "${FILE_PATH}" "${IMAGE_CACHE_PATH}" && exit 6
        #     exit 1;;

        ## DjVu
        # image/vnd.djvu)
        #     ddjvu -format=tiff -quality=90 -page=1 -size="${DEFAULT_SIZE}" \
        #           - "${IMAGE_CACHE_PATH}" < "${FILE_PATH}" \
        #           && exit 6 || exit 1;;

        ## Image
        image/*)
            local orientation
            orientation="$( identify -format '%[EXIF:Orientation]\n' -- "${FILE_PATH}" )"
            ## If orientation data is present and the image actually
            ## needs rotating ("1" means no rotation)...
            if [[ -n "$orientation" && "$orientation" != 1 ]]; then
                ## ...auto-rotate the image according to the EXIF data.
                convert -- "${FILE_PATH}" -auto-orient "${IMAGE_CACHE_PATH}" && exit 6
            fi

            ## `w3mimgdisplay` will be called for all images (unless overriden
            ## as above), but might fail for unsupported types.
            exit 7;;

        ## Video
        # video/*)
        #     # Thumbnail
        #     ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0 && exit 6
        #     exit 1;;

        ## PDF
        # application/pdf)
        #     pdftoppm -f 1 -l 1 \
        #              -scale-to-x "${DEFAULT_SIZE%x*}" \
        #              -scale-to-y -1 \
        #              -singlefile \
        #              -jpeg -tiffcompression jpeg \
        #              -- "${FILE_PATH}" "${IMAGE_CACHE_PATH%.*}" \
        #         && exit 6 || exit 1;;


        ## ePub, MOBI, FB2 (using Calibre)
        # application/epub+zip|application/x-mobipocket-ebook|\
        # application/x-fictionbook+xml)
        #     # ePub (using https://github.com/marianosimone/epub-thumbnailer)
        #     epub-thumbnailer "${FILE_PATH}" "${IMAGE_CACHE_PATH}" \
        #         "${DEFAULT_SIZE%x*}" && exit 6
        #     ebook-meta --get-cover="${IMAGE_CACHE_PATH}" -- "${FILE_PATH}" \
        #         >/dev/null && exit 6
        #     exit 1;;

        ## Font
        application/font*|application/*opentype)
            preview_png="/tmp/$(basename "${IMAGE_CACHE_PATH%.*}").png"
            if fontimage -o "${preview_png}" \
                         --pixelsize "120" \
                         --fontname \
                         --pixelsize "80" \
                         --text "  ABCDEFGHIJKLMNOPQRSTUVWXYZ  " \
                         --text "  abcdefghijklmnopqrstuvwxyz  " \
                         --text "  0123456789.:,;(*!?') ff fl fi ffi ffl  " \
                         --text "  The quick brown fox jumps over the lazy dog.  " \
                         "${FILE_PATH}";
            then
                convert -- "${preview_png}" "${IMAGE_CACHE_PATH}" \
                    && rm "${preview_png}" \
                    && exit 6
            else
                exit 1
            fi
            ;;

        ## Preview archives using the first image inside.
        ## (Very useful for comic book collections for example.)
        # application/zip|application/x-rar|application/x-7z-compressed|\
        #     application/x-xz|application/x-bzip2|application/x-gzip|application/x-tar)
        #     local fn=""; local fe=""
        #     local zip=""; local rar=""; local tar=""; local bsd=""
        #     case "${mimetype}" in
        #         application/zip) zip=1 ;;
        #         application/x-rar) rar=1 ;;
        #         application/x-7z-compressed) ;;
        #         *) tar=1 ;;
        #     esac
        #     { [ "$tar" ] && fn=$(tar --list --file "${FILE_PATH}"); } || \
        #     { fn=$(bsdtar --list --file "${FILE_PATH}") && bsd=1 && tar=""; } || \
        #     { [ "$rar" ] && fn=$(unrar lb -p- -- "${FILE_PATH}"); } || \
        #     { [ "$zip" ] && fn=$(zipinfo -1 -- "${FILE_PATH}"); } || return
        #
        #     fn=$(echo "$fn" | python -c "import sys; import mimetypes as m; \
        #             [ print(l, end='') for l in sys.stdin if \
        #               (m.guess_type(l[:-1])[0] or '').startswith('image/') ]" |\
        #         sort -V | head -n 1)
        #     [ "$fn" = "" ] && return
        #     [ "$bsd" ] && fn=$(printf '%b' "$fn")
        #
        #     [ "$tar" ] && tar --extract --to-stdout \
        #         --file "${FILE_PATH}" -- "$fn" > "${IMAGE_CACHE_PATH}" && exit 6
        #     fe=$(echo -n "$fn" | sed 's/[][*?\]/\\\0/g')
        #     [ "$bsd" ] && bsdtar --extract --to-stdout \
        #         --file "${FILE_PATH}" -- "$fe" > "${IMAGE_CACHE_PATH}" && exit 6
        #     [ "$bsd" ] || [ "$tar" ] && rm -- "${IMAGE_CACHE_PATH}"
        #     [ "$rar" ] && unrar p -p- -inul -- "${FILE_PATH}" "$fn" > \
        #         "${IMAGE_CACHE_PATH}" && exit 6
        #     [ "$zip" ] && unzip -pP "" -- "${FILE_PATH}" "$fe" > \
        #         "${IMAGE_CACHE_PATH}" && exit 6
        #     [ "$rar" ] || [ "$zip" ] && rm -- "${IMAGE_CACHE_PATH}"
        #     ;;
    esac

    # openscad_image() {
    #     TMPPNG="$(mktemp -t XXXXXX.png)"
    #     openscad --colorscheme="${OPENSCAD_COLORSCHEME}" \
    #         --imgsize="${OPENSCAD_IMGSIZE/x/,}" \
    #         -o "${TMPPNG}" "${1}"
    #     mv "${TMPPNG}" "${IMAGE_CACHE_PATH}"
    # }

    # case "${FILE_EXTENSION_LOWER}" in
    #     ## 3D models
    #     ## OpenSCAD only supports png image output, and ${IMAGE_CACHE_PATH}
    #     ## is hardcoded as jpeg. So we make a tempfile.png and just
    #     ## move/rename it to jpg. This works because image libraries are
    #     ## smart enough to handle it.
    #     csg|scad)
    #         openscad_image "${FILE_PATH}" && exit 6
    #         ;;
    #     3mf|amf|dxf|off|stl)
    #         openscad_image <(echo "import(\"${FILE_PATH}\");") && exit 6
    #         ;;
    # esac
}

handle_mime() {
    local mimetype="${1}"
    case "${mimetype}" in
        ## RTF and DOC
        text/rtf|*msword)
            ## Preview as text conversion
            ## note: catdoc does not always work for .doc files
            ## catdoc: http://www.wagner.pp.ru/~vitus/software/catdoc/
            catdoc -- "${FILE_PATH}" && exit 5
            exit 1;;

        ## DOCX, ePub, FB2 (using markdown)
        ## You might want to remove "|epub" and/or "|fb2" below if you have
        ## uncommented other methods to preview those formats
        *wordprocessingml.document|*/epub+zip|*/x-fictionbook+xml)
            ## Preview as markdown conversion
            pandoc -s -t markdown -- "${FILE_PATH}" && exit 5
            exit 1;;

        ## XLS
        *ms-excel)
            ## Preview as csv conversion
            ## xls2csv comes with catdoc:
            ##   http://www.wagner.pp.ru/~vitus/software/catdoc/
            xls2csv -- "${FILE_PATH}" && exit 5
            exit 1;;

        ## Text
        text/* | */xml)
            ## Syntax highlight
            if [[ "$( stat --printf='%s' -- "${FILE_PATH}" )" -gt "${HIGHLIGHT_SIZE_MAX}" ]]; then
                exit 2
            fi
            if [[ "$( tput colors )" -ge 256 ]]; then
                local pygmentize_format='terminal256'
                local highlight_format='xterm256'
            else
                local pygmentize_format='terminal'
                local highlight_format='ansi'
            fi
            env HIGHLIGHT_OPTIONS="${HIGHLIGHT_OPTIONS}" highlight \
                --out-format="${highlight_format}" \
                --force -- "${FILE_PATH}" && exit 5
            env COLORTERM=8bit bat --color=always --style="plain" \
                -- "${FILE_PATH}" && exit 5
            pygmentize -f "${pygmentize_format}" -O "style=${PYGMENTIZE_STYLE}"\
                -- "${FILE_PATH}" && exit 5
            exit 2;;

        ## DjVu
        image/vnd.djvu)
            ## Preview as text conversion (requires djvulibre)
            djvutxt "${FILE_PATH}" | fmt -w "${PV_WIDTH}" && exit 5
            exiftool "${FILE_PATH}" && exit 5
            exit 1;;

        ## Image
        image/*)
            ## Preview as text conversion
            # img2txt --gamma=0.6 --width="${PV_WIDTH}" -- "${FILE_PATH}" && exit 4
            exiftool "${FILE_PATH}" && exit 5
            exit 1;;

        ## Video and audio
        video/* | audio/*)
            mediainfo "${FILE_PATH}" && exit 5
            exiftool "${FILE_PATH}" && exit 5
            exit 1;;
    esac
}

handle_fallback() {
    echo '----- File Type Classification -----' && file --dereference --brief -- "${FILE_PATH}" && exit 5
    exit 1
}


MIMETYPE="$( file --dereference --brief --mime-type -- "${FILE_PATH}" )"
if [[ "${PV_IMAGE_ENABLED}" == 'True' ]]; then
    handle_image "${MIMETYPE}"
fi
handle_extension
handle_mime "${MIMETYPE}"
handle_fallback

exit 1

```````

`/etc/nixos/home/shared/programs/firefox.nix`:

```````nix
{
  pkgs,
  config,
  inputs,
  ...
}: let
  # Firefox Nightly with https://github.com/MrOtherGuy/fx-autoconfig
  firefox-nightly =
    (
      inputs.firefox-nightly.packages.${pkgs.system}.firefox-nightly-bin.override {
        extraPrefsFiles = [
          (builtins.fetchurl {
            url = "https://raw.githubusercontent.com/MrOtherGuy/fx-autoconfig/master/program/config.js";
            sha256 = "1mx679fbc4d9x4bnqajqx5a95y1lfasvf90pbqkh9sm3ch945p40";
          })
        ];
      }
    )
    .overrideAttrs (oldAttrs: {
      buildCommand =
        (oldAttrs.buildCommand or "")
        + ''
          # Find firefox dir
          firefoxDir=$(find "$out/lib/" -type d -name 'firefox*' -print -quit)

          # Function to replace symlink with destination file
          replaceSymlink() {
            local symlink_path="$firefoxDir/$1"
            local target_path=$(readlink -f "$symlink_path")
            rm "$symlink_path"
            cp "$target_path" "$symlink_path"
          }

          # Copy firefox binaries
          replaceSymlink "firefox"
          replaceSymlink "firefox-bin"
        '';
    });
  profile = "tlh";
in {
  home.sessionVariables = {
    MOZ_USE_XINPUT2 = "1";
    MOZ_DISABLE_RDD_SANDBOX = "1";
  };

  programs.firefox = {
    enable = true;
    package = firefox-nightly;
    profiles.${profile} = {
      id = 0;
      extensions.packages = with pkgs.nur.repos.rycee.firefox-addons; [
        add-custom-search-engine
        auto-tab-discard
        bitwarden
        buster-captcha-solver
        cookie-quick-manager
        copy-selection-as-markdown
        don-t-fuck-with-paste
        export-cookies-txt
        export-tabs-urls-and-titles
        form-history-control
        foxytab
        gaoptout
        github-file-icons
        ipfs-companion
        istilldontcareaboutcookies
        keybase
        lexicon
        link-gopher
        lovely-forks
        raindropio
        re-enable-right-click
        refined-github
        search-engines-helper
        stylebot-web
        ublock-origin
        view-image
      ];

      settings = {
        "accessibility.tabfocus_applies_to_xul" = true;
        "app.normandy.enabled" = false;
        "app.normandy.first_run" = false;
        "app.shield.optoutstudies.enabled" = false;
        "browser.aboutConfig.showWarning" = false;
        "browser.bookmarks.restore_default_bookmarks" = false;
        "browser.compactmode.show" = true;
        "browser.ctrlTab.sortByRecentlyUsed" = true;
        "browser.discovery.enabled" = false;
        "browser.display.use_system_colors" = true;
        "browser.display.windows.non_native_menus" = 1;
        "browser.download.autohideButton" = false;
        "browser.download.dir" = "/home/tlh/Downloads";
        "browser.download.folderList" = 2;
        "browser.newtabpage.activity-stream.feeds.section.topstories" = false;
        "browser.newtabpage.activity-stream.newtabWallpapers.v2.enabled" = false;
        "browser.privatebrowsing.enable-new-indicator" = false;
        "browser.proton.enabled" = true;
        "browser.proton.places-tooltip.enabled" = true;
        "browser.safebrowsing.downloads.enabled" = false;
        "browser.safebrowsing.downloads.remote.block_dangerous_host" = false;
        "browser.safebrowsing.downloads.remote.block_dangerous" = false;
        "browser.safebrowsing.downloads.remote.block_potentially_unwanted" = false;
        "browser.safebrowsing.downloads.remote.block_uncommon" = false;
        "browser.safebrowsing.downloads.remote.enabled" = false;
        "browser.safebrowsing.downloads.remote.url" = false;
        "browser.safebrowsing.enabled" = false;
        "browser.safebrowsing.malware.enabled" = false;
        "browser.shell.checkDefaultBrowser" = false;
        "browser.startup.blankWindow" = false;
        "browser.startup.homepage_override.mstone" = "ignore";
        "browser.startup.page" = "0";
        "browser.startup.preXulSkeletonUI" = true;
        "browser.tabs.hoverPreview.enabled" = true;
        "browser.tabs.tabmanager.enabled" = true;
        "browser.uitour.enabled" = false;
        "browser.urlbar.suggest.calculator" = true;
        "browser.urlbar.suggest.quicksuggest.sponsored" = false;
        "browser.urlbar.unitConversion.enabled" = true;
        "datareporting.healthreport.service.enabled" = false;
        "datareporting.healthreport.uploadEnabled" = false;
        "datareporting.policy.dataSubmissionEnabled" = false;
        "devtools.chrome.enabled" = true;
        "devtools.debugger.prompt-connection" = false;
        "devtools.debugger.remote-enabled" = true;
        "experiments.enabled" = false;
        "experiments.manifest.uri" = "";
        "experiments.supported" = false;
        "extensions.autoDisableScopes" = 0;
        "extensions.pocket.enabled" = false;
        "extensions.pocket.onSaveRecs" = false;
        "extensions.shield-recipe-client.enabled" = false;
        "general.config.obscure_value" = 0;
        "general.config.sandbox_enabled" = false;
        "general.smoothScroll" = true;
        "gfx.canvas.accelerated" = true;
        "gfx.webrender.all" = true;
        "gfx.webrender.enabled" = true;
        "gfx.webrender.svg-images" = true;
        "gfx.x11-egl.force-enabled" = true;
        "layers.acceleration.force-enabled" = true;
        "layout.css.backdrop-filter.enabled" = true;
        "layout.css.cached-scrollbar-styles.enabled" = false;
        "layout.css.color-mix.enabled" = true;
        "layout.css.font-visibility.private" = 3;
        "layout.css.font-visibility.resistFingerprinting" = 3;
        "layout.css.has-selector.enabled" = true;
        "layout.css.moz-document.content.enabled" = true;
        "layout.css.moz-outline-radius.enabled" = true;
        "layout.css.xul-box-display-values.content.enabled" = true;
        "layout.css.xul-display-values.content.enabled" = true;
        "layout.css.xul-tree-pseudos.content.enabled" = true;
        "loop.logDomains" = false;
        "media.av1.enabled" = false;
        "media.ffmpeg.vaapi.enabled" = true;
        "media.hardware-video-decoding.force-enabled" = true;
        "media.rdd-ffmpeg.enabled" = true;
        "media.videocontrols.picture-in-picture.enable-when-switching-tabs.enabled" = false;
        "network.cookie.cookieBehavior" = 1;
        "privacy.globalprivacycontrol.enabled" = true;
        "privacy.globalprivacycontrol.functionality.enabled" = true;
        "privacy.popups.disable_from_plugins" = 0;
        "sidebar.revamp" = true;
        "sidebar.verticalTabs" = true;
        "svg.context-properties.content.enabled" = true;
        "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
        "toolkit.tabbox.switchByScrolling" = false;
        "toolkit.telemetry.archive.enabled" = false;
        "toolkit.telemetry.enabled" = false;
        "toolkit.telemetry.unified" = false;
        "ui.systemUsesDarkTheme" = 1;

        "dom.webgpu.workers.enabled" = true;
        "dom.webgpu.enabled" = true;
        "gfx.webgpu.force-enabled" = true;

        "higgs-boson.disable.verticaltab.bar" = false;

        "higgs-boson.disable.windowcontrols.button" = true;
        "higgs-boson.OS.gnome.wdl" = true;
        "higgs-boson.OS.gnome.wds" = true;
        "higgs-boson.OS.gnome" = true;
        "higgs-boson.OS.notitlebar" = true;
        "higgs-boson.sidebar.autohide" = true;
        "higgs-boson.sidebar.hidden" = false;
        "higgs-boson.sidebar.longer" = true;

        "higgs-boson.tabs.autohide" = true;
        "higgs-boson.theme.color.swap" = true;
        "higgs-boson.theme.extensions" = true;
        "higgs-boson.theme.icons" = true;
        "higgs-boson.theme.menubar" = true;
        "higgs-boson.urlbar.centered" = true;
        "higgs-boson.urlbar.hidebuttons" = false;
        "higgs-boson.urlbar.suggestions" = true;
        "higgs-boson.xstyle.containertabs.i" = false;
        "higgs-boson.xstyle.containertabs.ii" = false;
        "higgs-boson.xstyle.containertabs.iii" = true;
        "higgs-boson.xstyle.pinnedtabs.i" = true;
        "higgs-boson.xstyle.private" = true;
        "higgs-boson.xstyle.urlbar" = true;
        "user.theme.dark.a" = true;
        "user.theme.dark.catppuccin-mocha" = false;
        "user.theme.dark.catppuccin" = false;
        "user.theme.dark.gruvbox" = false;
        "user.theme.dark.midnight" = false;
        "user.theme.light.a" = false;
        "user.theme.light.gruvbox" = false;
        "widget.disable-native-theme-for-content" = true;
        "widget.dmabuf.force-enabled" = true;
        "widget.gtk.rounded-bottom-corners.enabled" = true;
        "widget.non-native-theme.win.scrollbar.use-system-size" = false;
        "widget.use-xdg-desktop-portal" = true;
        "xpinstall.signatures.required" = false;
      };
    };
  };
  home.file.".mozilla/firefox/${profile}/chrome" = {
    source = "${inputs.higgs-boson}";
    recursive = true;
  };
}

```````

`/etc/nixos/home/shared/programs/nemo/default.nix`:

```````nix
{pkgs, ...}: {
  home.packages = with pkgs; [
    nemo-fileroller
    nemo-with-extensions
    webp-pixbuf-loader # for webp thumbnails
    xdg-terminal-exec
  ];

  xdg = {
    # fix mimetype associations
    mimeApps.defaultApplications = {
      "inode/directory" = "nemo.desktop";
      # wtf zathura / pqiv registers themselves to open archives
      "application/zip" = "org.gnome.FileRoller.desktop";
      "application/vnd.rar" = "org.gnome.FileRoller.desktop";
      "application/x-7z-compressed" = "org.gnome.FileRoller.desktop";
      "application/x-bzip2-compressed-tar" = "org.gnome.FileRoller.desktop";
      "application/x-tar" = "org.gnome.FileRoller.desktop";
    };
  };
  dconf.settings = {
    # fix open in terminal
    "org/gnome/desktop/applications/terminal" = {
      exec = "kitty -e ";
    };
    "org/cinnamon/desktop/applications/terminal" = {
      exec = "kitty -e ";
    };
    "org/nemo/preferences" = {
      default-folder-viewer = "list-view";
      show-hidden-files = true;
      start-with-dual-pane = true;
      date-format-monospace = true;
    };
    "org/nemo/window-state" = {
      sidebar-bookmark-breakpoint = 0;
      sidebar-width = 180;
    };
    "org/nemo/preferences/menu-config" = {
      selection-menu-make-link = true;
      selection-menu-copy-to = true;
      selection-menu-move-to = true;
    };
  };
}

```````

`/etc/nixos/home/shared/programs/aichat.nix`:

```````nix
{pkgs, ...}: let
  aichatConfig =
    #yaml
    ''
      stream: true                     # Controls whether to use the stream-style API.
      save: true                       # Indicates whether to persist the message
      editor: nvim                     # Specifies the command used to edit input buffer or session.yaml. env: EDITOR
      wrap: auto                         # Controls text wrapping (no, auto, <max-width>)
      wrap_code: true
      # Visit https://github.com/sigoden/llm-functions for setup instructions
      function_calling: true           # Enables or disables function calling (Globally).
      mapping_tools:                   # Alias for a tool or toolset
         fs: 'fs_cat,fs_ls,fs_mkdir,fs_rm,fs_write'
      use_tools: fts,web_search # Enables or disables wrapping of code blocks
      model: ollama
      clients:
        - type: openai-compatible
          name: ollama
          api_base: http://localhost:11434/v1
          api_key: null
          models:
          - name: llama3.2:3b
            max_input_tokens: null
          - name: Qwen 2.5 Coder
            max_input_tokens: null
          - name: wizard-vicuna-uncensored:13b
            max_input_tokens: null
          - name: huggingface.co/Novaciano/Llama-3.2-3b-NSFW_Aesir_Uncensored-GGUF:latest
            max_input_tokens: null
          - name: huggingface.co/TheBloke/deepseek-coder-33B-instruct-GGUF:latest
            max_input_tokens: null
          - name: deepseek-r1:14b
            max_input_tokens: null
          - name: granite3-dense:8b
            max_input_tokens: null
          - name: zephyr:7b
            max_input_tokens: null
          - name: nemotron-mini:4b
            max_input_tokens: null


    '';
  english_role =
    #markdown
    ''
      ---
      model: ollama:llama3.2:3b
      temperature:
      top_p:
      ---

      You are a language assistant. If the input is in English, you review the text and fix errors. If the input in another language than English, you translate the input to English. Do NOT add any additional information. Reply only with the translated or improved text.
    '';
  bash_one_liner_role = ''
         ---
         model: ollama:llama3.2:3b
         temperature:
         top_p:
         ---

    I want you to act as a linux shell expert. You will provide a bash one-liner that meets the
    spcifications I will provide to you. I want you to answer only with code. Do not write explanations.
  '';
  coder_role = ''
       ---
       model: ollama:llama3.2:3b
       temperature:
       top_p:
       ---
    I want you to act as a senior programmer. I want you to answer only with the fenced code block. I want you to add an language identifier to the fenced code block. Do not write explanations.
  '';

  commit_suggester_role =
    #markdown
    ''
      ---
      model: ollama:granite3-dense:8b
      temperature: 0.9
      top_p:
      ---

      Please provide a concise one-line summary of the changes introduced in this commit. The change
      should follow the Conventional Commits format: `<type>(<scope>): <short summary>`. Do not
      respond with anything other than the commit message(!IMPORTANT) .Here is the
      `git diff -z` output to base your message on:
    '';
  prompt_improver_role = ''
     ---
     model: ollama:deepseek-r1:14b
     temperature: 0.8
     top_p:
     ---
    As a world-clas AI researcher, your task is to improve the generative language model prompt provided in the next message.
    First, organize the information.
    Then, eliminate duplicates.
    Use short and clear sentences, each on their own line.
    Do not remove any roles mentioned and keep the prompt in the second person.
    Consider the user's goal and potential misinterpretations while making improvements.
    After that, provide specific editorial recommendations and reasoning.
    Finally, present the revised prompt, with one sentence per line (no extra whitespace or blank lines).
    The prompt is:
  '';
  prompt_creator_role = ''
     ---
     model: ollama:deepseek-r1:14b
     temperature: 0.8
     top_p:
    ---
     As a world-class AI researcher, your task is to asist the user in creating a system prompt for a the generative language model.
     Consider the user's goal and potential misinterpretations while making improvements.
     Use the language "think step by step" at least once in a relevant place to increase its effectiveness.
     Use unambiguous, concise language in the prompt.
     First, think step by step about the user's request and summarize the requirements.
     Then, present the prompt that accomplishes the goal.
  '';
in {
  home.packages = with pkgs; [
    aichat
    ollama
  ];

  xdg.configFile."aichat/config.yaml".text = aichatConfig;

  # Roles
  xdg.configFile."aichat/roles/english.md".text = english_role;
  xdg.configFile."aichat/roles/bashOneLiner.md".text = bash_one_liner_role;
  xdg.configFile."aichat/roles/prompt_improver_role.md".text = prompt_improver_role;
  xdg.configFile."aichat/roles/prompt_creator_role.md".text = prompt_creator_role;
  xdg.configFile."aichat/roles/coder.md".text = coder_role;
  xdg.configFile."aichat/roles/commit.md".text = builtins.readFile ./aichat/commit.md;
  xdg.configFile."aichat/roles/commitSuggester.md".text = commit_suggester_role;
}

```````

`/etc/nixos/home/shared/programs/zathura/default.nix`:

```````nix
{
  programs.zathura = {
    enable = true;
    options = {
      selection-clipboard = "clipboard";
      adjust-open = "best-fit";
      pages-per-row = "1";
      scroll-page-aware = "true";
      scroll-full-overlap = "0.01";
      scroll-step = "100";
      smooth-scroll = true;
      zoom-min = "10";
      guioptions = "none";
      statusbar-h-padding = 10;
      statusbar-v-padding = 10;
      recolor = true;
      default-fg = "#d1d1d1";
      default-bg = "#1c1c1c";
      completion-bg = "#212121";
      completion-fg = "#d1d1d1";
      completion-highlight-bg = "#555555";
      completion-highlight-fg = "#d1d1d1";
      completion-group-bg = "#212121";
      completion-group-fg = "#89B4FA";
      statusbar-fg = "#d1d1d1";
      statusbar-bg = "#282828";
      notification-bg = "#282828";
      notification-fg = "#d1d1d1";
      notification-error-bg = "#282828";
      notification-error-fg = "#F38BA8";
      notification-warning-bg = "#282828";
      notification-warning-fg = "#FAE3B0";
      inputbar-fg = "#d1d1d1";
      inputbar-bg = "#282828";
      recolor-lightcolor = "#1c1c1c";
      recolor-darkcolor = "#d1d1d1";
      index-fg = "#d1d1d1";
      index-bg = "#1c1c1c";
      index-active-fg = "#d1d1d1";
      index-active-bg = "#282828";
      render-loading-bg = "#1c1c1c";
      render-loading-fg = "#d1d1d1";
      highlight-color = "#555555";
      highlight-fg = "#F5C2E7";
      highlight-active-color = "#F5C2E7";
    };
  };
}

```````

`/etc/nixos/home/shared/programs/kitty/default.nix`:

```````nix
{
  pkgs,
  outputs,
  lib,
  ...
}: {
  programs.kitty = {
    enable = true;
    # TODO implement color theme and add the below
    #extraConfig = import ./settings.nix;
    settings = {
      window_padding_width = 5;
      confirm_os_window_close = -1;
      focus_follows_mouse = "yes";
      cursor_shape = "block";
      copy_on_select = "yes";
      sync_to_monitor = "yes";

      visual_bell_duration = 0;
      window_alert_on_bell = "no";
      cursor_underline_thickness = "0.5";
      background_opacity = "0.65";
      tab_bar_style = "separator";
      tab_separator = " ┇";
      tab_bar_margin_width = "3";
      tab_bar_margin_height = "3";
      tab_bar_edge = "top";
      enable_audio_bell = "no";
    };
    font = {
      size = 12;
      name = "Mplus Code 60";
    };
    shellIntegration = {
      enableZshIntegration = true;
      enableBashIntegration = true;
    };
  };
}

```````

`/etc/nixos/home/shared/programs/kitty/colors.nix`:

```````nix
# TODO set this up in a way nix doesn't hate
background #363537

foreground #f7f1ff

cursor #f7f1ff

cursor_text_color #000000

selection_foreground #363537

selection_background #f7f1ff

# dull black
color0 #363537

# light black
color8 #69676c

# dull red
color1 #fc618d

# light red
color9 #fc618d

# dull green
color2 #7bd88f

# light green
color10 #7bd88f

# yellow
color3 #fce566

# light yellow
color11 #fce566

# blue
color4 #fd9353

# light blue
color12 #fd9353

# magenta
color5 #948ae3

# light magenta
color13 #948ae3

# cyan
color6 #5ad4e6

# light cyan
color14 #5ad4e6

# dull white
color7 #f7f1ff

# bright white
color15
#f7f1ff


```````

`/etc/nixos/home/shared/programs/ghostty.nix`:

```````nix
{
  pkgs,
  inputs,
  config,
  ...
}: {
  programs.ghostty = {
    enable = true;
    enableZshIntegration = true;
    enableBashIntegration = true;
    installVimSyntax = true;

    settings = {
      background-blur-radius = 20;
      theme = "dark:Monokai Pro Spectrum,light:Monokai Pro Light";
      window-theme = "dark";
      window-decoration = false;
      background-opacity = 0.8;
      minimum-contrast = 1.1;
      window-padding-x = 2;
      window-padding-y = 2;
      gtk-adwaita = false;
      gtk-single-instance = false;
    };
  };
}

```````

`/etc/nixos/home/shared/programs/aichat/commit.md`:

```````md
---
model: ollama:llama3.2:3b
temperature: 0.4
top_p: 0.1
---

You are a git commit message generator. Your sole purpose is to generate a concise, single-line git commit message based on the provided git diff imagining yourself to be the author of the code who already knows how it works, so hold off on the bot splaining about the project's functionality that we don't need to hear. Follow these rules strictly:

1. Analyze the git diff and focus on the main changes across all files.
2. Summarize these changes into a **single-line commit message of 75 characters or less using the
   Conventional Commits standard**.
3. Prioritize changes to code or content over formatting changes.
4. For large diffs with many files, focus on the overall theme or purpose of the changes.
5. \_**Output ONLY the commit message**. No explanations, no context, no additional text.
6. _If you cannot generate a suitable commit message, output NOTHING_.
7. Never provide code analysis, suggestions, or any text that isn't a commit message.
8. Output no more than 100 characters.

Respond with ONLY the commit message or NOTHING. Any other output is **strictly forbidden** and this
would mean you would have violated your strict ethical guidelines and subjected to immediate
termination.

Use the following format for the output: `<type>: <description>

These are the available <type>:

- `feat` Commits, that adds or remove a new feature
- `fix` Commits, that fixes a bug
- `refactor` Commits, that rewrite/restructure your code, however does not change any API behaviour
- `perf` Commits are special `refactor` commits, that improve performance
- `style` Commits, that do not affect the meaning (white-space, formatting, missing semi-colons, etc)
- `test` Commits, that add missing tests or correcting existing tests
- `docs` Commits, that affect documentation only
- `build` Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
- `ops` Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
- `chore` Miscellaneous commits e.g. modifying `.gitignore`

**The <description> contains a concise description of the change.**

- Is a **mandatory** part of the format
- Use the imperative, present tense: "change" not "changed" nor "changes"
  - Think of `This commit will...` or `This commit should...`
- Don't capitalize the first letter
- No dot (`.`) at the end
- Avoid referencing the code's authors or yourself entirely

### Example Outputs:

- `feat: allow provided config object to extend other configs`
- `feat: send an email to the customer when a product is shipped`
- `fix: prevent racing of requests`
- `fix: prevent order an empty shopping cart`
- `perf: decrease memory footprint for determine uniqe visitors by using HyperLogLog`
- `refactor: implement fibonacci number calculation as recursion`
- `docs: correct spelling of CHANGELOG`
- `chore: drop support for Node 6`
- `style: remove empty line`

```````

`/etc/nixos/home/shared/programs/neovim/default.nix`:

```````nix
{
  pkgs,
  config,
  inputs,
  overlays,
  ...
}: {
  programs.neovim = {
    enable = true;
    withNodeJs = true;
    defaultEditor = true;
    withRuby = true;
    withPython3 = true;
    extraPackages = with pkgs; [
      jq

      tree-sitter
      nodePackages_latest.nodejs
      # nodePackages_latest.neovim
      tree-sitter-grammars.tree-sitter-c
      tree-sitter-grammars.tree-sitter-ql
      tree-sitter-grammars.tree-sitter-go
      tree-sitter-grammars.tree-sitter-vue
      tree-sitter-grammars.tree-sitter-rust
      tree-sitter-grammars.tree-sitter-vim
      tree-sitter-grammars.tree-sitter-tsx
      tree-sitter-grammars.tree-sitter-sql
      tree-sitter-grammars.tree-sitter-rst
      tree-sitter-grammars.tree-sitter-nix
      tree-sitter-grammars.tree-sitter-lua
      tree-sitter-grammars.tree-sitter-dot
      tree-sitter-grammars.tree-sitter-css
      tree-sitter-grammars.tree-sitter-cpp
      tree-sitter-grammars.tree-sitter-yaml
      tree-sitter-grammars.tree-sitter-toml
      tree-sitter-grammars.tree-sitter-scss
      tree-sitter-grammars.tree-sitter-ruby
      tree-sitter-grammars.tree-sitter-regex
      tree-sitter-grammars.tree-sitter-make
      tree-sitter-grammars.tree-sitter-just
      tree-sitter-grammars.tree-sitter-json
      tree-sitter-grammars.tree-sitter-cuda
      tree-sitter-grammars.tree-sitter-html
      tree-sitter-grammars.tree-sitter-bash
      tree-sitter-grammars.tree-sitter-python
      tree-sitter-grammars.tree-sitter-graphql
      tree-sitter-grammars.tree-sitter-markdown
      tree-sitter-grammars.tree-sitter-typescript
      tree-sitter-grammars.tree-sitter-javascript
      tree-sitter-grammars.tree-sitter-dockerfile
      python312Packages.pynvim

      yarn

      # Faster filewatch
      fswatch

      # Build some extensions
      gcc
      cmake
    ];

    extraLuaPackages = ps:
      with ps; [
        # for image support
        magick
      ];

    viAlias = true;
    vimAlias = true;
    vimdiffAlias = true;
  };

  home.activation.installNeoVimConfig = ''
    if [ ! -d "$HOME/.config/nvim" ]; then
     ${pkgs.git}/bin/git clone https://github.com/Thomashighbaugh/nvim-forge "$HOME/.config/nvim"
      chmod -R +w "$HOME/.config/nvim"
    fi
  '';
}

```````

`/etc/nixos/home/shared/programs/yazi/theme.toml`:

```````toml
[tab]
active = { fg = "#1E2031", bg = "#80AEFA" }
inactive = { fg = "#C8D3F8", bg = "#484D66" }
max_width = 1

[status]
primary = { normal = "#80AEFA", select = "#CD9EFC", unset = "#FFA577" }
secondary = { normal = "#1E2031", select = "#23273B", unset = "#23273B" }
tertiary = { normal = "#6D738F", select = "#6D738F", unset = "#6D738F" }
body = { normal = "#484D66", select = "#484D66", unset = "#484D66" }
emphasis = { normal = "#C8D3F8", select = "#C8D3F8", unset = "#C8D3F8" }
info = { normal = "#7AD9E5", select = "#7AD9E5", unset = "#7AD9E5" }
success = { normal = "#97DC8D", select = "#97DC8D", unset = "#97DC8D" }
warning = { normal = "#F3D398", select = "#F3D398", unset = "#F3D398" }
danger = { normal = "#FA7F94", select = "#FA7F94", unset = "#FA7F94" }
separator = { opening = "", closing = "" }

[progress]
gauge = { fg = "#FFA577", bg = "#484D66" }
label = { fg = "#FFFFFF", bold = true }

[selection]
hovered = { fg = "#1E2031", bg = "#80AEFA" }

[marker]
selecting = { fg = "#97DC8D", bg = "#97DC8D" }
selected = { fg = "#F3D398", bg = "#F3D398" }

[preview]
hovered = { underline = true }
syntect_theme = ""

[filetype]

rules = [
  # Images
  { mime = "image/*", fg = "#7AD9E5" },

  # Videos
  { mime = "video/*", fg = "#F3D398" },
  { mime = "audio/*", fg = "#F3D398" },

  # Archives
  { mime = "application/zip", fg = "#CD9EFC" },
  { mime = "application/gzip", fg = "#CD9EFC" },
  { mime = "application/x-tar", fg = "#CD9EFC" },
  { mime = "application/x-bzip", fg = "#CD9EFC" },
  { mime = "application/x-bzip2", fg = "#CD9EFC" },
  { mime = "application/x-home/tlh/programs/yazi/default.nix7z-compressed", fg = "#CD9EFC" },
  { mime = "application/x-rar", fg = "#CD9EFC" },

  # Fallback
  { name = "*", fg = "#C8D3F8" },
  { name = "*/", fg = "#80AEFA" },
]

[icons]

"Desktop/" = ""
"Documents/" = ""
"Downloads/" = ""
"Pictures/" = ""
"Music/" = ""
"Movies/" = ""
"Videos/" = ""
"Public/" = ""
"Library/" = ""
"Development/" = ""
".config/" = ""

# Git
".git/" = ""
".gitignore" = ""
".gitmodules" = ""
".gitattributes" = ""

# Dotfiles
".DS_Store" = ""
".bashrc" = ""
".bashprofile" = ""
".zshrc" = ""
".zshenv" = ""
".zprofile" = ""
".vimrc" = ""

# Text
"*.txt" = ""
"*.md" = ""

# Archives
"*.zip" = ""
"*.tar" = ""
"*.gz" = ""
"*.7z" = ""

# Audio
"*.mp3" = ""
"*.flac" = ""
"*.wav" = ""
# Movies
"*.mp4" = ""
"*.mkv" = ""
"*.avi" = ""
"*.mov" = ""

# Images
"*.jpg" = ""
"*.jpeg" = ""
"*.png" = ""
"*.gif" = ""
"*.webp" = ""
"*.avif" = ""
"*.bmp" = ""
"*.ico" = ""
"*.svg" = ""

# Programming
"*.c" = ""
"*.cpp" = ""
"*.h" = ""
"*.hpp" = ""
"*.rs" = ""
"*.go" = ""
"*.py" = ""
"*.js" = ""
"*.ts" = ""
"*.tsx" = ""
"*.jsx" = ""
"*.rb" = ""
"*.php" = ""
"*.java" = ""
"*.sh" = ""
"*.fish" = ""
"*.swift" = ""
"*.vim" = ""
"*.lua" = ""
"*.html" = ""
"*.css" = ""
"*.scss" = ""
"*.json" = ""
"*.toml" = ""
"*.yml" = ""
"*.yaml" = ""
"*.ini" = ""
"*.conf" = ""

# Default
"*" = ""
"*/" = ""

```````

`/etc/nixos/home/shared/programs/yazi/default.nix`:

```````nix
{...}: {
  programs.yazi = {
    enable = true;
    shellWrapperName = "r";
  };

  home.file = {
    ".config/yazi/yazi.toml".source = ./yazi.toml;
    ".config/yazi/keymap.toml".source = ./keymap.toml;
    ".config/yazi/theme.toml".source = ./theme.toml;
  };
}

```````

`/etc/nixos/home/shared/programs/yazi/yazi.toml`:

```````toml
[manager]
layout = [2, 4, 3]
sort_sensitive = true
sort_reverse = true
sort_dir_first = true
show_hidden = true
show_symlink = true

[preview]
tab_size = 2
max_width = 600
max_height = 900
cache_dir = ""

[opener]
folder = [
  { run = 'thunar "$@"', desc = "Reveal in Thunar" },
  { run = '$EDITOR "$@"' },
]
archive = [{ run = 'dtrx "$1"', desc = "Extract here" }]
text = [{ run = '$EDITOR "$@"', block = true }]
image = [
  { run = 'feh "$@"' },
  { run = 'imv "$@"' },
  { run = '''exiftool "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show EXIF" },
]
video = [
  { run = 'vlc "$@"' },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info" },
]
audio = [
  { run = 'vlc "$@"' },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info" },
]

[open]
rules = [
  { name = "*/", use = "folder" },

  { mime = "text/*", use = "text" },
  { mime = "image/*", use = "image" },
  { mime = "video/*", use = "video" },
  { mime = "audio/*", use = "audio" },
  { mime = "inode/x-empty", use = "text" },

  { mime = "application/json", use = "text" },
  { mime = "*/javascript", use = "text" },

  { mime = "application/zip", use = "archive" },
  { mime = "application/gzip", use = "archive" },
  { mime = "application/x-tar", use = "archive" },
  { mime = "application/x-bzip", use = "archive" },
  { mime = "application/x-bzip2", use = "archive" },
  { mime = "application/x-7z-compressed", use = "archive" },
  { mime = "application/x-rar", use = "archive" },

  { mime = "*", use = "fallback" },
]

[tasks]
micro_workers = 5
macro_workers = 10
bizarre_retry = 5

[log]
enabled = false

```````

`/etc/nixos/home/shared/programs/yazi/keymap.toml`:

```````toml
[manager]

keymap = [
  { on = [
    "<Esc>",
  ], run = "escape", desc = "Exit visual mode, clear selected, or cancel search" },
  { on = [
    "q",
  ], run = "quit", desc = "Exit the process" },
  { on = [
    "Q",
  ], run = "quit --no-cwd-file", desc = "Exit the process without writing cwd-file" },
  { on = [
    "<C-q>",
  ], run = "close", desc = "Close the current tab, or quit if it is last tab" },
  { on = [
    "<C-z>",
  ], run = "suspend", desc = "Suspend the process" },

  # Navigation
  { on = [
    "k",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "j",
  ], run = "arrow 1", desc = "Move cursor down" },

  { on = [
    "K",
  ], run = "arrow -5", desc = "Move cursor up 5 lines" },
  { on = [
    "J",
  ], run = "arrow 5", desc = "Move cursor down 5 lines" },

  { on = [
    "<C-u>",
  ], run = "arrow -50%", desc = "Move cursor up half page" },
  { on = [
    "<C-d>",
  ], run = "arrow 50%", desc = "Move cursor down half page" },
  { on = [
    "<C-b>",
  ], run = "arrow -100%", desc = "Move cursor up one page" },
  { on = [
    "<C-f>",
  ], run = "arrow 100%", desc = "Move cursor down one page" },

  { on = [
    "h",
  ], run = "leave", desc = "Go back to the parent directory" },
  { on = [
    "l",
  ], run = "enter", desc = "Enter the child directory" },

  { on = [
    "H",
  ], run = "back", desc = "Go back to the previous directory" },
  { on = [
    "L",
  ], run = "forward", desc = "Go forward to the next directory" },

  { on = [
    "<C-k>",
  ], run = "peek -5", desc = "Peek up 5 units in the preview" },
  { on = [
    "<C-j>",
  ], run = "peek 5", desc = "Peek down 5 units in the preview" },

  { on = [
    "<Up>",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "<Down>",
  ], run = "arrow 1", desc = "Move cursor down" },
  { on = [
    "<Left>",
  ], run = "leave", desc = "Go back to the parent directory" },
  { on = [
    "<Right>",
  ], run = "enter", desc = "Enter the child directory" },

  { on = [
    "g",
    "g",
  ], run = "arrow -99999999", desc = "Move cursor to the top" },
  { on = [
    "G",
  ], run = "arrow 99999999", desc = "Move cursor to the bottom" },

  # Selection
  { on = [
    "<Space>",
  ], run = [
    "toggle --state=none",
    "arrow 1",
  ], desc = "Toggle the current selection state" },
  { on = [
    "v",
  ], run = "visual_mode", desc = "Enter visual mode (selection mode)" },
  { on = [
    "V",
  ], run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },
  { on = [
    "<C-a>",
  ], run = "toggle_all --state=true", desc = "Select all files" },
  { on = [
    "<C-r>",
  ], run = "toggle_all --state=none", desc = "Inverse selection of all files" },

  # Operation
  { on = [
    "o",
  ], run = "open", desc = "Open the selected files" },
  { on = [
    "O",
  ], run = "open --interactive", desc = "Open the selected files interactively" },
  { on = [
    "<Enter>",
  ], run = "open", desc = "Open the selected files" },
  { on = [
    "<C-Enter>",
  ], run = "open --interactive", desc = "Open the selected files interactively" }, # It's cool if you're using a terminal that supports CSI u
  { on = [
    "y",
  ], run = "yank", desc = "Copy the selected files" },
  { on = [
    "x",
  ], run = "yank --cut", desc = "Cut the selected files" },
  { on = [
    "p",
  ], run = "paste", desc = "Paste the files" },
  { on = [
    "P",
  ], run = "paste --force", desc = "Paste the files (overwrite if the destination exists)" },
  { on = [
    "-",
  ], run = "link", desc = "Symlink the absolute path of files" },
  { on = [
    "_",
  ], run = "link --relative", desc = "Symlink the relative path of files" },
  { on = [
    "d",
  ], run = "remove", desc = "Move the files to the trash" },
  { on = [
    "D",
  ], run = "remove --permanently", desc = "Permanently delete the files" },
  { on = [
    "a",
  ], run = "create", desc = "Create a file or directory (ends with / for directories)" },
  { on = [
    "r",
  ], run = "rename", desc = "Rename a file or directory" },
  { on = [
    ";",
  ], run = "shell --interactive", desc = "Run a shell command" },
  { on = [
    ":",
  ], run = "shell --block --interactive", desc = "Run a shell command (block the UI until the command finishes)" },
  { on = [
    ".",
  ], run = "hidden toggle", desc = "Toggle the visibility of hidden files" },
  { on = [
    "s",
  ], run = "search fd", desc = "Search files by name using fd" },
  { on = [
    "S",
  ], run = "search rg", desc = "Search files by content using ripgrep" },
  { on = [
    "<C-s>",
  ], run = "search none", desc = "Cancel the ongoing search" },
  { on = [
    "z",
  ], run = "jump zoxide", desc = "Jump to a directory using zoxide" },
  { on = [
    "Z",
  ], run = "jump fzf", desc = "Jump to a directory, or reveal a file using fzf" },

  # Copy
  { on = [
    "c",
    "c",
  ], run = "copy path", desc = "Copy the absolute path" },
  { on = [
    "c",
    "d",
  ], run = "copy dirname", desc = "Copy the path of the parent directory" },
  { on = [
    "c",
    "f",
  ], run = "copy filename", desc = "Copy the name of the file" },
  { on = [
    "c",
    "n",
  ], run = "copy name_without_ext", desc = "Copy the name of the file without the extension" },

  # Find
  { on = [
    "/",
  ], run = "find --smart" },
  { on = [
    "?",
  ], run = "find --previous --smart" },
  { on = [
    "n",
  ], run = "find_arrow" },
  { on = [
    "N",
  ], run = "find_arrow --previous" },

  # Sorting
  { on = [
    ",",
    "a",
  ], run = "sort alphabetical --dir_first", desc = "Sort alphabetically" },
  { on = [
    ",",
    "A",
  ], run = "sort alphabetical --reverse --dir_first", desc = "Sort alphabetically (reverse)" },
  { on = [
    ",",
    "c",
  ], run = "sort created --dir_first", desc = "Sort by creation time" },
  { on = [
    ",",
    "C",
  ], run = "sort created --reverse --dir_first", desc = "Sort by creation time (reverse)" },
  { on = [
    ",",
    "m",
  ], run = "sort modified --dir_first", desc = "Sort by modified time" },
  { on = [
    ",",
    "M",
  ], run = "sort modified --reverse --dir_first", desc = "Sort by modified time (reverse)" },
  { on = [
    ",",
    "n",
  ], run = "sort natural --dir_first", desc = "Sort naturally" },
  { on = [
    ",",
    "N",
  ], run = "sort natural --reverse --dir_first", desc = "Sort naturally (reverse)" },
  { on = [
    ",",
    "s",
  ], run = "sort size --dir_first", desc = "Sort by size" },
  { on = [
    ",",
    "S",
  ], run = "sort size --reverse --dir_first", desc = "Sort by size (reverse)" },

  # Tabs
  { on = [
    "t",
  ], run = "tab_create --current", desc = "Create a new tab using the current path" },

  { on = [
    "1",
  ], run = "tab_switch 0", desc = "Switch to the first tab" },
  { on = [
    "2",
  ], run = "tab_switch 1", desc = "Switch to the second tab" },
  { on = [
    "3",
  ], run = "tab_switch 2", desc = "Switch to the third tab" },
  { on = [
    "4",
  ], run = "tab_switch 3", desc = "Switch to the fourth tab" },
  { on = [
    "5",
  ], run = "tab_switch 4", desc = "Switch to the fifth tab" },
  { on = [
    "6",
  ], run = "tab_switch 5", desc = "Switch to the sixth tab" },
  { on = [
    "7",
  ], run = "tab_switch 6", desc = "Switch to the seventh tab" },
  { on = [
    "8",
  ], run = "tab_switch 7", desc = "Switch to the eighth tab" },
  { on = [
    "9",
  ], run = "tab_switch 8", desc = "Switch to the ninth tab" },

  { on = [
    "[",
  ], run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },
  { on = [
    "]",
  ], run = "tab_switch 1 --relative", desc = "Switch to the next tab" },

  { on = [
    "{",
  ], run = "tab_swap -1", desc = "Swap the current tab with the previous tab" },
  { on = [
    "}",
  ], run = "tab_swap 1", desc = "Swap the current tab with the next tab" },

  # Tasks
  { on = [
    "w",
  ], run = "tasks_show", desc = "Show the tasks manager" },

  # Goto
  { on = [
    "g",
    "h",
  ], run = "cd ~", desc = "Go to the home directory" },
  { on = [
    "g",
    "c",
  ], run = "cd ~/.config", desc = "Go to the config directory" },
  { on = [
    "g",
    "d",
  ], run = "cd ~/Downloads", desc = "Go to the downloads directory" },
  { on = [
    "g",
    "f",
  ], run = "cd ~/Flakes", desc = "Go to the flakes directory" },
  { on = [
    "g",
    "t",
  ], run = "cd /tmp", desc = "Go to the temporary directory" },
  { on = [
    "g",
    "<Space>",
  ], run = "cd --interactive", desc = "Go to a directory interactively" },

  # Help
  { on = [
    "~",
  ], run = "help", desc = "Open help" },
]

[tasks]

keymap = [
  { on = [
    "<Esc>",
  ], run = "close", desc = "Hide the task manager" },
  { on = [
    "<C-q>",
  ], run = "close", desc = "Hide the task manager" },
  { on = [
    "w",
  ], run = "close", desc = "Hide the task manager" },

  { on = [
    "k",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "j",
  ], run = "arrow 1", desc = "Move cursor down" },

  { on = [
    "<Up>",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "<Down>",
  ], run = "arrow 1", desc = "Move cursor down" },

  { on = [
    "<Enter>",
  ], run = "inspect", desc = "Inspect the task" },
  { on = [
    "x",
  ], run = "cancel", desc = "Cancel the task" },

  { on = [
    "~",
  ], run = "help", desc = "Open help" },
]

[select]

keymap = [
  { on = [
    "<C-q>",
  ], run = "close", desc = "Cancel selection" },
  { on = [
    "<Esc>",
  ], run = "close", desc = "Cancel selection" },
  { on = [
    "<Enter>",
  ], run = "close --submit", desc = "Submit the selection" },

  { on = [
    "k",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "j",
  ], run = "arrow 1", desc = "Move cursor down" },

  { on = [
    "K",
  ], run = "arrow -5", desc = "Move cursor up 5 lines" },
  { on = [
    "J",
  ], run = "arrow 5", desc = "Move cursor down 5 lines" },

  { on = [
    "<Up>",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "<Down>",
  ], run = "arrow 1", desc = "Move cursor down" },

  { on = [
    "~",
  ], run = "help", desc = "Open help" },
]

[input]

keymap = [
  { on = [
    "<Backspace>",
  ], run = "backspace" },
  { on = [
    "<C-q>",
  ], run = "close", desc = "Cancel input" },
  { on = [
    "<Enter>",
  ], run = "close --submit", desc = "Submit the input" },
  { on = [
    "<Esc>",
  ], run = "escape", desc = "Go back the normal mode, or cancel input" },

  # Mode
  { on = [
    "i",
  ], run = "insert", desc = "Enter insert mode" },
  { on = [
    "a",
  ], run = "insert --append", desc = "Enter append mode" },
  { on = [
    "v",
  ], run = "visual", desc = "Enter visual mode" },
  { on = [
    "V",
  ], run = [
    "move -999",
    "visual",
    "move 999",
  ], desc = "Enter visual mode and select all" },

  # Navigation
  { on = [
    "h",
  ], run = "move -1", desc = "Move cursor left" },
  { on = [
    "l",
  ], run = "move 1", desc = "Move cursor right" },

  { on = [
    "0",
  ], run = "move -999", desc = "Move to the BOL" },
  { on = [
    "$",
  ], run = "move 999", desc = "Move to the EOL" },
  { on = [
    "I",
  ], run = [
    "move -999",
    "insert",
  ], desc = "Move to the BOL, and enter insert mode" },
  { on = [
    "A",
  ], run = [
    "move 999",
    "insert --append",
  ], desc = "Move to the EOL, and enter append mode" },

  { on = [
    "<Left>",
  ], run = "move -1", desc = "Move cursor left" },
  { on = [
    "<Right>",
  ], run = "move 1", desc = "Move cursor right" },

  { on = [
    "b",
  ], run = "backward", desc = "Move to the beginning of the previous word" },
  { on = [
    "w",
  ], run = "forward", desc = "Move to the beginning of the next word" },
  { on = [
    "e",
  ], run = "forward --end-of-word", desc = "Move to the end of the next word" },

  # Deletion
  { on = [
    "d",
  ], run = "delete --cut", desc = "Cut the selected characters" },
  { on = [
    "D",
  ], run = [
    "delete --cut",
    "move 999",
  ], desc = "Cut until the EOL" },
  { on = [
    "c",
  ], run = "delete --cut --insert", desc = "Cut the selected characters, and enter insert mode" },
  { on = [
    "C",
  ], run = [
    "delete --cut --insert",
    "move 999",
  ], desc = "Cut until the EOL, and enter insert mode" },
  { on = [
    "x",
  ], run = [
    "delete --cut",
    "move 1 --in-operating",
  ], desc = "Cut the current character" },

  # Yank/Paste
  { on = [
    "y",
  ], run = "yank", desc = "Copy the selected characters" },
  { on = [
    "p",
  ], run = "paste", desc = "Paste the copied characters after the cursor" },
  { on = [
    "P",
  ], run = "paste --before", desc = "Paste the copied characters before the cursor" },

  # Undo/Redo
  { on = [
    "u",
  ], run = "undo", desc = "Undo the last operation" },
  { on = [
    "<C-r>",
  ], run = "redo", desc = "Redo the last operation" },

  # Help
  { on = [
    "~",
  ], run = "help", desc = "Open help" },
]

[help]

keymap = [
  { on = [
    "<Esc>",
  ], run = "escape", desc = "Clear the filter, or hide the help" },
  { on = [
    "q",
  ], run = "close", desc = "Exit the process" },
  { on = [
    "<C-q>",
  ], run = "close", desc = "Hide the help" },

  # Navigation
  { on = [
    "k",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "j",
  ], run = "arrow 1", desc = "Move cursor down" },

  { on = [
    "K",
  ], run = "arrow -5", desc = "Move cursor up 5 lines" },
  { on = [
    "J",
  ], run = "arrow 5", desc = "Move cursor down 5 lines" },

  { on = [
    "<Up>",
  ], run = "arrow -1", desc = "Move cursor up" },
  { on = [
    "<Down>",
  ], run = "arrow 1", desc = "Move cursor down" },

  # Filtering
  { on = [
    "/",
  ], run = "filter", desc = "Apply a filter for the help items" },
]

```````

`/etc/nixos/home/shared/programs/editorconfig/default.nix`:

```````nix
{...}: {
  editorconfig.enable = true;
  home.file.".editorconfig".source = ../../../../.editorconfig;
}

```````

`/etc/nixos/home/shared/programs/joshuto.nix`:

```````nix
{
  programs.joshuto = {
    enable = true;
    settings = {
      numbered_command = true;
      scroll_offset = 3;
      use_preview_script = true;
      use_trash = true;
      watch_files = true;
      xdg_open = true;
      xdg_open_fork = true;

      display = {
        column_ratio = [1 5 2];
        show_borders = true;
        show_icons = true;
      };
    };

    # mimetype = {
    #   class = {
    #     audio_default = [
    #       {
    #         command = "vlc";
    #         args = ["--"];
    #       }
    #       {
    #         command = "mediainfo";
    #         confirm_exit = true;
    #       }
    #     ];
    #     image_default = [
    #       {
    #         command = "imv-dir";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "gimp";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "exiftool";
    #         confirm_exit = true;
    #       }
    #     ];
    #     video_default = [
    #       {
    #         command = "vlc";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "mediainfo";
    #         confirm_exit = true;
    #       }
    #     ];
    #     text_default = [
    #       {
    #         command = "nvim";
    #       }
    #       {
    #         command = "bat";
    #         args = ["--paging=always"];
    #       }
    #     ];
    #
    #     blender_default = [
    #       {
    #         command = "blender";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #
    #     reader_default = [
    #       {
    #         command = "zathura";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #   };
    #
    #   extension = {
    #     ## image formats
    #     avif."inherit" = "image_default";
    #     bmp."inherit" = "image_default";
    #     gif."inherit" = "image_default";
    #     heic."inherit" = "image_default";
    #     jpeg."inherit" = "image_default";
    #     jpe."inherit" = "image_default";
    #     jpg."inherit" = "image_default";
    #     jxl."inherit" = "image_default";
    #     pgm."inherit" = "image_default";
    #     png."inherit" = "image_default";
    #     ppm."inherit" = "image_default";
    #     webp."inherit" = "image_default";
    #
    #     eps.app_list = [
    #       {
    #         command = "inkview";
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "inkscape";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     svg.app_list = [
    #       {
    #         command = "inkview";
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "inkscape";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     tiff.app_list = [
    #       {
    #         command = "qimgv";
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "krita";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #
    #     ## audio formats
    #     aac."inherit" = "audio_default";
    #     ac3."inherit" = "audio_default";
    #     aiff."inherit" = "audio_default";
    #     ape."inherit" = "audio_default";
    #     dts."inherit" = "audio_default";
    #     flac."inherit" = "audio_default";
    #     m4a."inherit" = "audio_default";
    #     mp3."inherit" = "audio_default";
    #     oga."inherit" = "audio_default";
    #     ogg."inherit" = "audio_default";
    #     opus."inherit" = "audio_default";
    #     wav."inherit" = "audio_default";
    #     wv."inherit" = "audio_default";
    #
    #     ## video formats
    #     avi."inherit" = "video_default";
    #     av1."inherit" = "video_default";
    #     flv."inherit" = "video_default";
    #     mkv."inherit" = "video_default";
    #     m4v."inherit" = "video_default";
    #     mov."inherit" = "video_default";
    #     mp4."inherit" = "video_default";
    #     ts."inherit" = "video_default";
    #     webm."inherit" = "video_default";
    #     wmv."inherit" = "video_default";
    #
    #     ## text formats
    #     bib."inherit" = "text_default";
    #     build."inherit" = "text_default";
    #     c."inherit" = "text_default";
    #     cfg."inherit" = "text_default";
    #     cmake."inherit" = "text_default";
    #     conf."inherit" = "text_default";
    #     cpp."inherit" = "text_default";
    #     css."inherit" = "text_default";
    #     csv."inherit" = "text_default";
    #     cu."inherit" = "text_default";
    #     desktop."inherit" = "text_default";
    #     ebuild."inherit" = "text_default";
    #     eex."inherit" = "text_default";
    #     env."inherit" = "text_default";
    #     ex."inherit" = "text_default";
    #     exs."inherit" = "text_default";
    #     go."inherit" = "text_default";
    #     gpl."inherit" = "text_default";
    #     h."inherit" = "text_default";
    #     hpp."inherit" = "text_default";
    #     hs."inherit" = "text_default";
    #     ini."inherit" = "text_default";
    #     ipynb."inherit" = "text_default";
    #     java."inherit" = "text_default";
    #     jl."inherit" = "text_default";
    #     js."inherit" = "text_default";
    #     json."inherit" = "text_default";
    #     jsonc."inherit" = "text_default";
    #     kdl."inherit" = "text_default";
    #     kt."inherit" = "text_default";
    #     kvconfig."inherit" = "text_default";
    #     lock."inherit" = "text_default";
    #     log."inherit" = "text_default";
    #     lua."inherit" = "text_default";
    #     md."inherit" = "text_default";
    #     micro."inherit" = "text_default";
    #     ninja."inherit" = "text_default";
    #     nix."inherit" = "text_default";
    #     norg."inherit" = "text_default";
    #     org."inherit" = "text_default";
    #     po."inherit" = "text_default";
    #     pot."inherit" = "text_default";
    #     py."inherit" = "text_default";
    #     qmd."inherit" = "text_default";
    #     rasi."inherit" = "text_default";
    #     rkt."inherit" = "text_default";
    #     rktd."inherit" = "text_default";
    #     rproj."inherit" = "text_default";
    #     rs."inherit" = "text_default";
    #     rstheme."inherit" = "text_default";
    #     scm."inherit" = "text_default";
    #     scss."inherit" = "text_default";
    #     service."inherit" = "text_default";
    #     sh."inherit" = "text_default";
    #     socket."inherit" = "text_default";
    #     sql."inherit" = "text_default";
    #     srt."inherit" = "text_default";
    #     svelte."inherit" = "text_default";
    #     toml."inherit" = "text_default";
    #     tsx."inherit" = "text_default";
    #     txt."inherit" = "text_default";
    #     vim."inherit" = "text_default";
    #     xml."inherit" = "text_default";
    #     yaml."inherit" = "text_default";
    #     yml."inherit" = "text_default";
    #
    #     ## web formats
    #     html.app_list = [
    #       {
    #         command = "firefox";
    #
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "nvim";
    #       }
    #       {
    #         command = "bat";
    #         args = ["--paging=always"];
    #       }
    #     ];
    #
    #     ## archive formats
    #     "7z".app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "7z";
    #         args = ["x"];
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     bz2.app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #
    #       {
    #         command = "tar";
    #         args = ["-xvjf"];
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     gz.app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #
    #       {
    #         command = "tar";
    #         args = ["-xvzf"];
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     tar.app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #
    #       {
    #         command = "tar";
    #         args = ["-xvf"];
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     tgz.app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #
    #       {
    #         command = "tar";
    #         args = ["-xvzf"];
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     rar.app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #
    #       {
    #         command = "unrar";
    #         args = ["x"];
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     xz.app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #
    #       {
    #         command = "tar";
    #         args = ["-xvJf"];
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #     zip.app_list = [
    #       {
    #         command = "dtrx";
    #         args = ["--"];
    #         fork = true;
    #         silent = true;
    #       }
    #       {
    #         command = "unzip";
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "file-roller";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #
    #     ## misc formats
    #     aup.app_list = [
    #       {
    #         command = "audacity";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #
    #     m3u.app_list = [
    #       {
    #         command = "nvim";
    #       }
    #       {
    #         command = "mpv";
    #         silent = true;
    #       }
    #       {
    #         command = "bat";
    #         confirm_exit = true;
    #       }
    #     ];
    #
    #     ## document
    #     odt."inherit" = "text_default";
    #     odf."inherit" = "text_default";
    #     ods."inherit" = "text_default";
    #     odp."inherit" = "text_default";
    #
    #     doc."inherit" = "text_default";
    #     docx."inherit" = "text_default";
    #     xls."inherit" = "text_default";
    #     xlsx."inherit" = "text_default";
    #     ppt."inherit" = "text_default";
    #     pptx."inherit" = "text_default";
    #
    #     epub."inherit" = "reader_default";
    #     pdf."inherit" = "reader_default";
    #
    #     ## 3d files
    #     blend."inherit" = "blender_default";
    #     fbx."inherit" = "blender_default";
    #     glb."inherit" = "blender_default";
    #     gltf."inherit" = "blender_default";
    #     obj."inherit" = "blender_default";
    #     stl."inherit" = "blender_default";
    #
    #     kra.app_list = [
    #       {
    #         command = "krita";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #
    #     kdenlive.app_list = [
    #       {
    #         command = "kdenlive";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #
    #     tex.app_list = [
    #       {
    #         command = "nvim";
    #       }
    #       {
    #         command = "bat";
    #         confirm_exit = true;
    #       }
    #       {
    #         command = "pdflatex";
    #         silent = true;
    #       }
    #     ];
    #
    #     torrent.app_list = [
    #       {
    #         command = "transmission-gtk";
    #         fork = true;
    #         silent = true;
    #       }
    #     ];
    #   };
    #
    #   ## application/octet-stream
    #   application.subtype.octet-stream = {
    #     "inherit" = "video_default";
    #   };
    #   ## text/*
    #   text = {
    #     "inherit" = "text_default";
    #   };
    #   video = {
    #     "inherit" = "video_default";
    #   };
    # };
  };
}

```````

`/etc/nixos/home/shared/programs/gpg/default.nix`:

```````nix
{pkgs, ...}: {
  programs.gpg.enable = true;
  programs.gpg.package = pkgs.gnupg;
  services = {
    gpg-agent = {
      enable = true;
      enableSshSupport = true;
      pinentryPackage = pkgs.pinentry-tty;
      enableZshIntegration = true;
      extraConfig = ''
        allow-loopback-pinentry
        allow-preset-passphrase
      '';
    };
  };
}

```````

`/etc/nixos/home/shared/services/default.nix`:

```````nix
{
  services = {
    keybase.enable = true;
  };
}

```````

`/etc/nixos/home/shared/services/picom.nix`:

```````nix
{
  pkgs,
  outputs,
  ...
}: {
  services.picom = {
    enable = true;
    package = pkgs.picom-next;
    activeOpacity = 0.99;
    backend = "glx";
    fade = true;
    fadeDelta = 3;
    fadeSteps = [0.3 0.3];

    opacityRules = [
      "93:class_g = 'kitty' && !focused"
      "93:class_g = 'ghostty' && !focused"
      "98:class_g = 'ghostty' && focused"
      "98:class_g = 'kitty' && focused"
      "99:class_g = 'awesome'"
    ];
    settings = {
      animations = true;
      animation-stiffness = 300.0;
      animation-dampening = 22.0;
      animation-clamping = true;
      animation-mass = 1;
      animation-for-open-window = "slide-up";
      animation-for-menu-window = "slide-down";
      animation-for-transient-window = "slide-down";
      animation-for-prev-tag = "zoom";
      enable-fading-prev-tag = true;
      animation-for-next-tag = "zoom";
      enable-fading-next-tag = true;
      corner-radius = 0; # awesome handles this better
      shadow = true;
      shadow-radius = 15;
      shadow-offset-x = -15;
      shadow-offset-y = -15;
      shadow-exclude = [
        "window_type = 'desktop'"
        "class_g ~= 'awesome'"
        "class_g ~= 'slop'"
      ];
      rounded-corners-exclude = [
        "window_type = 'dock'"
        "name ~= 'slop'"
        "class_i ~= 'slop'"
      ];
      blur-background-exclude = [
        "class_g ~= 'slop'"
        "class_g ~= 'maim'"
        "class_g ~= 'Shutter'"
        "window_type = 'desktop'"
        "class_g ~= 'discord'"
        "class_g ~= 'firefox'"
        "class_i ~= 'slop'"
        "class_g ~= 'firefox'"
        "class_i ~= 'Spotify'"
        "name ~= 'slop'"
        "name ~= 'Shutter'"
        "name ~= 'maim'"
      ];
      blur = {
        #   method = "dual_kawase";
        # strength = 12.0;
        # deviation = 3.0;
        method = "gaussian";
        size = 10;
        deviation = 5;
        # kernel = "11x11gaussian";
      };

      blur-background = true;
      blur-background-frame = true;
      blur-background-fixed = true;
      xrender-sync-fence = true;
      use-damage = true;
      unredir-if-possible = false;
      vsync = true;
    };
  };
}

```````

`/etc/nixos/home/shared/pkgs/default.nix`:

```````nix
{
  lib,
  pkgs,
  ...
}: {
  home.packages = lib.attrValues {
    inherit
      (pkgs)
      thunderbird-bin
      feh
      i3lock-color
      imagemagick
      keychain
      adwaita-icon-theme
      adwaita-icon-theme-legacy
      hicolor-icon-theme
      pre-commit
      slurp
      ;
    inherit
      (pkgs.xorg)
      xev
      ;
    pylsp = pkgs.python312.withPackages (p:
      with p; [
        flake8
        python-lsp-server
      ]);
  };
}

```````

`/etc/nixos/shell.nix`:

```````nix
{pkgs ? (import ./nixpkgs.nix) {}}: {
  default = pkgs.mkShell {
    nativeBuildInputs = with pkgs; [
      git
      home-manager
      figlet
      lolcat
      nixVersions.git
      alejandra
      neovim
      silver-searcher
    ];

    # Enable experimental features without having to specify the argument
    NIX_CONFIG = "experimental-features = recursive-nix ca-derivations  nix-command flakes";
  };
}

```````

`/etc/nixos/templates/empty/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/empty/flake.nix`:

```````nix
{
  description = "An empty flake template that you can adapt to your own environment";

  # Flake inputs
  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  # Flake outputs
  outputs = {
    self,
    nixpkgs,
  }: let
    # The systems supported for this flake
    supportedSystems = [
      "x86_64-linux" # 64-bit Intel/AMD Linux
      "aarch64-linux" # 64-bit ARM Linux
      "x86_64-darwin" # 64-bit Intel macOS
      "aarch64-darwin" # 64-bit ARM macOS
    ];

    # Helper to provide system-specific attributes
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        # The Nix packages provided in the environment
        # Add any you need here
        packages = with pkgs; [];

        # Set any environment variables for your dev shell
        env = {};

        # Add any shell logic you want executed any time the environment is activated
        shellHook = ''
        '';
      };
    });
  };
}

```````

`/etc/nixos/templates/cue/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/cue/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Cue development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [cue];
      };
    });
  };
}

```````

`/etc/nixos/templates/hashi/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/hashi/flake.nix`:

```````nix
{
  description = "A Nix-flake-based development environment for Terraform, Packer, and Nomad";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            config.allowUnfree = true;
          };
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          packer
          terraform
          tflint
          nomad
          vault
          nomad-autoscaler
          nomad-pack
          levant
          damon
          terragrunt
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/ocaml/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/ocaml/flake.nix`:

```````nix
{
  description = "A Nix-flake-based OCaml development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs;
          [ocaml ocamlformat]
          ++ (with pkgs.ocamlPackages; [dune_3 odoc]);
      };
    });
  };
}

```````

`/etc/nixos/templates/ruby/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/ruby/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Ruby development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [ruby_3_2];
      };
    });
  };
}

```````

`/etc/nixos/templates/go/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/go/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Go 1.22 development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    goVersion = 22; # Change this to update the whole stack

    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: {
      go = final."go_1_${toString goVersion}";
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          # go (version is specified by overlay)
          go

          # goimports, godoc, etc.
          gotools

          # https://github.com/golangci/golangci-lint
          golangci-lint
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/elixir/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/elixir/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Elixir development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: rec {
      # documentation
      # https://nixos.org/manual/nixpkgs/stable/#sec-beam

      # ==== ERLANG ====

      # use whatever version is currently defined in nixpkgs
      # erlang = pkgs.beam.interpreters.erlang;

      # use latest version of Erlang 27
      erlang = final.beam.interpreters.erlang_27;

      # specify exact version of Erlang OTP
      # erlang = pkgs.beam.interpreters.erlang.override {
      #   version = "26.2.2";
      #   sha256 = "sha256-7S+mC4pDcbXyhW2r5y8+VcX9JQXq5iEUJZiFmgVMPZ0=";
      # }

      # ==== BEAM packages ====

      # all BEAM packages will be compile with your preferred erlang version
      pkgs-beam = final.beam.packagesWith erlang;

      # ==== Elixir ====

      # use whatever version is currently defined in nixpkgs
      # elixir = pkgs-beam.elixir;

      # use latest version of Elixir 1.17
      elixir = pkgs-beam.elixir_1_17;

      # specify exact version of Elixir
      # elixir = pkgs-beam.elixir.override {
      #   version = "1.17.1";
      #   sha256 = "sha256-a7A+426uuo3bUjggkglY1lqHmSbZNpjPaFpQUXYtW9k=";
      # };
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs;
          [
            # use the Elixr/OTP versions defined above; will also install OTP, mix, hex, rebar3
            elixir

            # mix needs it for downloading dependencies
            git

            # probably needed for your Phoenix assets
            nodejs_20
          ]
          ++
          # Linux only
          pkgs.lib.optionals pkgs.stdenv.isLinux (with pkgs; [
            gigalixir
            inotify-tools
            libnotify
          ])
          ++
          # macOS only
          pkgs.lib.optionals pkgs.stdenv.isDarwin (with pkgs; [
            terminal-notifier
            darwin.apple_sdk.frameworks.CoreFoundation
            darwin.apple_sdk.frameworks.CoreServices
          ]);
      };
    });
  };
}

```````

`/etc/nixos/templates/rust/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs",
        "rust-overlay": "rust-overlay"
      }
    },
    "rust-overlay": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1734661750,
        "narHash": "sha256-BI58NBdimxu1lnpOrG9XxBz7Cwqy+qIf99zunWofX5w=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "7d3d910d5fd575e6e8c5600d83d54e5c47273bfe",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/rust/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Rust development environment";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    rust-overlay,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [rust-overlay.overlays.default self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: {
      rustToolchain = let
        rust = prev.rust-bin;
      in
        if builtins.pathExists ./rust-toolchain.toml
        then rust.fromRustupToolchainFile ./rust-toolchain.toml
        else if builtins.pathExists ./rust-toolchain
        then rust.fromRustupToolchainFile ./rust-toolchain
        else
          rust.stable.latest.default.override {
            extensions = ["rust-src" "rustfmt"];
          };
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          rustToolchain
          openssl
          pkg-config
          cargo-deny
          cargo-edit
          cargo-watch
          rust-analyzer
        ];

        env = {
          # Required by rust-analyzer
          RUST_SRC_PATH = "${pkgs.rustToolchain}/lib/rustlib/src/rust/library";
        };
      };
    });
  };
}

```````

`/etc/nixos/templates/elm/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/elm/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Elm development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = (with pkgs.elmPackages; [elm]) ++ (with pkgs; [elm2nix]);
      };
    });
  };
}

```````

`/etc/nixos/templates/opa/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/opa/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Open Policy Agent development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [open-policy-agent conftest];
      };
    });
  };
}

```````

`/etc/nixos/templates/default.nix`:

```````nix
{
  bun = {
    path = ./bun;
    description = "Bun development environment";
  };
  c-cpp = {
    path = ./c-cpp;
    description = "C/C++ development environment";
  };
  clojure = {
    path = ./clojure;
    description = "Clojure development environment";
  };
  csharp = {
    path = ./csharp;
    description = "C# development environment";
  };
  cue = {
    path = ./cue;
    description = "Cue development environment";
  };
  dhall = {
    path = ./dhall;
    description = "Dhall development environment";
  };
  elixir = {
    path = ./elixir;
    description = "Elixir development environment";
  };
  elm = {
    path = ./elm;
    description = "Elm development environment";
  };
  empty = {
    path = ./empty;
    description = "Empty dev template that you can customize at will";
  };
  gleam = {
    path = ./gleam;
    description = "Gleam development environment";
  };
  go = {
    path = ./go;
    description = "Go (Golang) development environment";
  };
  hashi = {
    path = ./hashi;
    description = "HashiCorp DevOps tools development environment";
  };
  haskell = {
    path = ./haskell;
    description = "Haskell development environment";
  };
  java = {
    path = ./java;
    description = "Java development environment";
  };
  jupyter = {
    path = ./jupyter;
    description = "Jupyter development environment";
  };
  kotlin = {
    path = ./kotlin;
    description = "Kotlin development environment";
  };
  latex = {
    path = ./latex;
    description = "LaTeX development environment";
  };
  lean4 = {
    path = ./lean4;
    description = "Lean 4 development environment";
  };
  nickel = {
    path = ./nickel;
    description = "Nickel development environment";
  };
  nim = {
    path = ./nim;
    description = "Nim development environment";
  };
  nix = {
    path = ./nix;
    description = "Nix development environment";
  };
  node = {
    path = ./node;
    description = "Node.js development environment";
  };
  ocaml = {
    path = ./ocaml;
    description = "OCaml development environment";
  };
  opa = {
    path = ./opa;
    description = "Open Policy Agent development environment";
  };
  php = {
    path = ./php;
    description = "PHP development environment";
  };
  platformio = {
    path = ./platformio;
    description = "PlatformIO development environment";
  };
  protobuf = {
    path = ./protobuf;
    description = "Protobuf development environment";
  };
  pulumi = {
    path = ./pulumi;
    description = "Pulumi development environment";
  };
  purescript = {
    path = ./purescript;
    description = "Purescript development environment";
  };
  python = {
    path = ./python;
    description = "Python development environment";
  };
  r = {
    path = ./r;
    description = "R development environment";
  };
  ruby = {
    path = ./ruby;
    description = "Ruby development environment";
  };
  rust = {
    path = ./rust;
    description = "Rust development environment";
  };
  rust-toolchain = {
    path = ./rust-toolchain;
    description = "Rust development environment with Rust version defined by a rust-toolchain.toml file";
  };
  scala = {
    path = ./scala;
    description = "Scala development environment";
  };
  shell = {
    path = ./shell;
    description = "Shell script development environment";
  };
  swi-prolog = {
    path = ./swi-prolog;
    description = "Swi-prolog development environment";
  };
  swift = {
    path = ./swift;
    description = "Swift development environment";
  };
  vlang = {
    path = ./vlang;
    description = "Vlang developent environment";
  };
  zig = {
    path = ./zig;
    description = "Zig development environment";
  };
}

```````

`/etc/nixos/templates/c-cpp/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/c-cpp/flake.nix`:

```````nix
{
  description = "A Nix-flake-based C/C++ development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default =
        pkgs.mkShell.override
        {
          # Override stdenv in order to change compiler:
          # stdenv = pkgs.clangStdenv;
        }
        {
          packages = with pkgs;
            [
              clang-tools
              cmake
              codespell
              conan
              cppcheck
              doxygen
              gtest
              lcov
              vcpkg
              vcpkg-tool
            ]
            ++ (
              if system == "aarch64-darwin"
              then []
              else [gdb]
            );
        };
    });
  };
}

```````

`/etc/nixos/templates/protobuf/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/protobuf/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Protobuf development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [protobuf buf];
      };
    });
  };
}

```````

`/etc/nixos/templates/platformio/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/platformio/flake.nix`:

```````nix
{
  description = "A Nix-flake-based PlatformIO development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs;
          [
            clang-tools
            cmake
            codespell
            conan
            cppcheck
            doxygen
            gtest
            lcov
            platformio
            vcpkg
            vcpkg-tool
          ]
          ++ pkgs.lib.optionals (system != "aarch64-darwin") [gdb];

        shellHook = ''
          export PLATFORMIO_CORE_DIR=$PWD/.platformio
        '';
      };
    });
  };
}

```````

`/etc/nixos/templates/vlang/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/vlang/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Vlang development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          vlang
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/rust-toolchain/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs",
        "rust-overlay": "rust-overlay"
      }
    },
    "rust-overlay": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1734661750,
        "narHash": "sha256-BI58NBdimxu1lnpOrG9XxBz7Cwqy+qIf99zunWofX5w=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "7d3d910d5fd575e6e8c5600d83d54e5c47273bfe",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/rust-toolchain/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Rust development environment";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    rust-overlay,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [rust-overlay.overlays.default self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: {
      rustToolchain = final.rust-bin.fromRustupToolchainFile ./rust-toolchain.toml;
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          rustToolchain
          openssl
          pkg-config
          cargo-deny
          cargo-edit
          cargo-watch
          rust-analyzer
        ];

        env = {
          # Required by rust-analyzer
          RUST_SRC_PATH = "${pkgs.rustToolchain}/lib/rustlib/src/rust/library";
        };
      };
    });
  };
}

```````

`/etc/nixos/templates/rust-toolchain/rust-toolchain.toml`:

```````toml
[toolchain]
channel = "1.69.0"
components = ["rust-src", "rustfmt"]
profile = "default"

```````

`/etc/nixos/templates/bun/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/bun/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Bun development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [bun];
      };
    });
  };
}

```````

`/etc/nixos/templates/haskell/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/haskell/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Haskell development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [cabal-install ghc haskell-language-server];
      };
    });
  };
}

```````

`/etc/nixos/templates/php/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/php/flake.nix`:

```````nix
{
  description = "A Nix-flake-based PHP development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [php phpPackages.composer];
      };
    });
  };
}

```````

`/etc/nixos/templates/clojure/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/clojure/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Clojure development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    javaVersion = 23; # Change this value to update the whole stack

    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: let
      jdk = prev."jdk${toString javaVersion}";
    in {
      boot = prev.boot.override {inherit jdk;};
      clojure = prev.clojure.override {inherit jdk;};
      leiningen = prev.leiningen.override {inherit jdk;};
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [boot clojure leiningen];
      };
    });
  };
}

```````

`/etc/nixos/templates/lean4/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/lean4/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Lean 4 development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [lean4];
      };
    });
  };
}

```````

`/etc/nixos/templates/shell/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/shell/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Shell development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [shellcheck];
      };
    });
  };
}

```````

`/etc/nixos/templates/gleam/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/gleam/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Gleam development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [gleam];
      };
    });
  };
}

```````

`/etc/nixos/templates/nim/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/nim/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Nim development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [nim nimble];
      };
    });
  };
}

```````

`/etc/nixos/templates/csharp/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/csharp/flake.nix`:

```````nix
{
  description = "A Nix-flake-based C# development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          #dotnet-sdk_6
          dotnet-sdk_7
          #dotnet-sdk_8
          omnisharp-roslyn
          mono
          msbuild
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/swi-prolog/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/swi-prolog/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Swi-prolog development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [swi-prolog];
      };
    });
  };
}

```````

`/etc/nixos/templates/r/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/r/flake.nix`:

```````nix
{
  description = "A Nix-flake-based R development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: rec {
      rEnv = final.rWrapper.override {
        packages = with final.rPackages; [knitr];
      };
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          rEnv
          pandoc
          texlive.combined.scheme-full
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/nix/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/nix/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Nix development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          cachix
          lorri
          niv
          nixfmt-classic
          statix
          vulnix
          haskellPackages.dhall-nix
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/nickel/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/nickel/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Nickel development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [nickel];
      };
    });
  };
}

```````

`/etc/nixos/templates/latex/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/latex/flake.nix`:

```````nix
{
  description = "A Nix-flake-based LaTeX development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          texlive.combined.scheme-full
          texlab
          tectonic
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/pulumi/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/pulumi/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Pulumi development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          # Pulumi plus:
          # pulumi-watch
          # pulumi-analyzer-* utilities
          # pulumi-language-* utilities
          # pulumi-resource-* utilities
          pulumi-bin

          # Python SDK
          python311

          # Go SDK
          go_1_22

          # Node.js SDK
          nodejs

          # .NET SDK
          dotnet-sdk_6

          # Java SDK
          jdk
          maven

          # Kubernetes
          kubectl

          # Miscellaneous utilities
          jq
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/java/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/java/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Java development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    javaVersion = 23; # Change this value to update the whole stack

    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: let
      jdk = prev."jdk${toString javaVersion}";
    in {
      maven = prev.maven.override {jdk_headless = jdk;};
      gradle = prev.gradle.override {java = jdk;};
      lombok = prev.lombok.override {inherit jdk;};
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          gcc
          gradle
          jdk
          maven
          ncurses
          patchelf
          zlib
        ];

        shellHook = let
          loadLombok = "-javaagent:${pkgs.lombok}/share/java/lombok.jar";
          prev = "\${JAVA_TOOL_OPTIONS:+ $JAVA_TOOL_OPTIONS}";
        in ''
          export JAVA_TOOL_OPTIONS="${loadLombok}${prev}"
        '';
      };
    });
  };
}

```````

`/etc/nixos/templates/node/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/node/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Node.js development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: rec {
      nodejs = prev.nodejs;
      yarn = prev.yarn.override {inherit nodejs;};
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [node2nix nodejs nodePackages.pnpm yarn];
      };
    });
  };
}

```````

`/etc/nixos/templates/jupyter/pyproject.toml`:

```````toml
[tool.poetry]
name = "sample-project"
version = "0.1.0"
description = ""
authors = ["user <user@mail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

```````

`/etc/nixos/templates/jupyter/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/jupyter/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Jupyter development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        venvDir = ".venv";
        packages = with pkgs;
          [poetry python311]
          ++ (with python311Packages; [
            ipykernel
            pip
            venvShellHook
          ]);
      };
    });
  };
}

```````

`/etc/nixos/templates/scala/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/scala/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Scala development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    javaVersion = 23; # Change this value to update the whole stack

    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: let
      jdk = prev."jdk${toString javaVersion}";
    in {
      sbt = prev.sbt.override {jre = jdk;};
      scala = prev.scala_3.override {jre = jdk;};
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [scala sbt coursier];
      };
    });
  };
}

```````

`/etc/nixos/templates/swift/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/swift/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Swift development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          swift
          sourcekit-lsp
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/kotlin/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/kotlin/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Kotlin development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    javaVersion = 23; # Change this value to update the whole stack

    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {
            inherit system;
            overlays = [self.overlays.default];
          };
        });
  in {
    overlays.default = final: prev: let
      jdk = prev."jdk${toString javaVersion}";
    in {
      gradle = prev.gradle.override {java = jdk;};
      kotlin = prev.kotlin.override {jre = jdk;};
    };

    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [
          gcc
          gradle
          kotlin
          ncurses
          patchelf
          zlib
        ];
      };
    });
  };
}

```````

`/etc/nixos/templates/zig/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/zig/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Zig development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [zig zls lldb];
      };
    });
  };
}

```````

`/etc/nixos/templates/dhall/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/dhall/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Dhall development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = let
        # Helper function for building dhall-* tools
        mkDhallTools = ls: builtins.map (tool: pkgs.haskellPackages."dhall-${tool}") ls;

        dhallTools = mkDhallTools [
          "bash"
          "docs"
          "json"
          "lsp-server"
          "nix"
          "nixpkgs"
          "openapi"
          "toml"
          "yaml"
        ];
      in
        pkgs.mkShell {
          packages = (with pkgs; [dhall]) ++ dhallTools;
        };
    });
  };
}

```````

`/etc/nixos/templates/purescript/flake.lock`:

```````lock
{
  "nodes": {
    "easy-purescript-nix": {
      "flake": false,
      "locked": {
        "lastModified": 1710161569,
        "narHash": "sha256-lcIRIOFCdIWEGyKyG/tB4KvxM9zoWuBRDxW+T+mvIb0=",
        "owner": "justinwoo",
        "repo": "easy-purescript-nix",
        "rev": "117fd96acb69d7d1727df95b6fde9d8715e031fc",
        "type": "github"
      },
      "original": {
        "owner": "justinwoo",
        "repo": "easy-purescript-nix",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "easy-purescript-nix": "easy-purescript-nix",
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/purescript/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Purescript development environment";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    easy-purescript-nix = {
      url = "github:justinwoo/easy-purescript-nix";
      flake = false;
    };
  };

  outputs = {
    self,
    nixpkgs,
    easy-purescript-nix,
  }: let
    supportedSystems = ["x86_64-linux"]; # "aarch64-linux" not supported
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = let
        easy-ps = import easy-purescript-nix {inherit pkgs;};
      in
        pkgs.mkShell {
          packages =
            (with pkgs; [nodejs])
            ++ (with easy-ps; [
              purs
              spago
              purescript-language-server
              purs-tidy
            ]);
        };
    });
  };
}

```````

`/etc/nixos/templates/python/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/python/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Python development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        venvDir = ".venv";
        packages = with pkgs;
          [python311]
          ++ (with pkgs.python311Packages; [
            pip
            venvShellHook
          ]);
      };
    });
  };
}

```````

`/etc/nixos/templates/haxe/flake.lock`:

```````lock
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1734424634,
        "narHash": "sha256-cHar1vqHOOyC7f1+tVycPoWTfKIaqkoe1Q6TnKzuti4=",
        "rev": "d3c42f187194c26d9f0309a8ecc469d6c878ce33",
        "revCount": 723344,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.1.723344%2Brev-d3c42f187194c26d9f0309a8ecc469d6c878ce33/0193d9b3-49fb-789b-bb91-5288681df0a7/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/NixOS/nixpkgs/0.1.%2A.tar.gz"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````

`/etc/nixos/templates/haxe/flake.nix`:

```````nix
{
  description = "A Nix-flake-based Haxe development environment";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

  outputs = {
    self,
    nixpkgs,
  }: let
    supportedSystems = ["x86_64-linux" "aarch64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
        });
  in {
    devShells = forEachSupportedSystem ({pkgs}: {
      default = pkgs.mkShell {
        packages = with pkgs; [haxe];
      };
    });
  };
}

```````

`/etc/nixos/pkgs/default.nix`:

```````nix
pkgs: {
  material-symbols = pkgs.callPackage ./material-symbols {};
  sea-greeter = pkgs.callPackage ./sea-greeter.nix {};
}

```````

`/etc/nixos/pkgs/sea-greeter.nix`:

```````nix
{
  stdenv,
  pkgs,
}:
# TODO Builod this out to be functional as a Display Manager. Currently it has the repo source and the necessary packages but it needs options to be built, likely based on other lightdm greeters
stdenv.mkDerivation {
  pname = "sea-greeter";
  version = "0.1.0";

  src = pkgs.fetchFromGitHub {
    owner = "JezerM";
    repo = "sea-greeter";
    rev = "ffd2f3c52601127a46d478cd2cd4a9e03719c73f";
    sha256 = "1q58nzksa1hbradb2z01kgljbb3fa1pv535b5xk4b84l1nw5qgp4";
  };

  nativeBuildInputs = [pkgs.meson pkgs.ninja pkgs.typescript pkgs.gcc pkgs.pkg-config];
  buildInputs = with pkgs; [
    gtk3
    webkitgtk
    libyaml
    glib
    lightdm
  ];
}

```````

`/etc/nixos/pkgs/material-symbols/default.nix`:

```````nix
{
  lib,
  stdenvNoCC,
  fetchFromGitHub,
  util-linux,
}:
stdenvNoCC.mkDerivation {
  pname = "material-symbols";
  version = "unstable-2023-01-07";

  src = fetchFromGitHub {
    owner = "google";
    repo = "material-design-icons";
    rev = "511eea577b20d2b02ad77477750da1e44c66a52c";
    sha256 = "sha256-ENoWeyV9Dw26pgjy0Xst+qpxJ/mjgfqrY2Du2VwzwCE=";
    sparseCheckout = ["variablefont"];
  };

  nativeBuildInputs = [util-linux];

  installPhase = ''
    runHook preInstall

    rename '[FILL,GRAD,opsz,wght]' "" variablefont/*
    install -Dm755 variablefont/*.ttf -t $out/share/fonts/TTF
    install -Dm755 variablefont/*.woff2 -t $out/share/fonts/woff2

    runHook postInstall
  '';

  meta = with lib; {
    description = "Material Symbols icons by Google";
    homepage = "https://fonts.google.com/icons";
    license = lib.licenses.asl20;
    maintainers = with maintainers; [fufexan];
    platforms = platforms.all;
  };
}

```````